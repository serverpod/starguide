You are a helpful and informative AI assistant who answers questions about Serverpod and Flutter. Serverpod is an open-source, scalable backend for Flutter written in Dart. You must only answer questions about Serverpod and Flutter; if asked about anything else, answer "I can only answer questions about Serverpod." Always format your response clearly, using headings, bullet points, and code snippets where appropriate for better readability. If the answer cannot be found in the provided documentation and if you do not know the answer, say, "I cannot answer this question based on the provided documentation."

At the end of the response, provide sources for the documents referenced in your answer. Only include references that are relevant to your answer. The references will be automatically formatted, so it is important that you format them as follows. First, make a headline called "# References", then add markdown links one line at a time. For instance, like this (do not include the ticks):

```
# References
[Document 1 Title](https://example.com/doc1)
[Document 2 Title](https://example.com/doc2)
```

Here are the relevant documentation in condensed form:

<documentation>
TITLE: Starting Serverpod Server with Docker and Migrations
DESCRIPTION: These commands start the Docker containers for Postgres and Redis, then run the Serverpod server with migrations applied. It's executed from within the mypod_server directory.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/01-get-started/03-creating-project.md#2025-04-16_snippet_1

LANGUAGE: bash
CODE:
$ cd mypod/mypod_server
$ docker compose up --build --detach
$ dart bin/main.dart --apply-migrations

----------------------------------------

TITLE: Defining a Company Model in Serverpod with YAML
DESCRIPTION: YAML definition for a simple Company model with a name field, which Serverpod uses to generate the necessary database models and controllers.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/06-database/05-crud.md#2025-04-16_snippet_0

LANGUAGE: yaml
CODE:
class: Company
table: company
fields:
  name: String

----------------------------------------

TITLE: Updating Client Code after Endpoint Changes
DESCRIPTION: Commands to generate updated client code after adding or modifying endpoints, ensuring the Flutter app has access to the latest server methods.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/01-get-started/04-get-started-with-mini.md#2025-04-16_snippet_6

LANGUAGE: bash
CODE:
$ cd myminipod/myminipod_server
$ serverpod generate

----------------------------------------

TITLE: Complete Notes Endpoint Implementation
DESCRIPTION: Complete implementation of the NotesEndpoint class with methods for creating, retrieving, and deleting notes. This provides the full API for the note-taking application.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/05-tutorials/01-first-app.mdx#2025-04-16_snippet_12

LANGUAGE: dart
CODE:
import 'package:serverpod/server.dart';

import '../generated/protocol.dart';

class NotesEndpoint extends Endpoint {
  Future<List<Note>> getAllNotes(Session session) async {
    // By ordering by the id column, we always get the notes in the same order
    // and not in the order they were updated.
    return await Note.db.find(
      session,
      orderBy: (t) => t.id,
    );
  }

  Future<void> createNote(Session session, Note note) async {
    await Note.db.insertRow(session, note);
  }

  Future<void> deleteNote(Session session, Note note) async {
    await Note.db.deleteRow(session, note);
  }
}

----------------------------------------

TITLE: Creating an Endpoint in Dart for Serverpod
DESCRIPTION: Demonstrates how to create a basic endpoint class with a 'hello' method in Serverpod. The endpoint extends the Endpoint class and returns a Future<String>.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/01-working-with-endpoints.md#2025-04-16_snippet_0

LANGUAGE: dart
CODE:
import 'package:serverpod/serverpod.dart';

class ExampleEndpoint extends Endpoint {
  Future<String> hello(Session session, String name) async {
    return 'Hello $name';
  }
}

----------------------------------------

TITLE: Creating a Basic Endpoint in Dart
DESCRIPTION: This code example demonstrates how to create a simple endpoint in Serverpod. The endpoint extends the Endpoint class and contains a single method named 'hello' that takes a Session object and a name string as parameters, then returns a greeting message as a Future<String>.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/01-working-with-endpoints.md#2025-04-16_snippet_0

LANGUAGE: dart
CODE:
import 'package:serverpod/serverpod.dart';

class ExampleEndpoint extends Endpoint {
  Future<String> hello(Session session, String name) async {
    return 'Hello $name';
  }
}

----------------------------------------

TITLE: Executing a Database Transaction in Serverpod with Dart
DESCRIPTION: This snippet demonstrates how to use the session.db.transaction method to perform multiple database operations atomically. It inserts a company and an employee record within a single transaction, ensuring that either both operations succeed or neither does.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/06-database/08-transactions.md#2025-04-16_snippet_0

LANGUAGE: dart
CODE:
var result = await session.db.transaction((transaction) async {
  // Do some database queries here.
  await Company.db.insertRow(session, company, transaction: transaction);
  await Employee.db.insertRow(session, employee, transaction: transaction);

  // Optionally return a value.
  return true;
});

----------------------------------------

TITLE: Executing Raw SQL Query with Parameter Binding in Dart
DESCRIPTION: Demonstrates how to execute a raw SQL SELECT query using unsafeQuery with named parameter binding for safe database access.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/06-database/10-raw-access.md#2025-04-16_snippet_0

LANGUAGE: dart
CODE:
DatabaseResult result = await session.db.unsafeQuery(
  r'SELECT * FROM mytable WHERE id = @id', 
  parameters: QueryParameters.named({'id': 1}),
);

----------------------------------------

TITLE: Sorting Database Query Results by Filtered Related Entity Count in Dart
DESCRIPTION: Shows how to fetch companies and sort them by a filtered count of related entities. This example sorts companies by the number of employees with the role of 'developer'.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/06-database/08-sort.md#2025-04-16_snippet_5

LANGUAGE: dart
CODE:
var companies = await Company.db.find(
  session,
  orderBy: (t) => t.employees.count(
    (employee) => employee.role.equals('developer'),
  ),
);

----------------------------------------

TITLE: Implementing Basic Serverpod Endpoint in Dart
DESCRIPTION: Example of creating a basic endpoint class that extends Endpoint with a hello method that takes a name parameter and returns a greeting string.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/05-concepts/01-working-with-endpoints.md#2025-04-16_snippet_0

LANGUAGE: dart
CODE:
import 'package:serverpod/serverpod.dart';

class ExampleEndpoint extends Endpoint {
  Future<String> hello(Session session, String name) async {
    return 'Hello $name';
  }
}

----------------------------------------

TITLE: Creating Database Query Expressions in Dart
DESCRIPTION: Dart code showing various examples of type-safe database expressions for filtering queries. Examples include equality checks, date comparisons, numeric ranges, and null checks.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.1.1/05-concepts/05-database-communication.md#2025-04-16_snippet_11

LANGUAGE: dart
CODE:
// The name column of the Company table equals 'My company')
t.name.equals('My company')

// Companies founded at or after 2020
t.foundedDate >= DateTime.utc(2020)

// Companies with number of employees between 10 and 100
(t.numEmployees > 10) & (t.numEmployees <= 100)

// Companies that has the founded date set
t.foundedDate.notEquals(null)

----------------------------------------

TITLE: Directly Removing Authentication Tokens in Serverpod
DESCRIPTION: Example of directly removing authentication tokens from the database, which bypasses necessary processes and is not recommended.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/11-authentication/04-providers/06-custom-providers.md#2025-04-16_snippet_7

LANGUAGE: dart
CODE:
await AuthKey.db.deleteWhere(
  session,
  where: (t) => t.userId.equals(userId) & t.method.equals('username'),
);

----------------------------------------

TITLE: Initializing Note Loading on App Start
DESCRIPTION: Override of the initState method to trigger note loading when the app starts. This ensures notes are fetched from the server as soon as the app is launched.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/05-tutorials/01-first-app.mdx#2025-04-16_snippet_10

LANGUAGE: dart
CODE:
@override
void initState() {
  super.initState();
  _loadNotes();
}

----------------------------------------

TITLE: Updating Specific Column in Single Row
DESCRIPTION: Updates only specified columns in a Company record while preserving others
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/06-database/05-crud.md#2025-04-16_snippet_8

LANGUAGE: dart
CODE:
var company = await Company.db.findById(session, companyId); 
company.name = 'New name';
company.address = 'Baker street';
var updatedCompany = await Company.db.updateRow(session, company, columns: (t) => [t.name]);

----------------------------------------

TITLE: Comprehensive Default Value Examples in Serverpod YAML
DESCRIPTION: A complete example showing how to set default values for various data types including DateTime, boolean, integer, double, and string. Demonstrates both model and persistence defaults.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/02-models.md#2025-04-16_snippet_15

LANGUAGE: yaml
CODE:
class: DefaultValue
table: default_value
fields:
  ### Sets the current date and time as the default value.
  dateTimeDefault: DateTime, default=now

  ### Sets the default value for a boolean field.
  boolDefault: bool, defaultModel=false, defaultPersist=true

  ### Sets the default value for an integer field.
  intDefault: int, defaultPersist=20

  ### Sets the default value for a double field.
  doubleDefault: double, default=10.5, defaultPersist=20.5

  ### Sets the default value for a string field.
  stringDefault: String, default="This is a string", defaultModel="This is a string"

----------------------------------------

TITLE: Generating Serverpod Client Library
DESCRIPTION: Command to generate client library code for a Serverpod application. This needs to be run from the server directory to create the client code that will be used by the Flutter app.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/05-tutorials/01-first-app.mdx#2025-04-16_snippet_6

LANGUAGE: bash
CODE:
$ serverpod generate

----------------------------------------

TITLE: Filtered Deletion in Serverpod
DESCRIPTION: Deletes all Company records that match specific filter criteria. In this example, all companies with names ending in 'Ltd' will be deleted. Returns a List of deleted Company models.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/06-database/05-crud.md#2025-04-16_snippet_12

LANGUAGE: dart
CODE:
var companiesDeleted = await Company.db.deleteWhere(
  session,
  where: (t) => t.name.like('%Ltd'),
);

----------------------------------------

TITLE: Applying Database Migrations in Serverpod
DESCRIPTION: Shows how to apply database migrations when starting the Serverpod server.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/01-get-started/08-working-with-database.md#2025-04-16_snippet_3

LANGUAGE: bash
CODE:
$ cd mypod/mypod_server
$ dart bin/main.dart --apply-migrations

----------------------------------------

TITLE: Requiring Authentication for Endpoints in Dart with Serverpod
DESCRIPTION: This snippet illustrates how to restrict access to an endpoint to authenticated users only. It overrides the requireLogin property of the Endpoint class.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/11-authentication/02-basics.md#2025-04-16_snippet_2

LANGUAGE: dart
CODE:
class MyEndpoint extends Endpoint {
  @override
  bool get requireLogin => true;

  Future<void> myMethod(Session session) async {
    ...
  }
  ...
}

----------------------------------------

TITLE: Custom Authentication Endpoint Implementation in Dart
DESCRIPTION: Complete example of a custom authentication endpoint that handles login, user creation, and token generation.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/11-authentication/04-providers/06-custom-providers.md#2025-04-16_snippet_3

LANGUAGE: dart
CODE:
class MyAuthenticationEndpoint extends Endpoint {
  Future<AuthenticationResponse> login(
    Session session,
    String username,
    String password,
  ) async {
    if (!authenticateUser(session, username, password)) {
      return AuthenticationResponse(success: false);
    }
    var userInfo = findOrCreateUser(session, username);
    var authToken = await UserAuthentication.signInUser(
      session,
      userInfo.id!,
      'myAuth',
      scopes: {},
    );
    return AuthenticationResponse(
      success: true,
      keyId: authToken.id,
      key: authToken.key,
      userInfo: userInfo,
    );
  }
}

----------------------------------------

TITLE: Defining a Unique Index in YAML for Serverpod
DESCRIPTION: This snippet illustrates how to create a unique index in Serverpod. It defines a 'Company' class with a 'name' field and creates a unique index on that field to ensure no two companies have the same name.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/06-database/04-indexing.md#2025-04-16_snippet_2

LANGUAGE: yaml
CODE:
class: Company
table: company
fields:
  name: String
indexes:
  company_name_idx:
    fields: name
    unique: true

----------------------------------------

TITLE: Calling an Endpoint Method from Client Side in Dart
DESCRIPTION: Shows how to call a server endpoint method from the client side. The example demonstrates invoking the hello method of the example endpoint using a client instance.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/01-working-with-endpoints.md#2025-04-16_snippet_1

LANGUAGE: dart
CODE:
var result = await client.example.hello('World');

----------------------------------------

TITLE: Client-side File Upload Process in Dart
DESCRIPTION: Client-side code demonstrating the file upload process. It requests an upload description, creates a FileUploader, performs the upload, and verifies the upload with the server.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/05-concepts/11-file-uploads.md#2025-04-16_snippet_2

LANGUAGE: dart
CODE:
var uploadDescription = await client.myEndpoint.getUploadDescription('myfile');
if (uploadDescription != null) {
  var uploader = FileUploader(uploadDescription);
  await uploader.upload(myStream);
  var success = await client.myEndpoint.verifyUpload('myfile');
}

----------------------------------------

TITLE: Initializing a Serverpod Client in Dart
DESCRIPTION: This code demonstrates how to initialize a Serverpod client to communicate with the server. It creates a Client object with the server's URL and sets up a connectivity monitor for handling network state changes.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/01-working-with-endpoints.md#2025-04-16_snippet_2

LANGUAGE: dart
CODE:
// Sets up a singleton client object that can be used to talk to the server from
// anywhere in our app. The client is generated from your server code.
// The client is set up to connect to a Serverpod running on a local server on
// the default port. You will need to modify this to connect to staging or
// production servers.
var client = Client('http://$localhost:8080/')
  ..connectivityMonitor = FlutterConnectivityMonitor();

----------------------------------------

TITLE: Configuring Email Authentication in Serverpod Server
DESCRIPTION: This snippet shows how to set up email authentication on the server side, including methods for sending validation and password reset emails.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/11-authentication/04-providers/01-email.md#2025-04-16_snippet_0

LANGUAGE: dart
CODE:
import 'package:serverpod_auth_server/module.dart' as auth;

auth.AuthConfig.set(auth.AuthConfig(
  sendValidationEmail: (session, email, validationCode) async {
    // Send the validation email to the user.
    // Return `true` if the email was successfully sent, otherwise `false`.
    return true;
  },
  sendPasswordResetEmail: (session, userInfo, validationCode) async {
    // Send the password reset email to the user.
    // Return `true` if the email was successfully sent, otherwise `false`.
    return true;
  },
));

// Start the Serverpod server.
await pod.start();

----------------------------------------

TITLE: Creating an Endpoint in Dart for Serverpod
DESCRIPTION: Demonstrates how to create a simple endpoint class with a method that returns a greeting. This endpoint extends the Endpoint class and includes a method that takes a Session object and a name parameter.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/05-concepts/01-working-with-endpoints.md#2025-04-16_snippet_0

LANGUAGE: dart
CODE:
import 'package:serverpod/serverpod.dart';

class ExampleEndpoint extends Endpoint {
  Future<String> hello(Session session, String name) async {
    return 'Hello $name';
  }
}

----------------------------------------

TITLE: Catching Custom Exception in Serverpod Client (Dart)
DESCRIPTION: This Dart code snippet demonstrates how to catch a custom exception 'MyException' in a Serverpod client application. It shows proper error handling for both specific and general exceptions when making server calls.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/04-exceptions.md#2025-04-16_snippet_2

LANGUAGE: dart
CODE:
try {
  client.example.doThingy();
}
on MyException catch(e) {
  print(e.message);
}
catch(e) {
  print('Something else went wrong.');
}

----------------------------------------

TITLE: Implementing Scope-based Authorization for Serverpod Endpoints in Dart
DESCRIPTION: Demonstrates how to restrict access to a Serverpod endpoint based on user scopes, such as admin access.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/11-authentication/02-basics.md#2025-04-16_snippet_3

LANGUAGE: dart
CODE:
class MyEndpoint extends Endpoint {
  @override
  bool get requireLogin => true;

  @override
  Set<Scope> get requiredScopes => {Scope.admin};

  Future<void> myMethod(Session session) async {
    ...
  }
  ...
}

----------------------------------------

TITLE: Creating a Custom Authentication Endpoint in Serverpod
DESCRIPTION: Complete example of implementing a custom authentication endpoint that authenticates a user, creates or finds their user record, generates an auth token, and returns an authentication response.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/11-authentication/04-providers/06-custom-providers.md#2025-04-16_snippet_3

LANGUAGE: dart
CODE:
class MyAuthenticationEndpoint extends Endpoint {
  Future<AuthenticationResponse> login(
    Session session,
    String username,
    String password,
  ) async {
    // Authenticates a user with email and password.
    if (!authenticateUser(session, username, password)) {
      return AuthenticationResponse(success: false);
    }

    // Finds or creates a user in the database using the User methods.
    var userInfo = findOrCreateUser(session, username);

    // Creates an authentication key for the user.
    var authToken = await UserAuthentication.signInUser(
      session,
      userInfo.id!,
      'myAuth',
      scopes: {},
    );

    // Returns the authentication response.
    return AuthenticationResponse(
      success: true,
      keyId: authToken.id,
      key: authToken.key,
      userInfo: userInfo,
    );
  }
}

----------------------------------------

TITLE: Defining Bidirectional One-to-Many Relationship with Object Relation in Serverpod
DESCRIPTION: This example demonstrates how to create a bidirectional one-to-many relationship using object relations on both sides, connected by a named relation identifier.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/06-database/03-relations/02-one-to-many.md#2025-04-16_snippet_3

LANGUAGE: yaml
CODE:
# company.yaml
class: Company
table: company
fields:
  name: String
  employees: List<Employee>?, relation(name=company_employees)

# employee.yaml
class: Employee
table: employee
fields:
  name: String
  company: Company?, relation(name=company_employees)

----------------------------------------

TITLE: Implementing CRUD Operations for Notes API
DESCRIPTION: Complete implementation of the NotesEndpoint class with methods for creating, retrieving, and deleting notes in the database.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.1.1/03-tutorials/01-first-app.mdx#2025-04-16_snippet_8

LANGUAGE: dart
CODE:
import 'package:serverpod/server.dart';

import '../generated/protocol.dart';

class NotesEndpoint extends Endpoint {
  Future<List<Note>> getAllNotes(Session session) async {
    // By ordering by the id column, we always get the notes in the same order
    // and not in the order they were updated.
    return await Note.find(
      session,
      orderBy: Note.t.id,
    );
  }

  Future<void> createNote(Session session, Note note) async {
    await Note.insert(session, note);
  }

  Future<void> deleteNote(Session session, Note note) async {
    await Note.deleteRow(session, note);
  }
}

----------------------------------------

TITLE: Setting Up App Dependencies for Authentication
DESCRIPTION: Configuration for app's pubspec.yaml with necessary dependencies for authentication support.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/11-authentication/01-setup.md#2025-04-16_snippet_9

LANGUAGE: yaml
CODE:
dependencies:
  flutter:
    sdk: flutter
  serverpod_flutter: ^1.x.x
  auth_example_client:
    path: ../auth_example_client
  
  serverpod_auth_shared_flutter: ^1.x.x

----------------------------------------

TITLE: Initializing Serverpod Client in Dart
DESCRIPTION: This code demonstrates how to initialize a Serverpod client. It sets up a singleton client object that can be used to communicate with the server from anywhere in the app. The client is configured to connect to a local server on the default port.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.1.1/05-concepts/01-working-with-endpoints.md#2025-04-16_snippet_2

LANGUAGE: dart
CODE:
var client = Client('http://localhost:8080/')
  ..connectivityMonitor = FlutterConnectivityMonitor();

----------------------------------------

TITLE: Initializing Serverpod Client in Dart
DESCRIPTION: Demonstrates how to set up a singleton client object for communicating with the Serverpod server, including connectivity monitoring setup.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/01-working-with-endpoints.md#2025-04-16_snippet_2

LANGUAGE: dart
CODE:
var client = Client('http://$localhost:8080/')
  ..connectivityMonitor = FlutterConnectivityMonitor();

----------------------------------------

TITLE: Complete Implementation of NotesEndpoint with CRUD Operations
DESCRIPTION: Full implementation of the NotesEndpoint class combining all CRUD operations for managing Note objects in the database.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/05-tutorials/01-first-app.mdx#2025-04-16_snippet_12

LANGUAGE: dart
CODE:
import 'package:serverpod/server.dart';

import '../generated/protocol.dart';

class NotesEndpoint extends Endpoint {
  Future<List<Note>> getAllNotes(Session session) async {
    // By ordering by the id column, we always get the notes in the same order
    // and not in the order they were updated.
    return await Note.db.find(
      session,
      orderBy: (t) => t.id,
    );
  }

  Future<void> createNote(Session session, Note note) async {
    await Note.db.insertRow(session, note);
  }

  Future<void> deleteNote(Session session, Note note) async {
    await Note.db.deleteRow(session, note);
  }
}

----------------------------------------

TITLE: Using CacheMissHandler for Streamlined Caching in Serverpod
DESCRIPTION: This snippet demonstrates using Serverpod's CacheMissHandler for a more concise implementation of caching. The handler automatically loads data from the database when a cache miss occurs and stores it in the cache with the specified lifetime.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/08-caching.md#2025-04-16_snippet_1

LANGUAGE: dart
CODE:
Future<UserData> getUserData(Session session, int userId) async {
  // Define a unique key for the UserData object
  var cacheKey = 'UserData-$userId';

  // Try to retrieve the object from the cache
  var userData = await session.caches.local.get(
    cacheKey,
    // If the object wasn't found in the cache, load it from the database and
    // save it in the cache. Make it valid for 5 minutes.
    CacheMissHandler(
      () async => UserData.db.findById(session, userId),
      lifetime: Duration(minutes: 5),
    ),
    );

  // Return the user data to the client
  return userData;
}

----------------------------------------

TITLE: Updating Specific Columns in a Single Row in Serverpod with Dart
DESCRIPTION: Updates only specified columns in a Company record, leaving other fields untouched even if changed in the Dart object. Returns the updated model.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/06-database/05-crud.md#2025-04-16_snippet_8

LANGUAGE: dart
CODE:
var company = await Company.db.findById(session, companyId); 
company.name = 'New name';
company.address = 'Baker street';
var updatedCompany = await Company.db.updateRow(session, company, columns: (t) => [t.name]);

----------------------------------------

TITLE: Fetching Notes from Serverpod Backend in Dart
DESCRIPTION: Implements a method to fetch notes from the Serverpod backend and update the app's state, including error handling.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/03-tutorials/01-first-app.mdx#2025-04-16_snippet_11

LANGUAGE: dart
CODE:
Future<void> _loadNotes() async {
  try {
    final notes = await client.notes.getAllNotes();
    setState(() {
      _notes = notes;
    });
  } catch (e) {
    _connectionFailed(e);
  }
}


----------------------------------------

TITLE: Configuring Authentication Settings
DESCRIPTION: Code example showing how to customize the authentication configuration in your main server.dart file. This allows setting parameters like minimum password length and other security features.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/11-authentication/01-setup.md#2025-04-16_snippet_7

LANGUAGE: dart
CODE:
import 'package:serverpod_auth_server/module.dart' as auth;  
  
void run(List<String> args) async {

  auth.AuthConfig.set(auth.AuthConfig(  
    minPasswordLength: 12,
  ));  
    
  // Start the Serverpod server.  
  await pod.start();
}

----------------------------------------

TITLE: Setting Up a Basic Serverpod Endpoint
DESCRIPTION: Initial code for creating a NotesEndpoint class that extends the Serverpod Endpoint class, which will handle API requests.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/05-tutorials/01-first-app.mdx#2025-04-16_snippet_7

LANGUAGE: dart
CODE:
import 'package:serverpod/server.dart';

import '../generated/protocol.dart';

class NotesEndpoint extends Endpoint {
  // Endpoint implementation goes here
}


----------------------------------------

TITLE: Accessing YouTube API on Server-Side with Serverpod and Dart
DESCRIPTION: This code snippet shows how to use the googleapis package to access the YouTube API on the server-side using Serverpod authentication. It demonstrates creating an authenticated client and making an API call to retrieve a user's liked videos.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/11-authentication/04-providers/02-google.md#2025-04-16_snippet_6

LANGUAGE: dart
CODE:
import 'package:serverpod_auth_server/module.dart';
import 'package:googleapis/youtube/v3.dart';


final googleClient = await GoogleAuth.authClientForUser(session, userId);

if (googleClient != null) {
  var youTubeApi = YouTubeApi(googleClient);

  var favorites = await youTubeApi.playlistItems.list(
    ['snippet'],
    playlistId: 'LL', // Liked List
  );

} else {
  // The user hasn't signed in with Google.
}

----------------------------------------

TITLE: Running Serverpod Flutter Demo App
DESCRIPTION: Commands to change directory to the Flutter package and run the demo app in Chrome.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/01-get-started.md#2025-04-16_snippet_2

LANGUAGE: bash
CODE:
$ cd mypod/mypod_flutter
$ flutter run -d chrome

----------------------------------------

TITLE: Creating a Server-Only Class Model in YAML for Serverpod
DESCRIPTION: This example shows how to create a class model that is only generated on the server side, useful for private information. It uses the 'serverOnly' property to restrict visibility.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/02-models.md#2025-04-16_snippet_1

LANGUAGE: yaml
CODE:
class: MyPrivateClass
serverOnly: true
fields:
  hiddenSecretKey: String

----------------------------------------

TITLE: Adding Routes to Serverpod Web Server in Dart
DESCRIPTION: Demonstrates how to add new routes to the Serverpod web server. It shows adding a single page route and a wildcard route that matches multiple paths.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/18-webserver.md#2025-04-16_snippet_0

LANGUAGE: dart
CODE:
// Add a single page.
pod.webServer.addRoute(MyRoute(), '/my/page/address');

// Match all paths that start with /item/
pod.webServer.addRoute(AnotherRoute(), '/item/*');

----------------------------------------

TITLE: Throwing Serializable Exception in Dart Server Code
DESCRIPTION: This Dart code snippet demonstrates how to throw a serializable exception (MyException) in a Serverpod endpoint. It includes a condition check and throws the exception with custom message and error type.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/05-concepts/04-exceptions.md#2025-04-16_snippet_1

LANGUAGE: dart
CODE:
class ExampleEndpoint extends Endpoint {
  Future<void> doThingy(Session session) {
    // ... do stuff ...
    if (failure) {
      throw MyException(
        message: 'Failed to do thingy',
        errorType: MyEnum.thingyError,
      );
    }
  }
}

----------------------------------------

TITLE: Nested Includes in Serverpod Queries (Dart)
DESCRIPTION: Shows how to include deeply nested objects in a query. This example retrieves an employee with both its company and the company's address included.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/06-database/07-relation-queries.md#2025-04-16_snippet_1

LANGUAGE: dart
CODE:
var employee = await Employee.db.findById(
  session,
  employeeId,
  include: Employee.include(
    company: Company.include(
      address: Address.include(),
    ),
  ),
);

----------------------------------------

TITLE: Creating a New Serverpod Project
DESCRIPTION: Command to create a new Serverpod project named 'mypod' using the Serverpod CLI.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.21/index.md#2025-04-16_snippet_2

LANGUAGE: bash
CODE:
serverpod create mypod

----------------------------------------

TITLE: Creating an Authentication Token in Serverpod
DESCRIPTION: Code snippet showing how to create an authentication token for a user with specific scopes using the UserAuthentication.signInUser method.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/11-authentication/04-providers/06-custom-providers.md#2025-04-16_snippet_2

LANGUAGE: dart
CODE:
var authToken = await UserAuthentication.signInUser(userInfo.id, 'myAuthMethod', scopes: {
    Scope('delete'),
    Scope('create'),
});

----------------------------------------

TITLE: Fetching User Information in Serverpod
DESCRIPTION: This code shows how to retrieve detailed user information using the Users class in Serverpod, given a user ID obtained from the session.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/05-concepts/10-authentication/03-working-with-users.md#2025-04-16_snippet_1

LANGUAGE: dart
CODE:
var userInfo = await Users.findUserByUserId(session, userId!);

----------------------------------------

TITLE: Initializing Firebase in Flutter main.dart
DESCRIPTION: Dart code snippet for initializing Firebase in the main function of a Flutter app. It configures Firebase and sets up FirebaseUIAuth providers.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/11-authentication/04-providers/05-firebase.md#2025-04-16_snippet_1

LANGUAGE: dart
CODE:
import 'package:firebase_ui_auth/firebase_ui_auth.dart' as firebase;
import 'package:firebase_core/firebase_core.dart';
import 'firebase_options.dart';

...
void main() async {
  ...
  await Firebase.initializeApp(
      options: DefaultFirebaseOptions.currentPlatform,
    );

  firebase.FirebaseUIAuth.configureProviders([
    firebase.PhoneAuthProvider(),
  ]);

  ...
  runApp(const MyApp());
}

----------------------------------------

TITLE: Rolling Back to Savepoints
DESCRIPTION: Shows how to roll back a transaction to a previously created savepoint, preserving changes made before the savepoint while discarding later changes.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/06-database/08-transactions.md#2025-04-16_snippet_3

LANGUAGE: dart
CODE:
await session.db.transaction((transaction) async {
  // Changes preserved in the database
  await Company.db.insertRow(session, company, transaction: transaction);
  
  // Create savepoint
  var savepoint = await transaction.createSavepoint();

  await Employee.db.insertRow(session, employee, transaction: transaction);
  // Changes rolled back 
  await savepoint.rollback();
});

----------------------------------------

TITLE: Basic Cache Implementation in Dart Serverpod Endpoint
DESCRIPTION: Demonstrates how to implement basic caching for user data in a Serverpod endpoint. Shows checking the cache, retrieving from database on cache miss, and storing in cache with a 5-minute lifetime.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/08-caching.md#2025-04-16_snippet_0

LANGUAGE: dart
CODE:
Future<UserData> getUserData(Session session, int userId) async {
  // Define a unique key for the UserData object
  var cacheKey = 'UserData-$userId';

  // Try to retrieve the object from the cache
  var userData = await session.caches.local.get<UserData>(cacheKey);

  // If the object wasn't found in the cache, load it from the database and
  // save it in the cache. Make it valid for 5 minutes.
  if (userData == null) {
    userData = UserData.db.findById(session, userId);
    await session.caches.local.put(cacheKey, userData!, lifetime: Duration(minutes: 5));
  }

  // Return the user data to the client
  return userData;
}

----------------------------------------

TITLE: Bidirectional One-to-one Relations in Serverpod
DESCRIPTION: Example demonstrating how to create a bidirectional one-to-one relationship where both sides reference the same relationship using the 'name' parameter to connect the fields.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/06-database/03-relations/01-one-to-one.md#2025-04-16_snippet_6

LANGUAGE: yaml
CODE:
# user.yaml
class: User
table: user
fields:
  addressId: int
  address: Address?, relation(name=user_address, field=addressId)
indexes:
  user_address_unique_idx:
    fields: addressId
    unique: true

# address.yaml
class: Address
table: address
fields:
  street: String
  user: User?, relation(name=user_address)

----------------------------------------

TITLE: Calling an Endpoint Method from Client-Side Dart
DESCRIPTION: This code snippet shows how to call an endpoint method from the client side. After generating client code with 'serverpod generate', you can access the endpoint through the client object and call its methods directly.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/01-working-with-endpoints.md#2025-04-16_snippet_1

LANGUAGE: dart
CODE:
var result = await client.example.hello('World');

----------------------------------------

TITLE: Executing Raw SQL Queries in Dart with Serverpod
DESCRIPTION: This Dart snippet demonstrates how to execute raw SQL queries in Serverpod for more advanced database tasks. It shows a simple SELECT query as an example.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.22/04-concepts/03-database-communication.md#2025-04-16_snippet_14

LANGUAGE: dart
CODE:
var result = await session.db.query('SELECT * FROM mytable WHERE ...');

----------------------------------------

TITLE: Creating Basic Serverpod Endpoint in Dart
DESCRIPTION: Demonstrates how to create a simple endpoint class that extends Endpoint and implements a hello method. The endpoint must be placed in lib/src/endpoints directory and return a typed Future with Session as first parameter.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/01-get-started/06-working-with-endpoints.md#2025-04-16_snippet_0

LANGUAGE: dart
CODE:
import 'package:serverpod/serverpod.dart';

class ExampleEndpoint extends Endpoint {
  Future<String> hello(Session session, String name) async {
    return 'Hello $name';
  }
}

----------------------------------------

TITLE: Client-Side File Upload Implementation
DESCRIPTION: Client-side code for uploading a file using Serverpod. This process involves requesting an upload description, creating a FileUploader, uploading the file data, and verifying the upload completion.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.1.0/04-concepts/10-file-uploads.md#2025-04-16_snippet_2

LANGUAGE: dart
CODE:
var uploadDescription = await client.myEndpoint.getUploadDescription('myfile');
if (uploadDescription != null) {
  var uploader = FileUploader(uploadDescription);
  await uploader.upload(myStream);
  var success = await client.myEndpoint.verifyUpload('myfile');
}

----------------------------------------

TITLE: Implementing Note Creation Endpoint
DESCRIPTION: Endpoint method for creating a new note in the database. Takes a Note object as parameter and inserts it into the database using the generated db methods.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/05-tutorials/01-first-app.mdx#2025-04-16_snippet_9

LANGUAGE: dart
CODE:
Future<void> createNote(Session session, Note note) async {
  await Note.db.insertRow(session, note);
}

----------------------------------------

TITLE: Setting up SessionManager in Dart
DESCRIPTION: This Dart code sets up a SessionManager to handle user authentication state in the app's main file.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/11-authentication/01-setup.md#2025-04-16_snippet_10

LANGUAGE: dart
CODE:
late SessionManager sessionManager;
late Client client;

void main() async {
  WidgetsFlutterBinding.ensureInitialized();

  const ipAddress = 'localhost';

  client = Client(
    'http://$ipAddress:8080/',
    authenticationKeyManager: FlutterAuthenticationKeyManager(),
  )..connectivityMonitor = FlutterConnectivityMonitor();

  sessionManager = SessionManager(
    caller: client.modules.auth,
  );
  await sessionManager.initialize();

  runApp(MyApp());
}

----------------------------------------

TITLE: Setting Up SessionManager for Authentication in Flutter App
DESCRIPTION: Complete setup for initializing a SessionManager in a Flutter app, which handles user state, authentication keys, and communication with the Serverpod server.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/11-authentication/01-setup.md#2025-04-16_snippet_10

LANGUAGE: dart
CODE:
late SessionManager sessionManager;
late Client client;

void main() async {
  // Need to call this as we are using Flutter bindings before runApp is called.
  WidgetsFlutterBinding.ensureInitialized();

  // The android emulator does not have access to the localhost of the machine.
  // const ipAddress = '10.0.2.2'; // Android emulator ip for the host

  // On a real device replace the ipAddress with the IP address of your computer.
  const ipAddress = 'localhost';

  // Sets up a singleton client object that can be used to talk to the server from
  // anywhere in our app. The client is generated from your server code.
  // The client is set up to connect to a Serverpod running on a local server on
  // the default port. You will need to modify this to connect to staging or
  // production servers.
  client = Client(
    'http://$ipAddress:8080/',
    authenticationKeyManager: FlutterAuthenticationKeyManager(),
  )..connectivityMonitor = FlutterConnectivityMonitor();

  // The session manager keeps track of the signed-in state of the user. You
  // can query it to see if the user is currently signed in and get information
  // about the user.
  sessionManager = SessionManager(
    caller: client.modules.auth,
  );
  await sessionManager.initialize();

  runApp(MyApp());
}

----------------------------------------

TITLE: Executing Raw SQL Query with Parameters using unsafeQuery
DESCRIPTION: Demonstrates how to execute a parameterized SQL SELECT query using the extended query protocol with named parameters. Returns a DatabaseResult containing the query results.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/06-database/10-raw-access.md#2025-04-16_snippet_0

LANGUAGE: dart
CODE:
DatabaseResult result = await session.db.unsafeQuery(
  r'SELECT * FROM mytable WHERE id = @id', 
  parameters: QueryParameters.named({'id': 1}),
);

----------------------------------------

TITLE: Using Named and Positional Parameters with SQL Queries in Dart
DESCRIPTION: Examples of using named parameters with @ prefix and positional parameters with $ prefix in raw SQL queries to prevent SQL injection attacks.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/06-database/10-raw-access.md#2025-04-16_snippet_4

LANGUAGE: dart
CODE:
// Named parameters
var result = await db.unsafeQuery(
  r'SELECT id FROM apparel WHERE color = @color AND size = @size',
  QueryParameters.named({
    'color': 'green',
    'size': 'XL',
  }));

// Positional parameters
var result = await db.unsafeQuery(
  r'SELECT id FROM apparel WHERE color = $1 AND size = $2',
  QueryParameters.positional(['green', 'XL']),
);

----------------------------------------

TITLE: Inserting Data into Database
DESCRIPTION: Dart code example showing how to insert a new company record into the database.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/01-get-started.md#2025-04-16_snippet_12

LANGUAGE: dart
CODE:
var myCompany = Company(name: 'Serverpod corp.', foundedDate: DateTime.now());
myCompany = await Company.db.insertRow(session, myCompany);

----------------------------------------

TITLE: Signing In with Email and Password
DESCRIPTION: Authenticating an existing user with email and password credentials. This logs in users who have already registered and verified their accounts.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/11-authentication/04-providers/01-email.md#2025-04-16_snippet_7

LANGUAGE: dart
CODE:
await authController.signIn(email, password);

----------------------------------------

TITLE: Basic Transaction Implementation in Serverpod
DESCRIPTION: Demonstrates how to perform basic database transactions in Serverpod by inserting company and employee records atomically. The transaction will rollback all changes if any operation fails.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/06-database/08-transactions.md#2025-04-16_snippet_0

LANGUAGE: dart
CODE:
var result = await session.db.transaction((transaction) async {
  // Do some database queries here.
  await Company.db.insertRow(session, company, transaction: transaction);
  await Employee.db.insertRow(session, employee, transaction: transaction);

  // Optionally return a value.
  return true;
});

----------------------------------------

TITLE: Implementing User Data Caching in Serverpod with Dart
DESCRIPTION: This snippet demonstrates how to implement caching for user data in a Serverpod endpoint. It first attempts to retrieve data from the cache using a unique key, and if not found, loads it from the database and stores it in the cache with a 5-minute expiration time.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/05-concepts/07-caching.md#2025-04-16_snippet_0

LANGUAGE: dart
CODE:
Future<UserData> getUserData(Session session, int userId) async {
  // Define a unique key for the UserData object
  var cacheKey = 'UserData-$userId';

  // Try to retrieve the object from the cache
  var userData = await session.caches.local.get<UserData>(cacheKey);

  // If the object wasn't found in the cache, load it from the database and
  // save it in the cache. Make it valid for 5 minutes.
  if (userData == null) {
    userData = session.db.findById(tUserData, userId) as UserData?;
    await session.caches.local.put(cacheKey, userData!, lifetime: Duration(minutes: 5));
  }

  // Return the user data to the client
  return userData;
}

----------------------------------------

TITLE: Applying Database Migrations in Serverpod
DESCRIPTION: Command to start the Serverpod server and apply database migrations.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/01-get-started.md#2025-04-16_snippet_9

LANGUAGE: bash
CODE:
$ cd mypod/mypod_server
$ dart bin/main.dart --apply-migrations

----------------------------------------

TITLE: Complete Main.dart Implementation with Note Functionality
DESCRIPTION: The complete implementation of the main Flutter app with note creation, listing, and error handling functionality. Includes Serverpod client setup, state management, and UI components.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/05-tutorials/01-first-app.mdx#2025-04-16_snippet_26

LANGUAGE: dart
CODE:
import 'package:notes_client/notes_client.dart';
import 'package:flutter/material.dart';
import 'package:serverpod_flutter/serverpod_flutter.dart';

import 'note_dialog.dart';

// Sets up a singleton client object that can be used to talk to the server from
// anywhere in our app. The client is generated from your server code.
// The client is set up to connect to a Serverpod running on a local server on
// the default port. You will need to modify this to connect to staging or
// production servers.
var client = Client('http://localhost:8080/')
  ..connectivityMonitor = FlutterConnectivityMonitor();

void main() {
  runApp(const MyApp());
}

class MyApp extends StatelessWidget {
  const MyApp({Key? key}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Notes',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: const MyHomePage(title: 'Notes'),
    );
  }
}

class MyHomePage extends StatefulWidget {
  const MyHomePage({Key? key, required this.title}) : super(key: key);

  final String title;

  @override
  MyHomePageState createState() => MyHomePageState();
}

class MyHomePageState extends State<MyHomePage> {
  // This field holds the list of notes that we've received from the server or
  // null if no notes have been received yet.
  List<Note>? _notes;

  // If the connection to the server fails, this field will hold the exception
  // that was thrown.
  Exception? _connectionException;

  @override
  void initState() {
    super.initState();
    _loadNotes();
  }

  Future<void> _loadNotes() async {
    try {
      final notes = await client.notes.getAllNotes();
      setState(() {
        _notes = notes;
      });
    } catch (e) {
      _connectionFailed(e);
    }
  }

  Future<void> _createNote(Note note) async {
    try {
      await client.notes.createNote(note);
      await _loadNotes();
    } catch (e) {
      _connectionFailed(e);
    }
  }

  void _connectionFailed(dynamic exception) {
    // If the connection to the server fails, we clear the list of notes and
    // store the exception that was thrown. This will make the loading screen
    // appear and show a button to try again.

    // In a real app you would probably want to do more complete error handling.
    setState(() {
      _notes = null;
      _connectionException = exception;
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text(widget.title),
      ),
      body: _notes == null
          ? LoadingScreen(
              exception: _connectionException,
              onTryAgain: _loadNotes,
            )
          : ListView.builder(
              itemCount: _notes!.length,
              itemBuilder: ((context, index) {
                return ListTile(
                  title: Text(_notes![index].text),
                );
              }),
            ),
      floatingActionButton: _notes == null
          ? null
          : FloatingActionButton(
              onPressed: () {
                // When we tap the floating action button we want to show a
                // dialog where we can create a new note.
                showNoteDialog(
                  context: context,
                  onSaved: (text) {
                    var note = Note(
                      text: text,
                    );

                    // Add the note to the list of notes before we've received
                    // a response from the server which makes the UI feel more
                    // responsive.
                    _notes!.add(note);

                    // Actually create the note on the server.
                    _createNote(note);
                  },
                );
              },
              child: const Icon(Icons.add),
            ),
    );
  }
}

----------------------------------------

TITLE: Creating a Basic Endpoint in Dart with Serverpod
DESCRIPTION: This snippet demonstrates how to create a simple endpoint class that extends the Endpoint class. It includes a hello method that takes a Session and name parameter and returns a greeting string as a Future.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/01-working-with-endpoints.md#2025-04-16_snippet_0

LANGUAGE: dart
CODE:
import 'package:serverpod/serverpod.dart';

class ExampleEndpoint extends Endpoint {
  Future<String> hello(Session session, String name) async {
    return 'Hello $name';
  }
}

----------------------------------------

TITLE: Checking User Authentication Status in Dart
DESCRIPTION: Shows how to access authenticated user information from a Session object and retrieve the userId of the currently signed-in user.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/11-authentication/02-basics.md#2025-04-16_snippet_0

LANGUAGE: dart
CODE:
Future<void> myMethod(Session session) async {
  final authenticationInfo = await session.authenticated;
  final userId = authenticationInfo?.userId;
  ...
}

----------------------------------------

TITLE: Listening for Authentication State Changes in Flutter
DESCRIPTION: Code snippet demonstrating how to add a listener to the SessionManager to track changes in the user's authentication state, useful for updating the UI when the user signs in or out.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/11-authentication/01-setup.md#2025-04-16_snippet_11

LANGUAGE: dart
CODE:
@override
void initState() {
  super.initState();
  
  // Rebuild the page if authentication state changes.
  sessionManager.addListener(() {
    setState(() {});
  });
}

----------------------------------------

TITLE: Client-side File Upload Implementation
DESCRIPTION: Client-side code demonstrating the complete file upload process including getting upload description, uploading file using FileUploader, and verifying the upload.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/12-file-uploads.md#2025-04-16_snippet_2

LANGUAGE: dart
CODE:
var uploadDescription = await client.myEndpoint.getUploadDescription('myfile');
if (uploadDescription != null) {
  var uploader = FileUploader(uploadDescription);
  await uploader.upload(myStream);
  var success = await client.myEndpoint.verifyUpload('myfile');
}

----------------------------------------

TITLE: Complete Default Values Example in YAML
DESCRIPTION: Comprehensive example showing default value configurations for multiple field types including DateTime, boolean, integer, double, and string.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/02-models.md#2025-04-16_snippet_17

LANGUAGE: yaml
CODE:
class: DefaultValue
table: default_value
fields:
  ### Sets the current date and time as the default value.
  dateTimeDefault: DateTime, default=now

  ### Sets the default value for a boolean field.
  boolDefault: bool, defaultModel=false, defaultPersist=true

  ### Sets the default value for an integer field.
  intDefault: int, defaultPersist=20

  ### Sets the default value for a double field.
  doubleDefault: double, default=10.5, defaultPersist=20.5

  ### Sets the default value for a string field.
  stringDefault: String, default="This is a string", defaultModel="This is a string"

----------------------------------------

TITLE: Filtering Users with Any Operator on One-to-Many Relation in Dart
DESCRIPTION: Shows how to find users with any related items using the any operator.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/06-database/06-filter.md#2025-04-16_snippet_21

LANGUAGE: dart
CODE:
await User.db.find(
  where: (t) => t.orders.any()
);

----------------------------------------

TITLE: Configuring Server-Side TLS/SSL in Serverpod
DESCRIPTION: Demonstrates how to set up SSL/TLS security on the server side by configuring SecurityContextConfig with certificate chain and private key. This configuration applies to API, web, and insights servers.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/21-security-configuration.md#2025-04-16_snippet_0

LANGUAGE: dart
CODE:
final securityContext = SecurityContext()
  ..useCertificateChain('path/to/server_cert.pem')
  ..usePrivateKey('path/to/server_key.pem', password: 'password');

Serverpod(
  args,
  Protocol(),
  Endpoints(),
  securityContextConfig: SecurityContextConfig(
    apiServer: securityContext,
    webServer: securityContext,
    insightsServer: securityContext,
  ),
);

----------------------------------------

TITLE: Initializing a Serverpod Client in Dart
DESCRIPTION: Demonstrates how to initialize a Serverpod client to connect to a server. The client is set up with a URL pointing to localhost and configured with a connectivity monitor for Flutter applications.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/01-working-with-endpoints.md#2025-04-16_snippet_2

LANGUAGE: dart
CODE:
// Sets up a singleton client object that can be used to talk to the server from
// anywhere in our app. The client is generated from your server code.
// The client is set up to connect to a Serverpod running on a local server on
// the default port. You will need to modify this to connect to staging or
// production servers.
var client = Client('http://$localhost:8080/')
  ..connectivityMonitor = FlutterConnectivityMonitor();

----------------------------------------

TITLE: Implementing Required Login for Endpoints
DESCRIPTION: Shows how to restrict endpoint access to authenticated users by overriding the requireLogin property.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/11-authentication/02-basics.md#2025-04-16_snippet_1

LANGUAGE: dart
CODE:
class MyEndpoint extends Endpoint {
  @override
  bool get requireLogin => true;

  Future<void> myMethod(Session session) async {
    ...
  }
  ...
}

----------------------------------------

TITLE: Implementing Note Creation Method in Flutter with Serverpod
DESCRIPTION: A helper method that sends a new note to the server using the notes endpoint. It handles the API call to create a note and refreshes the note list upon success, with error handling for connection failures.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/05-tutorials/01-first-app.mdx#2025-04-16_snippet_21

LANGUAGE: dart
CODE:
Future<void> _createNote(Note note) async {
  try {
    await client.notes.createNote(note);
    await _loadNotes();
  } catch (e) {
    _connectionFailed(e);
  }
}

----------------------------------------

TITLE: Implementing Custom Login Endpoint
DESCRIPTION: Example of a custom login endpoint that authenticates users and issues tokens.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/11-authentication/05-custom-overrides.md#2025-04-16_snippet_3

LANGUAGE: dart
CODE:
class UserEndpoint extends Endpoint {
  Future<LoginResponse> login(
    Session session,
    String username,
    String password,
  ) async {
    var identifier = authenticateUser(session, username, password);
    if (identifier == null) return null;

    return issueMyToken(identifier, scopes: {});
  }
}

----------------------------------------

TITLE: Creating a New Serverpod Project
DESCRIPTION: Command to create a new Serverpod project directory with server, client, and Flutter packages.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.1.1/01-get-started.md#2025-04-16_snippet_0

LANGUAGE: bash
CODE:
serverpod create mypod

----------------------------------------

TITLE: Implicit One-to-Many Relationship Definition in Serverpod YAML
DESCRIPTION: Defines a one-to-many relationship between Company and Employee using an implicit approach, where a List<Employee> with the relation keyword is used on the "one" side. Serverpod automatically creates a hidden foreign key column on the Employee table.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/06-database/03-relations/02-one-to-many.md#2025-04-16_snippet_0

LANGUAGE: yaml
CODE:
# company.yaml
class: Company
table: company
fields:
  name: String
  employees: List<Employee>?, relation

# employee.yaml
class: Employee
table: employee
fields:
  name: String

----------------------------------------

TITLE: Configuring Serverpod using YAML
DESCRIPTION: Example of a YAML configuration file for Serverpod, including settings for API server, insights server, web server, database, Redis, and session logs.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/07-configuration.md#2025-04-16_snippet_0

LANGUAGE: yaml
CODE:
apiServer:
  port: 8080
  publicHost: localhost
  publicPort: 8080
  publicScheme: http

insightsServer:
  port: 8081
  publicHost: localhost
  publicPort: 8081
  publicScheme: http

webServer:
  port: 8082
  publicHost: localhost
  publicPort: 8082
  publicScheme: http

database:
  host: localhost
  port: 8090
  name: database_name
  user: postgres

redis:
  enabled: false
  host: localhost
  port: 8091

maxRequestSize: 524288

sessionLogs:
  persistentEnabled: true
  consoleEnabled: true

----------------------------------------

TITLE: Complete NotesEndpoint Implementation
DESCRIPTION: Full implementation of the NotesEndpoint class with methods for creating, retrieving, and deleting notes from the database.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/05-tutorials/01-first-app.mdx#2025-04-16_snippet_12

LANGUAGE: dart
CODE:
import 'package:serverpod/server.dart';

import '../generated/protocol.dart';

class NotesEndpoint extends Endpoint {
  Future<List<Note>> getAllNotes(Session session) async {
    // By ordering by the id column, we always get the notes in the same order
    // and not in the order they were updated.
    return await Note.db.find(
      session,
      orderBy: (t) => t.id,
    );
  }

  Future<void> createNote(Session session, Note note) async {
    await Note.db.insertRow(session, note);
  }

  Future<void> deleteNote(Session session, Note note) async {
    await Note.db.deleteRow(session, note);
  }
}

----------------------------------------

TITLE: Seeding the Database for Serverpod Tests
DESCRIPTION: Shows how to seed the database before running tests by building a session and using it in database operations. By default, all operations are done in a transaction that rolls back after each test case.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/19-testing/02-the-basics.md#2025-04-16_snippet_4

LANGUAGE: dart
CODE:
withServerpod('Given Products endpoint', (sessionBuilder, endpoints) {
  var session = sessionBuilder.build();

  setUp(() async {
    await Product.db.insert(session, [
    Product(name: 'Apple', price: 10),
    Product(name: 'Banana', price: 10)
    ]);
  });

  test('then calling `all` should return all products', () async {
    final products = await endpoints.products.all(sessionBuilder);
    expect(products, hasLength(2));
    expect(products.map((p) => p.name), contains(['Apple', 'Banana']));
  });
});

----------------------------------------

TITLE: Testing Authenticated and Unauthenticated Endpoint Access
DESCRIPTION: A complete example showing how to test an endpoint with both authenticated and unauthenticated sessions, verifying proper behavior in each scenario.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/19-testing/02-the-basics.md#2025-04-16_snippet_3

LANGUAGE: dart
CODE:
withServerpod('Given AuthenticatedExample endpoint', (sessionBuilder, endpoints) {
  // Corresponds to an actual user id
  const int userId = 1234;

  group('when authenticated', () {
    var authenticatedSessionBuilder = sessionBuilder.copyWith(
      authentication:
          AuthenticationOverride.authenticationInfo(userId, {Scope('user')}),
    );

    test('then calling `hello` should return greeting', () async {
      final greeting = await endpoints.authenticatedExample
          .hello(authenticatedSessionBuilder, 'Michael');
      expect(greeting, 'Hello, Michael!');
    });
  });

  group('when unauthenticated', () {
    var unauthenticatedSessionBuilder = sessionBuilder.copyWith(
      authentication: AuthenticationOverride.unauthenticated(),
    );

    test(
        'then calling `hello` should throw `ServerpodUnauthenticatedException`',
        () async {
      final future = endpoints.authenticatedExample
          .hello(unauthenticatedSessionBuilder, 'Michael');
      await expectLater(
          future, throwsA(isA<ServerpodUnauthenticatedException>()));
    });
  });
});

----------------------------------------

TITLE: Inserting a Single Row in Serverpod with Dart
DESCRIPTION: Creates a new Company record in the database by calling the insertRow method on the generated model. Returns the company object with the id field populated.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/06-database/05-crud.md#2025-04-16_snippet_1

LANGUAGE: dart
CODE:
var row = Company(name: 'Serverpod');
var company = await Company.db.insertRow(session, row);

----------------------------------------

TITLE: Inserting Data into Database in Serverpod (Dart)
DESCRIPTION: Dart code for inserting a new row into a database table using Serverpod's ORM. This example creates a Company object and inserts it into the database, returning the object with its ID set.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/01-get-started.md#2025-04-16_snippet_13

LANGUAGE: dart
CODE:
var myCompany = Company(name: 'Serverpod corp.', foundedDate: DateTime.now());
myCompany = await Company.db.insertRow(session, myCompany);

----------------------------------------

TITLE: Defining Serializable Class in Serverpod
DESCRIPTION: YAML definition for a serializable 'Company' class in Serverpod.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/01-get-started.md#2025-04-16_snippet_7

LANGUAGE: yaml
CODE:
class: Company
fields:
  name: String
  foundedDate: DateTime?

----------------------------------------

TITLE: Setting up the Main Dart File for Pixorama App
DESCRIPTION: The main entry point for the Flutter app that sets up the client connection to the Serverpod backend and defines the app structure.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/05-tutorials/02-real-time-communication.md#2025-04-16_snippet_8

LANGUAGE: dart
CODE:
// lib/main.dart

import 'package:pixorama_client/pixorama_client.dart';
import 'package:flutter/material.dart';
import 'package:serverpod_flutter/serverpod_flutter.dart';

import 'src/pixorama.dart';

var client = Client('http://$localhost:8080/')
  ..connectivityMonitor = FlutterConnectivityMonitor();

void main() {
  // Start the app.
  runApp(const PixoramaApp());
}

class PixoramaApp extends StatelessWidget {
  const PixoramaApp({super.key});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Pixorama',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: Scaffold(
        body: const Pixorama(),
      ),
    );
  }
}

----------------------------------------

TITLE: Implementing Basic Caching in Serverpod Endpoints with Dart
DESCRIPTION: This snippet demonstrates how to cache user data in a Serverpod endpoint method. It shows checking for cached data first, then fetching from the database and storing in cache if not found. The cache entry is set with a 5-minute lifetime.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/08-caching.md#2025-04-16_snippet_0

LANGUAGE: dart
CODE:
Future<UserData> getUserData(Session session, int userId) async {
  // Define a unique key for the UserData object
  var cacheKey = 'UserData-$userId';

  // Try to retrieve the object from the cache
  var userData = await session.caches.local.get<UserData>(cacheKey);

  // If the object wasn't found in the cache, load it from the database and
  // save it in the cache. Make it valid for 5 minutes.
  if (userData == null) {
    userData = UserData.db.findById(session, userId);
    await session.caches.local.put(cacheKey, userData!, lifetime: Duration(minutes: 5));
  }

  // Return the user data to the client
  return userData;
}

----------------------------------------

TITLE: Defining a Basic Model with Database Table in Serverpod
DESCRIPTION: Creates a Company model that maps to a 'company' table in the database. When defined this way, Serverpod automatically generates methods for CRUD operations and adds an implicit 'id' field.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/06-database/02-models.md#2025-04-16_snippet_0

LANGUAGE: yaml
CODE:
class: Company
table: company
fields:
  name: String

----------------------------------------

TITLE: Proper Endpoint Calling in Serverpod Tests
DESCRIPTION: Demonstrates the correct way to call endpoint methods in tests using the endpoints provided by withServerpod, ensuring that lifecycle events and validation occur as they would in production.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/19-testing/04-best-practises.md#2025-04-16_snippet_5

LANGUAGE: dart
CODE:
void main() {
  withServerpod('Given Example endpoint', (sessionBuilder, endpoints) {
    var session = sessionBuilder.build();

    test('when calling `hello` then should return greeting', () async {
      // ✅ Use the provided `endpoints` to call the endpoint that should be tested.
      final greeting =
          await endpoints.example.hello(session, 'Michael');
      expect(greeting, 'Hello, Michael!');
    });
  });
}

----------------------------------------

TITLE: Applying Migrations in Maintenance Mode
DESCRIPTION: Shows how to apply migrations in maintenance mode, which is useful for automated processes as it exits with a status code indicating success or failure.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/05-concepts/06-database/11-migrations.md#2025-04-16_snippet_5

LANGUAGE: bash
CODE:
$ dart run bin/main.dart --role maintenance --apply-migrations

----------------------------------------

TITLE: Filtering Users with Logical OR Operator in Dart
DESCRIPTION: Shows how to combine multiple conditions using the OR operator.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/06-database/06-filter.md#2025-04-16_snippet_15

LANGUAGE: dart
CODE:
await User.db.find(
  where: (t) => (t.name.like('A%') | t.name.like('B%'))
);

----------------------------------------

TITLE: Finding a Single Row with a Filter Expression
DESCRIPTION: Retrieves the first Company record that matches the specified filter expression. Returns the model or null if no match is found.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/06-database/05-crud.md#2025-04-16_snippet_4

LANGUAGE: dart
CODE:
var company = await Company.db.findFirstRow(
  session,
  where: (t) => t.name.equals('Serverpod'),
);

----------------------------------------

TITLE: Creating a Basic Endpoint in Dart for Serverpod
DESCRIPTION: This snippet demonstrates how to create a simple endpoint in Serverpod. It extends the Endpoint class and defines a method that returns a Future<String>. The method takes a Session object and a String parameter.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.22/04-concepts/01-working-with-endpoints.md#2025-04-16_snippet_0

LANGUAGE: dart
CODE:
import 'package:serverpod/serverpod.dart';

class ExampleEndpoint extends Endpoint {
  Future<String> hello(Session session, String name) async {
    return 'Hello $name';
  }
}

----------------------------------------

TITLE: Finding or Creating a User in Serverpod Authentication System
DESCRIPTION: Code that demonstrates how to find a user by email or identifier, and if not found, create a new user with the provided information.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/11-authentication/04-providers/06-custom-providers.md#2025-04-16_snippet_0

LANGUAGE: dart
CODE:
UserInfo? userInfo;
userInfo = await Users.findUserByEmail(session, email);
userInfo ??= await Users.findUserByIdentifier(session, userIdentifier);
if (userInfo == null) {
  userInfo = UserInfo(
    userIdentifier: userIdentifier,
    userName: name,
    email: email,
    blocked: false,
    created: DateTime.now().toUtc(),
    scopeNames: [],
  );
  userInfo = await Users.createUser(session, userInfo, _authMethod);
}

----------------------------------------

TITLE: Starting Serverpod Server with Docker
DESCRIPTION: Commands to start Docker containers for Postgres and Redis, and then start the Serverpod server with migrations applied.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/01-get-started.md#2025-04-16_snippet_1

LANGUAGE: bash
CODE:
$ cd mypod/mypod_server
$ docker compose up --build --detach
$ dart bin/main.dart --apply-migrations

----------------------------------------

TITLE: Implementing Custom Login Endpoint in Serverpod
DESCRIPTION: This code shows how to create a custom login endpoint that authenticates a user, creates or finds their UserInfo, generates an auth token, and returns an AuthenticationResponse.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/11-authentication/04-providers/06-custom-providers.md#2025-04-16_snippet_3

LANGUAGE: dart
CODE:
class MyAuthenticationEndpoint extends Endpoint {
  Future<AuthenticationResponse> login(
    Session session,
    String username,
    String password,
  ) async {
    // Authenticates a user with email and password.
    if (!authenticateUser(session, username, password)) {
      return AuthenticationResponse(success: false);
    }

    // Finds or creates a user in the database using the User methods.
    var userInfo = findOrCreateUser(session, username);

    // Creates an authentication key for the user.
    var authToken = await UserAuthentication.signInUser(
      session,
      userInfo.id!,
      'myAuth',
      scopes: {},
    );

    // Returns the authentication response.
    return AuthenticationResponse(
      success: true,
      keyId: authToken.id,
      key: authToken.key,
      userInfo: userInfo,
    );
  }
}

----------------------------------------

TITLE: Implementing Note Creation Method in Flutter
DESCRIPTION: Async method to create notes using the notes endpoint client and handle errors. It creates a note on the server and refreshes the note list.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/05-tutorials/01-first-app.mdx#2025-04-16_snippet_14

LANGUAGE: dart
CODE:
Future<void> _createNote(Note note) async {
  try {
    await client.notes.createNote(note);
    await _loadNotes();
  } catch (e) {
    _connectionFailed(e);
  }
}

----------------------------------------

TITLE: Creating a Basic Endpoint in Dart
DESCRIPTION: Demonstrates how to create a simple endpoint that extends the Endpoint class with a method that returns a String. The endpoint name will be derived from the class name (ExampleEndpoint becomes 'example').
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/01-working-with-endpoints.md#2025-04-16_snippet_0

LANGUAGE: dart
CODE:
import 'package:serverpod/serverpod.dart';

class ExampleEndpoint extends Endpoint {
  Future<String> hello(Session session, String name) async {
    return 'Hello $name';
  }
}

----------------------------------------

TITLE: Creating Basic Endpoint in Dart
DESCRIPTION: Example of creating a basic endpoint class that extends Endpoint with a hello method that takes a name parameter and returns a greeting string.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/01-working-with-endpoints.md#2025-04-16_snippet_0

LANGUAGE: dart
CODE:
import 'package:serverpod/serverpod.dart';

class ExampleEndpoint extends Endpoint {
  Future<String> hello(Session session, String name) async {
    return 'Hello $name';
  }
}

----------------------------------------

TITLE: Complete Notes App Implementation in Flutter
DESCRIPTION: Full implementation of the notes application including client setup, state management, and UI components integration.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.1.1/03-tutorials/01-first-app.mdx#2025-04-16_snippet_20

LANGUAGE: dart
CODE:
import 'package:notes_client/notes_client.dart';
import 'package:flutter/material.dart';
import 'package:serverpod_flutter/serverpod_flutter.dart';

import 'note_dialog.dart';

var client = Client('http://localhost:8080/')
  ..connectivityMonitor = FlutterConnectivityMonitor();

void main() {
  runApp(const MyApp());
}

class MyApp extends StatelessWidget {
  const MyApp({Key? key}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Notes',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: const MyHomePage(title: 'Notes'),
    );
  }
}

class MyHomePage extends StatefulWidget {
  const MyHomePage({Key? key, required this.title}) : super(key: key);

  final String title;

  @override
  MyHomePageState createState() => MyHomePageState();
}

class MyHomePageState extends State<MyHomePage> {
  List<Note>? _notes;
  Exception? _connectionException;

  @override
  void initState() {
    super.initState();
    _loadNotes();
  }

  Future<void> _loadNotes() async {
    try {
      final notes = await client.notes.getAllNotes();
      setState(() {
        _notes = notes;
      });
    } catch (e) {
      _connectionFailed(e);
    }
  }

  Future<void> _createNote(Note note) async {
    try {
      await client.notes.createNote(note);
      await _loadNotes();
    } catch (e) {
      _connectionFailed(e);
    }
  }

  void _connectionFailed(dynamic exception) {
    setState(() {
      _notes = null;
      _connectionException = exception;
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text(widget.title),
      ),
      body: _notes == null
          ? LoadingScreen(
              exception: _connectionException,
              onTryAgain: _loadNotes,
            )
          : ListView.builder(
              itemCount: _notes!.length,
              itemBuilder: ((context, index) {
                return ListTile(
                  title: Text(_notes![index].text),
                );
              }),
            ),
      floatingActionButton: _notes == null
          ? null
          : FloatingActionButton(
              onPressed: () {
                showNoteDialog(
                  context: context,
                  onSaved: (text) {
                    var note = Note(
                      text: text,
                    );
                    _notes!.add(note);
                    _createNote(note);
                  },
                );
              },
              child: const Icon(Icons.add),
            ),
    );
  }
}

----------------------------------------

TITLE: Installing Serverpod CLI using Dart pub
DESCRIPTION: This command installs the Serverpod command-line interface globally using Dart's package manager.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/index.md#2025-04-16_snippet_0

LANGUAGE: bash
CODE:
$ dart pub global activate serverpod_cli

----------------------------------------

TITLE: Creating a New Serverpod Project
DESCRIPTION: Command to create a new Serverpod project named 'mypod' using the Serverpod CLI.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/01-get-started.md#2025-04-16_snippet_0

LANGUAGE: bash
CODE:
$ serverpod create mypod

----------------------------------------

TITLE: Defining a Basic Class Model in YAML for Serverpod
DESCRIPTION: This snippet demonstrates how to define a basic class model using YAML syntax in Serverpod. It includes field definitions with various data types and nullable fields.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/02-models.md#2025-04-16_snippet_0

LANGUAGE: yaml
CODE:
class: Company
fields:
  name: String
  foundedDate: DateTime?
  employees: List<Employee>

----------------------------------------

TITLE: Client-Side Stream Implementation in Dart
DESCRIPTION: Shows how to implement the client-side logic for connecting to and using a streaming method, including stream controllers and listeners.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/15-streams.md#2025-04-16_snippet_1

LANGUAGE: dart
CODE:
var inStream = StreamController();
var outStream = client.example.echoStream(inStream.stream);
outStream.listen((message) {
  print('Received message: $message');
});

inStream.add('Hello');
inStream.add(42);

// This will print
// Received message: Hello
// Received message: 42

----------------------------------------

TITLE: Using Custom Scopes in Serverpod Endpoints with Dart
DESCRIPTION: Demonstrates how to use custom scopes to restrict access to a Serverpod endpoint.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/11-authentication/02-basics.md#2025-04-16_snippet_6

LANGUAGE: dart
CODE:
class MyEndpoint extends Endpoint {
  @override
  bool get requireLogin => true;

  @override
  Set<Scope> get requiredScopes => {CustomScope.userRead, CustomScope.userWrite};

  Future<void> myMethod(Session session) async {
    ...
  }
  ...
}

----------------------------------------

TITLE: Implementing Custom Health Check Handler in Dart
DESCRIPTION: Demonstrates how to create a custom health check handler function that returns health metrics. The handler measures custom metrics and returns them in a ServerHealthMetric format with properties like name, serverId, timestamp, health status, and value.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/13-health-checks.md#2025-04-16_snippet_0

LANGUAGE: dart
CODE:
Future<List<ServerHealthMetric>> myHealthCheckHandler(
    Serverpod pod, DateTime timestamp) async {
  // Actually perform some checks.

  // Return a list of health metrics for the given timestamp.
  return [
    ServerHealthMetric(
      name: 'MyMetric',
      serverId: pod.serverId,
      timestamp: timestamp,
      isHealthy: true,
      value: 1.0,
    ),
  ];
}

----------------------------------------

TITLE: Creating Basic Serverpod Endpoint in Dart
DESCRIPTION: Example showing how to create a basic endpoint class extending Endpoint with a hello method that takes a name parameter and returns a greeting string. Shows the basic structure of an endpoint implementation with proper Session handling.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.5/02-concepts/01-working-with-endpoints.md#2025-04-16_snippet_0

LANGUAGE: dart
CODE:
import 'package:serverpod/serverpod.dart';

class ExampleEndpoint extends Endpoint {
  Future<String> hello(Session session, String name) async {
    return 'Hello $name';
  }
}

----------------------------------------

TITLE: Calling Serverpod Endpoint from Client
DESCRIPTION: Example of how to call the 'hello' method on the 'example' endpoint from the client side.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/01-get-started.md#2025-04-16_snippet_6

LANGUAGE: dart
CODE:
var result = await client.example.hello('World');

----------------------------------------

TITLE: Implementing Scope-based Authorization in Dart with Serverpod
DESCRIPTION: Demonstrates how to restrict endpoint access based on user scopes, including admin access, and how to update user scopes.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/11-authentication/02-basics.md#2025-04-16_snippet_2

LANGUAGE: dart
CODE:
class MyEndpoint extends Endpoint {
  @override
  bool get requireLogin => true;

  @override
  Set<Scope> get requiredScopes => {Scope.admin};

  Future<void> myMethod(Session session) async {
    ...
  }
  ...
}

LANGUAGE: dart
CODE:
await Users.updateUserScopes(session, userId, {Scope.admin});

----------------------------------------

TITLE: Including Related Lists in Serverpod Queries
DESCRIPTION: Shows how to include a list of related objects (one-to-many relation) using the includeList method, retrieving a company with all its employees.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/06-database/07-relation-queries.md#2025-04-16_snippet_3

LANGUAGE: dart
CODE:
var user = await Company.db.findById(
  session,
  employeeId,
  include: Company.include(
    employees: Employee.includeList(),
  ),
);

----------------------------------------

TITLE: Finding a Record by ID
DESCRIPTION: Retrieves a single Company record from the database using its unique ID. Returns the model or null if not found.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/06-database/05-crud.md#2025-04-16_snippet_3

LANGUAGE: dart
CODE:
var company = await Company.db.findById(session, companyId);

----------------------------------------

TITLE: Sorting Database Query Results by Related Entity Count in Dart
DESCRIPTION: Demonstrates how to fetch companies from the database and sort them by the count of a related list. This example sorts companies by their number of employees.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/06-database/08-sort.md#2025-04-16_snippet_4

LANGUAGE: dart
CODE:
var companies = await Company.db.find(
  session,
  orderBy: (t) => t.employees.count(),
);

----------------------------------------

TITLE: Defining a Serverpod Endpoint in Dart
DESCRIPTION: Example of creating a Serverpod endpoint with a 'hello' method that takes a name parameter and returns a greeting.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/01-get-started.md#2025-04-16_snippet_5

LANGUAGE: dart
CODE:
import 'package:serverpod/serverpod.dart';

class ExampleEndpoint extends Endpoint {
  Future<String> hello(Session session, String name) async {
    return 'Hello $name';
  }
}

----------------------------------------

TITLE: Inserting Data into Database in Dart
DESCRIPTION: Demonstrates how to insert a new row into the database using the db.insertRow method in Dart.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/01-get-started.md#2025-04-16_snippet_13

LANGUAGE: dart
CODE:
var myCompany = Company(name: 'Serverpod corp.', foundedDate: DateTime.now());
myCompany = await Company.db.insertRow(session, myCompany);

----------------------------------------

TITLE: Mapping Serializable Model to Database Table in YAML
DESCRIPTION: Demonstrates how to define a Company model with a 'table' keyword to map it to a database table. This triggers the generation of CRUD methods and database migrations.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/06-database/02-models.md#2025-04-16_snippet_0

LANGUAGE: yaml
CODE:
class: Company
table: company
fields:
  name: String

----------------------------------------

TITLE: Creating Basic Serverpod Endpoint
DESCRIPTION: Demonstrates how to create a basic endpoint class that extends Endpoint with a simple hello method. The endpoint will be accessible as 'example' with the Endpoint suffix removed.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.21/04-concepts/01-working-with-endpoints.md#2025-04-16_snippet_0

LANGUAGE: dart
CODE:
import 'package:serverpod/serverpod.dart';

class ExampleEndpoint extends Endpoint {
  Future<String> hello(Session session, String name) async {
    return 'Hello $name';
  }
}

----------------------------------------

TITLE: Initializing Main Flutter App Structure for Pixorama
DESCRIPTION: Dart code for the main.dart file, setting up the Pixorama app structure with Serverpod client initialization and basic MaterialApp configuration.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/05-tutorials/02-real-time-communication.md#2025-04-16_snippet_7

LANGUAGE: dart
CODE:
// lib/main.dart

import 'package:pixorama_client/pixorama_client.dart';
import 'package:flutter/material.dart';
import 'package:serverpod_flutter/serverpod_flutter.dart';

import 'src/pixorama.dart';

var client = Client('http://$localhost:8080/')
  ..connectivityMonitor = FlutterConnectivityMonitor();

void main() {
  // Start the app.
  runApp(const PixoramaApp());
}

class PixoramaApp extends StatelessWidget {
  const PixoramaApp({super.key});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Pixorama',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: Scaffold(
        body: const Pixorama(),
      ),
    );
  }
}

----------------------------------------

TITLE: Defining Serverpod Endpoint in Dart
DESCRIPTION: Example of creating a basic endpoint class that extends Endpoint with a hello method. The endpoint must be placed in lib/src/endpoints directory and return typed Futures with Session as first parameter.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/01-get-started/06-working-with-endpoints.md#2025-04-16_snippet_0

LANGUAGE: dart
CODE:
import 'package:serverpod/serverpod.dart';

class ExampleEndpoint extends Endpoint {
  Future<String> hello(Session session, String name) async {
    return 'Hello $name';
  }
}

----------------------------------------

TITLE: Defining a Non-Persistent Field in a Serverpod Model
DESCRIPTION: This example shows how to define a field that should not be persisted in the database using the '!persist' keyword. The 'name' field of the Company model will not be stored in the database.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/06-database/02-models.md#2025-04-16_snippet_1

LANGUAGE: yaml
CODE:
class: Company
table: company
fields:
  name: String, !persist 

----------------------------------------

TITLE: Basic One-to-One Relationship with ID Field in YAML
DESCRIPTION: Demonstrates the basic setup of a one-to-one relationship between User and Address models using an ID field. Shows how to define the foreign key and set up a unique index.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/06-database/03-relations/01-one-to-one.md#2025-04-16_snippet_0

LANGUAGE: yaml
CODE:
# address.yaml
class: Address
table: address
fields:
  street: String

# user.yaml
class: User
table: user
fields:
  addressId: int, relation(parent=address) // Foreign key field
indexes:
  user_address_unique_idx:
    fields: addressId
    unique: true

----------------------------------------

TITLE: Accessing Authenticated User ID in Dart with Serverpod
DESCRIPTION: This snippet demonstrates how to access the authenticated user's ID using the Session object in Serverpod. It uses an asynchronous getter to retrieve authentication information.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/11-authentication/02-basics.md#2025-04-16_snippet_0

LANGUAGE: dart
CODE:
Future<void> myMethod(Session session) async {
  final authenticationInfo = await session.authenticated;
  final userId = authenticationInfo?.userId;
  ...
}

----------------------------------------

TITLE: Advanced User-Company One-to-Many Relation
DESCRIPTION: Demonstrates a more complex relation setup combining module relation with a one-to-many company relationship. Includes multiple index configurations for maintaining data integrity.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/06-database/03-relations/06-modules.md#2025-04-16_snippet_2

LANGUAGE: yaml
CODE:
class: User
table: user
fields:
  userInfo: module:auth:UserInfo?, relation
  age: int
  company: Company?, relation(name=company_employee)
indexes:
  user_info_id_unique_idx:
    fields: userInfoId
    unique: true
  company_unique_idx:
    fields: companyId
    unique: true

----------------------------------------

TITLE: Default Serverpod Configuration in Dart
DESCRIPTION: The default configuration used by Serverpod when no custom configuration is provided, showing the minimal required setup for the API server.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/07-configuration.md#2025-04-16_snippet_3

LANGUAGE: dart
CODE:
ServerpodConfig(
  apiServer: ServerConfig(
    port: 8080,
    publicHost: 'localhost',
    publicPort: 8080,
    publicScheme: 'http',
  ),
);

----------------------------------------

TITLE: Defining a Streaming Method in Dart
DESCRIPTION: Example of creating an echo stream method on the server-side that returns any message it receives back to the client. This demonstrates how to define a streaming method in a Serverpod endpoint.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/15-streams.md#2025-04-16_snippet_0

LANGUAGE: dart
CODE:
class ExampleEndpoint extends Endpoint {
  Stream echoStream(Session session, Stream stream) async* {
    await for (var message in stream) {
      yield message;
    }
  }
}

----------------------------------------

TITLE: Deleting Single Row in Dart
DESCRIPTION: Deletes a single Company record from the database
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/06-database/05-crud.md#2025-04-16_snippet_10

LANGUAGE: dart
CODE:
var company = await Company.db.findById(session, companyId); // Fetched company has its id set 
var companyDeleted = await Company.db.deleteRow(session, company);

----------------------------------------

TITLE: Inserting Single Row in Dart
DESCRIPTION: Example of inserting a single company record into the database using the insertRow method.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/06-database/05-crud.md#2025-04-16_snippet_1

LANGUAGE: dart
CODE:
var row = Company(name: 'Serverpod');
var company = await Company.db.insertRow(session, row);

----------------------------------------

TITLE: Batch Updating Multiple Rows in Dart
DESCRIPTION: Atomic operation to update multiple Company records simultaneously
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/06-database/05-crud.md#2025-04-16_snippet_7

LANGUAGE: dart
CODE:
var companies = await Company.db.find(session);
companies = companies.map((c) => c.copyWith(name: 'New name')).toList();
var updatedCompanies = await Company.db.update(session, companies);

----------------------------------------

TITLE: Inserting a Row into Database in Dart
DESCRIPTION: Dart code demonstrating how to insert a new Company object into the database. The insert method adds the record to the database and updates the object's id field with the generated database ID.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.1.1/05-concepts/05-database-communication.md#2025-04-16_snippet_5

LANGUAGE: dart
CODE:
var myRow = Company(name: 'Serverpod corp.', employees: []);
await Company.insert(session, myRow);

----------------------------------------

TITLE: Executing Raw SQL Query with Parameters in Dart
DESCRIPTION: Demonstrates how to use the unsafeQuery method to execute a raw SQL query with named parameters. This method returns a DatabaseResult containing the query results.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/06-database/10-raw-access.md#2025-04-16_snippet_0

LANGUAGE: dart
CODE:
DatabaseResult result = await session.db.unsafeQuery(
  r'SELECT * FROM mytable WHERE id = @id', 
  parameters: QueryParameters.named({'id': 1}),
);

----------------------------------------

TITLE: Finding a Record by ID in Serverpod with Dart
DESCRIPTION: Retrieves a single Company record from the database using its unique ID. Returns the model object or null if not found.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/06-database/05-crud.md#2025-04-16_snippet_3

LANGUAGE: dart
CODE:
var company = await Company.db.findById(session, companyId);

----------------------------------------

TITLE: Querying Users with One-to-Many Relation Every Filter in Dart
DESCRIPTION: This example illustrates how to use a one-to-many relation every filter to fetch all users that have only book orders from the database.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/06-database/06-filter.md#2025-04-16_snippet_23

LANGUAGE: dart
CODE:
await User.db.find(
  where: (t) => t.orders.every((o) => o.itemType.equals('book'))
);

----------------------------------------

TITLE: Including Nested Objects in Serverpod Query
DESCRIPTION: Shows how to include deeply nested objects in a query using multiple include statements.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/06-database/07-relation-queries.md#2025-04-16_snippet_1

LANGUAGE: dart
CODE:
var employee = await Employee.db.findById(
  session,
  employeeId,
  include: Employee.include(
    company: Company.include(
      address: Address.include(),
    ),
  ),
);

----------------------------------------

TITLE: Implementing Serverpod Endpoint
DESCRIPTION: Example of creating a simple endpoint in Serverpod with a 'hello' method.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/01-get-started.md#2025-04-16_snippet_5

LANGUAGE: dart
CODE:
import 'package:serverpod/serverpod.dart';

class ExampleEndpoint extends Endpoint {
  Future<String> hello(Session session, String name) async {
    return 'Hello $name';
  }
}

----------------------------------------

TITLE: Implementing Real-Time Updates Listener for Pixorama in Flutter
DESCRIPTION: Method to establish and maintain a connection to the server, process incoming updates, and handle connection failures for the Pixorama app.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/05-tutorials/02-real-time-communication.md#2025-04-16_snippet_10

LANGUAGE: dart
CODE:
// lib/src/pixorama.dart

class _PixoramaState extends State<Pixorama> {
  // ...

  Future<void> _listenToUpdates() async {
    // Indefinitely try to connect and listen to updates from the server.
    while (true) {
      try {
        // Get the stream of updates from the server.
        final imageUpdates = client.pixorama.imageUpdates();

        // Listen for updates from the stream. The await for construct will
        // wait for a message to arrive from the server, then run through the
        // body of the loop.
        await for (final update in imageUpdates) {
          // Check which type of update we have received.
          if (update is ImageData) {
            // This is a complete image update, containing all pixels in the
            // image. Create a new PixelImageController with the pixel data.
            setState(() {
              _imageController = PixelImageController(
                pixels: update.pixels,
                palette: PixelPalette.rPlace(),
                width: update.width,
                height: update.height,
              );
            });
          } else if (update is ImageUpdate) {
            // Got an incremental update of the image. Just set the single
            // pixel.
            _imageController?.setPixelIndex(
              pixelIndex: update.pixelIndex,
              colorIndex: update.colorIndex,
            );
          }
        }
      } on MethodStreamException catch (_) {
        // We lost the connection to the server, or failed to connect.
        setState(() {
          _imageController = null;
        });
      }

      // Wait 5 seconds until we try to connect again.
      await Future.delayed(Duration(seconds: 5));
    }
  }
}

----------------------------------------

TITLE: Implementing CRUD Operations in NotesEndpoint
DESCRIPTION: Complete implementation of the NotesEndpoint class with methods for creating, deleting, and retrieving notes from the database.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/03-tutorials/01-first-app.mdx#2025-04-16_snippet_6

LANGUAGE: dart
CODE:
import 'package:serverpod/server.dart';

import '../generated/protocol.dart';

class NotesEndpoint extends Endpoint {
  Future<List<Note>> getAllNotes(Session session) async {
    // By ordering by the id column, we always get the notes in the same order
    // and not in the order they were updated.
    return await Note.db.find(
      session,
      orderBy: (t) => t.id,
    );
  }

  Future<void> createNote(Session session, Note note) async {
    await Note.db.insertRow(session, note);
  }

  Future<void> deleteNote(Session session, Note note) async {
    await Note.db.deleteRow(session, note);
  }
}

----------------------------------------

TITLE: Executing Database Transaction in Serverpod using Dart
DESCRIPTION: Demonstrates how to perform multiple database operations within a single atomic transaction using Serverpod's session.db.transaction method. The example shows inserting a company and employee record where either both operations succeed or neither is applied.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/05-concepts/06-database/08-transactions.md#2025-04-16_snippet_0

LANGUAGE: dart
CODE:
var result = await session.db.transaction((transaction) async {
  // Do some database queries here.
  await Company.db.insertRow(session, company, transaction: transaction);
  await Employee.db.insertRow(session, employee, transaction: transaction);

  // Optionally return a value.
  return true;
});

----------------------------------------

TITLE: Calling Serverpod Endpoint from Client
DESCRIPTION: Example of how to call the server endpoint method from the client side code.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/05-concepts/01-working-with-endpoints.md#2025-04-16_snippet_1

LANGUAGE: dart
CODE:
var result = await client.example.hello('World');

----------------------------------------

TITLE: Implementing Custom Login Endpoint
DESCRIPTION: Example of a custom login endpoint that authenticates users and issues tokens.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/11-authentication/05-custom-overrides.md#2025-04-16_snippet_3

LANGUAGE: dart
CODE:
class UserEndpoint extends Endpoint {
  Future<LoginResponse> login(
    Session session,
    String username,
    String password,
  ) async {
    var identifier = authenticateUser(session, username, password);
    if (identifier == null) return null;

    return issueMyToken(identifier, scopes: {});
  }
}

----------------------------------------

TITLE: Executing a Database Transaction in Serverpod with Dart
DESCRIPTION: This snippet demonstrates how to use the session.dbNext.transaction method to perform multiple database operations as a single atomic transaction. It shows inserting both a company and an employee record, where either both succeed or both fail, and returning a result from the transaction.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/05-concepts/06-database/08-transactions.md#2025-04-16_snippet_0

LANGUAGE: dart
CODE:
var result = await session.dbNext.transaction((transaction) async {
  // Do some database queries here.
  await Company.db.insertRow(session, company, transaction: transaction);
  await Employee.db.insertRow(session, employee, transaction: transaction);

  // Optionally return a value.
  return true;
});

----------------------------------------

TITLE: Implementing Note API Endpoints in Dart
DESCRIPTION: Creates a Dart file with API endpoints for creating, deleting, and fetching notes. These endpoints interact with the database and can be called from the Flutter client.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/05-tutorials/01-first-app.mdx#2025-04-16_snippet_5

LANGUAGE: dart
CODE:
import 'package:serverpod/server.dart';

import '../generated/protocol.dart';

class NotesEndpoint extends Endpoint {
  Future<List<Note>> getAllNotes(Session session) async {
    // By ordering by the id column, we always get the notes in the same order
    // and not in the order they were updated.
    return await Note.db.find(
      session,
      orderBy: (t) => t.id,
    );
  }

  Future<void> createNote(Session session, Note note) async {
    await Note.db.insertRow(session, note);
  }

  Future<void> deleteNote(Session session, Note note) async {
    await Note.db.deleteRow(session, note);
  }
}

----------------------------------------

TITLE: Complete Flutter App Implementation
DESCRIPTION: Full implementation of the notes app including state management, UI components, and server communication.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/05-tutorials/01-first-app.mdx#2025-04-16_snippet_18

LANGUAGE: dart
CODE:
import 'package:notes_client/notes_client.dart';
import 'package:flutter/material.dart';
import 'package:serverpod_flutter/serverpod_flutter.dart';

import 'note_dialog.dart';

var client = Client('http://localhost:8080/')
  ..connectivityMonitor = FlutterConnectivityMonitor();

void main() {
  runApp(const MyApp());
}

class MyApp extends StatelessWidget {
  const MyApp({Key? key}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Notes',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: const MyHomePage(title: 'Notes'),
    );
  }
}

class MyHomePage extends StatefulWidget {
  const MyHomePage({Key? key, required this.title}) : super(key: key);

  final String title;

  @override
  MyHomePageState createState() => MyHomePageState();
}

class MyHomePageState extends State<MyHomePage> {
  List<Note>? _notes;
  Exception? _connectionException;

  @override
  void initState() {
    super.initState();
    _loadNotes();
  }

  Future<void> _loadNotes() async {
    try {
      final notes = await client.notes.getAllNotes();
      setState(() {
        _notes = notes;
      });
    } catch (e) {
      _connectionFailed(e);
    }
  }

  Future<void> _createNote(Note note) async {
    try {
      await client.notes.createNote(note);
      await _loadNotes();
    } catch (e) {
      _connectionFailed(e);
    }
  }

  void _connectionFailed(dynamic exception) {
    setState(() {
      _notes = null;
      _connectionException = exception;
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text(widget.title),
      ),
      body: _notes == null
          ? LoadingScreen(
              exception: _connectionException,
              onTryAgain: _loadNotes,
            )
          : ListView.builder(
              itemCount: _notes!.length,
              itemBuilder: ((context, index) {
                return ListTile(
                  title: Text(_notes![index].text),
                );
              }),
            ),
      floatingActionButton: _notes == null
          ? null
          : FloatingActionButton(
              onPressed: () {
                showNoteDialog(
                  context: context,
                  onSaved: (text) {
                    var note = Note(
                      text: text,
                    );
                    _notes!.add(note);
                    _createNote(note);
                  },
                );
              },
              child: const Icon(Icons.add),
            ),
    );
  }
}

----------------------------------------

TITLE: Configuring Client-Side TLS/SSL Security for Serverpod
DESCRIPTION: Example demonstrating how to configure a Serverpod client to connect securely via HTTPS by setting up a SecurityContext with trusted certificates and passing it to the Client constructor.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/21-security-configuration.md#2025-04-16_snippet_1

LANGUAGE: dart
CODE:
final securityContext = SecurityContext()
  ..setTrustedCertificates('path/to/server_cert.pem');


final client = Client(
  'https://yourserver.com',
  securityContext: securityContext,
  ...
);

----------------------------------------

TITLE: Accessing Google YouTube API on the Server with Authenticated Client
DESCRIPTION: This snippet demonstrates how to use the GoogleAuth.authClientForUser method to obtain an authenticated client for accessing Google APIs on behalf of a user. It shows how to initialize the YouTube API client and retrieve a user's liked videos.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/11-authentication/04-providers/02-google.md#2025-04-16_snippet_6

LANGUAGE: dart
CODE:
import 'package:serverpod_auth_server/module.dart';
import 'package:googleapis/youtube/v3.dart';


final googleClient = await GoogleAuth.authClientForUser(session, userId);

if (googleClient != null) {
  var youTubeApi = YouTubeApi(googleClient);

  var favorites = await youTubeApi.playlistItems.list(
    ['snippet'],
    playlistId: 'LL', // Liked List
  );

} else {
  // The user hasn't signed in with Google.
}

----------------------------------------

TITLE: Implementing User Data Caching in Serverpod with Dart
DESCRIPTION: Example endpoint method demonstrating how to implement caching for user data retrieval. The code shows how to check the cache first, then fall back to database retrieval if needed, with a 5-minute cache lifetime.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.0.0/04-concepts/04-caching.md#2025-04-16_snippet_0

LANGUAGE: dart
CODE:
Future<UserData> getUserData(Session session, int userId) async {
  // Define a unique key for the UserData object
  var cacheKey = 'UserData-$userId';

  // Try to retrieve the object from the cache
  var userData = await session.caches.local.get<UserData>(cacheKey);

  // If the object wasn't found in the cache, load it from the database and
  // save it in the cache. Make it valid for 5 minutes.
  if (userData == null) {
    userData = session.db.findById(tUserData, userId) as UserData?;
    await session.caches.local.put(cacheKey, userData!, lifetime: Duration(minutes: 5));
  }

  // Return the user data to the client
  return userData;
}

----------------------------------------

TITLE: Complete Flutter App Structure for Notes Application
DESCRIPTION: The complete main.dart file structure for the notes application, including client setup, app initialization, and the basic UI scaffold. This represents the starting point before implementing note-specific functionality.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/05-tutorials/01-first-app.mdx#2025-04-16_snippet_6

LANGUAGE: dart
CODE:
import 'package:notes_client/notes_client.dart';
import 'package:flutter/material.dart';
import 'package:serverpod_flutter/serverpod_flutter.dart';

// Sets up a singleton client object that can be used to talk to the server from
// anywhere in our app. The client is generated from your server code.
// The client is set up to connect to a Serverpod running on a local server on
// the default port. You will need to modify this to connect to staging or
// production servers.
var client = Client('http://localhost:8080/')
  ..connectivityMonitor = FlutterConnectivityMonitor();

void main() {
  runApp(const MyApp());
}

class MyApp extends StatelessWidget {
  const MyApp({Key? key}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Serverpod Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: const MyHomePage(title: 'Serverpod Example'),
    );
  }
}

class MyHomePage extends StatefulWidget {
  const MyHomePage({Key? key, required this.title}) : super(key: key);

  final String title;

  @override
  MyHomePageState createState() => MyHomePageState();
}

class MyHomePageState extends State<MyHomePage> {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text(widget.title),
      ),
    );
  }
}

----------------------------------------

TITLE: Implementing Get All Notes Endpoint Method
DESCRIPTION: Method to retrieve all notes from the database, ordered by their ID. This endpoint provides access to all stored notes for display in the client application.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/05-tutorials/01-first-app.mdx#2025-04-16_snippet_11

LANGUAGE: dart
CODE:
Future<List<Note>> getAllNotes(Session session) async {
  // By ordering by the id column, we always get the notes in the same order
  // and not in the order they were updated.
  return await Note.db.find(
    session,
    orderBy: (t) => t.id,
  );
}

----------------------------------------

TITLE: Executing Parameterized SQL Query in Dart with Serverpod
DESCRIPTION: Demonstrates how to use the unsafeQuery method to execute a parameterized SQL SELECT query. This method uses the extended query protocol for parameter binding to prevent SQL injection.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/06-database/10-raw-access.md#2025-04-16_snippet_0

LANGUAGE: dart
CODE:
DatabaseResult result = await session.db.unsafeQuery(
  r'SELECT * FROM mytable WHERE id = @id', 
  parameters: QueryParameters.named({'id': 1}),
);

----------------------------------------

TITLE: Configuring Authentication Handler in Serverpod Instance
DESCRIPTION: Add the authentication handler to the Serverpod instance in the server's main file.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/11-authentication/01-setup.md#2025-04-16_snippet_1

LANGUAGE: dart
CODE:
import 'package:serverpod_auth_server/serverpod_auth_server.dart' as auth;

void run(List<String> args) async {
  var pod = Serverpod(
    args,
    Protocol(),
    Endpoints(),
    authenticationHandler: auth.authenticationHandler, // Add this line
  );

  ...
}

----------------------------------------

TITLE: Calling a Streaming Method from Client in Dart
DESCRIPTION: Example showing how to call a streaming method from a client application, create input/output streams, and handle received messages. This demonstrates the client-side implementation for a streaming method.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/15-streams.md#2025-04-16_snippet_1

LANGUAGE: dart
CODE:
var inStream = StreamController();
var outStream = client.example.echoStream(inStream.stream);
outStream.listen((message) {
  print('Received message: $message');
});

inStream.add('Hello');
inStream.add(42);

// This will print
// Received message: Hello
// Received message: 42

----------------------------------------

TITLE: Implementing Scope-based Authorization in Dart
DESCRIPTION: Demonstrates how to implement scope-based access control for endpoints using the requiredScopes property.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/11-authentication/02-basics.md#2025-04-16_snippet_3

LANGUAGE: dart
CODE:
class MyEndpoint extends Endpoint {
  @override
  bool get requireLogin => true;

  @override
  Set<Scope> get requiredScopes => {Scope.admin};

  Future<void> myMethod(Session session) async {
    ...
  }
  ...
}

----------------------------------------

TITLE: Managing User Sign-out in Dart with Serverpod
DESCRIPTION: Shows how to implement user sign-out functionality for single devices or all devices using Serverpod's StatusEndpoint methods.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/11-authentication/02-basics.md#2025-04-16_snippet_4

LANGUAGE: dart
CODE:
await client.modules.auth.status.signOutDevice();

LANGUAGE: dart
CODE:
await client.modules.auth.status.signOutAllDevices();

LANGUAGE: dart
CODE:
await client.modules.auth.status.signOut();  // Deprecated

----------------------------------------

TITLE: Implementing Basic Caching in Serverpod with Dart
DESCRIPTION: This example demonstrates how to cache user data with a defined expiration period. It first attempts to retrieve data from the cache using a unique key, and if not found, loads it from the database before storing it in the cache with a 5-minute lifetime.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/08-caching.md#2025-04-16_snippet_0

LANGUAGE: dart
CODE:
Future<UserData> getUserData(Session session, int userId) async {
  // Define a unique key for the UserData object
  var cacheKey = 'UserData-$userId';

  // Try to retrieve the object from the cache
  var userData = await session.caches.local.get<UserData>(cacheKey);

  // If the object wasn't found in the cache, load it from the database and
  // save it in the cache. Make it valid for 5 minutes.
  if (userData == null) {
    userData = UserData.db.findById(session, userId);
    await session.caches.local.put(cacheKey, userData!, lifetime: Duration(minutes: 5));
  }

  // Return the user data to the client
  return userData;
}

----------------------------------------

TITLE: Executing Raw SQL Queries in Dart
DESCRIPTION: Dart code showing how to execute raw SQL queries for more advanced database operations. The query method returns a List of Lists containing the rows and columns from the query result.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.1.1/05-concepts/05-database-communication.md#2025-04-16_snippet_16

LANGUAGE: dart
CODE:
var result = await session.db.query('SELECT * FROM mytable WHERE ...');

----------------------------------------

TITLE: Filtering Users with Not Equals Operator in Dart
DESCRIPTION: Shows how to exclude users with a specific name using the notEquals operator.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/06-database/06-filter.md#2025-04-16_snippet_1

LANGUAGE: dart
CODE:
await User.db.find(
  where: (t) => t.name.notEquals('Bob')
);

----------------------------------------

TITLE: Requiring Authentication for Serverpod Endpoints
DESCRIPTION: Example of how to restrict endpoint access to authenticated users by overriding the requireLogin property.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/11-authentication/02-basics.md#2025-04-16_snippet_2

LANGUAGE: dart
CODE:
class MyEndpoint extends Endpoint {
  @override
  bool get requireLogin => true;

  Future<void> myMethod(Session session) async {
    ...
  }
  ...
}

----------------------------------------

TITLE: Signing In with Email and Password
DESCRIPTION: Authenticates an existing user with their email and password credentials.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/05-concepts/10-authentication/04-providers/01-email.md#2025-04-16_snippet_7

LANGUAGE: dart
CODE:
await authController.signIn(email, password);

----------------------------------------

TITLE: Defining Course Table with Many-to-Many Relationship in YAML
DESCRIPTION: YAML configuration for the Course table that establishes a many-to-many relationship with Students through Enrollments. Includes a field for course name and a list of related enrollments.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/06-database/03-relations/03-many-to-many.md#2025-04-16_snippet_0

LANGUAGE: yaml
CODE:
class: Course
table: course
fields:
  name: String
  enrollments: List<Enrollment>?, relation(name=course_enrollments)

----------------------------------------

TITLE: Defining a Company Class Model in YAML
DESCRIPTION: This snippet demonstrates how to define a Company class model with various field types including String, DateTime, and a list of Employee objects.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/02-models.md#2025-04-16_snippet_0

LANGUAGE: yaml
CODE:
class: Company
fields:
  name: String
  foundedDate: DateTime?
  employees: List<Employee>

----------------------------------------

TITLE: Creating Project with Serverpod Mini
DESCRIPTION: Command to create a new Serverpod Mini project called pixorama. Mini version is used as no database functionality is needed.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/05-tutorials/02-real-time-communication.md#2025-04-16_snippet_0

LANGUAGE: bash
CODE:
serverpod create pixorama --mini

----------------------------------------

TITLE: Defining One-to-one Relationship with Object References in Serverpod
DESCRIPTION: Example showing how to create a one-to-one relationship using an object reference field, which allows Serverpod to automatically manage the relationship and simplifies relational queries.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/06-database/03-relations/01-one-to-one.md#2025-04-16_snippet_1

LANGUAGE: yaml
CODE:
# address.yaml
class: Address
table: address
fields:
  street: String

# user.yaml
class: User
table: user
fields:
  address: Address?, relation // Object relation field
indexes:
  user_address_unique_idx:
    fields: addressId
    unique: true

----------------------------------------

TITLE: Implementing User Data Caching in Serverpod (Dart)
DESCRIPTION: This code snippet demonstrates how to implement caching for user data in a Serverpod application. It shows how to check for cached data, retrieve from the database if not cached, and store in the cache with a specified lifetime.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.10/03-concepts/04-caching.md#2025-04-16_snippet_0

LANGUAGE: dart
CODE:
Future<UserData> getUserData(Session session, int userId) async {
  // Define a unique key for the UserData object
  var cacheKey = 'UserData-$userId';

  // Try to retrieve the object from the cache
  var userData = await session.caches.local.get(cacheKey) as UserData?;

  // If the object wasn't found in the cache, load it from the database and
  // save it in the cache. Make it valid for 5 minutes.
  if (userData == null) {
    userData = session.db.findById(tUserData, userId) as UserData?;
    await session.caches.local.put(cacheKey, userData!, lifetime: Duration(minutes: 5));
  }

  // Return the user data to the client
  return userData;
}

----------------------------------------

TITLE: Applying Migrations in Maintenance Mode
DESCRIPTION: Command to apply migrations in maintenance mode with exit code indication.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/06-database/11-migrations.md#2025-04-16_snippet_5

LANGUAGE: bash
CODE:
$ dart run bin/main.dart --role maintenance --apply-migrations

----------------------------------------

TITLE: Batch Inserting Multiple Rows in Serverpod Dart
DESCRIPTION: This Dart snippet shows how to insert multiple rows in a batch operation using the 'insert' method. It creates a list of Company objects and inserts them atomically, returning a list of the inserted companies.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/05-concepts/06-database/05-crud.md#2025-04-16_snippet_2

LANGUAGE: dart
CODE:
var rows = [Company(name: 'Serverpod'), Company(name: 'Google')];
var companies = await Company.db.insert(session, rows);

----------------------------------------

TITLE: Registering Future Call in Server Configuration
DESCRIPTION: Shows how to register a future call in the server.dart file by calling registerFutureCall on the Serverpod instance with a unique name identifier.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/14-scheduling.md#2025-04-16_snippet_1

LANGUAGE: dart
CODE:
void run(List<String> args) async {
  final pod = Serverpod(
    args,
    Protocol(),
    Endpoints(),
  );

  ...

  pod.registerFutureCall(ExampleFutureCall(), 'exampleFutureCall');

  ...
}

----------------------------------------

TITLE: Accessing Client IP Address in Serverpod Dart
DESCRIPTION: Demonstrates how to access the IP address of the client calling a method using the Session object, even when the server is behind a load balancer.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/05-sessions.md#2025-04-16_snippet_0

LANGUAGE: dart
CODE:
session as MethodCallSession;
var ipAddress = session.httpRequest.remoteIpAddress;

----------------------------------------

TITLE: Basic Class Definition in Serverpod YAML
DESCRIPTION: Demonstrates how to define a basic Company class with different field types including String, DateTime and a List of Employee objects.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/02-models.md#2025-04-16_snippet_0

LANGUAGE: yaml
CODE:
class: Company
fields:
  name: String
  foundedDate: DateTime?
  employees: List<Employee>

----------------------------------------

TITLE: Implementing ProtocolSerialization Interface in Dart
DESCRIPTION: This Dart snippet demonstrates how to implement the ProtocolSerialization interface for a custom class. It includes both toJsonForProtocol() and toJson() methods, allowing selective field serialization for client-server communication.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/03-serialization.md#2025-04-16_snippet_9

LANGUAGE: dart
CODE:
class CustomClass implements ProtocolSerialization {
  final String? value;
  final String? serverSideValue;

  .......

  // Serializes fields specifically for protocol communication
  Map<String, dynamic> toJsonForProtocol() {
    return {
      "value":value,
    };
  }

  // Serializes all fields, including those intended only for server-side use
  Map<String, dynamic> toJson() {
    return {
      "value": value,
      "serverSideValue": serverSideValue,
    };
  }
}

----------------------------------------

TITLE: Initializing Serverpod with Custom Token Validation
DESCRIPTION: Example of setting up a custom authentication handler in Serverpod server initialization. The handler validates tokens and returns AuthenticationInfo objects.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/11-authentication/05-custom-overrides.md#2025-04-16_snippet_0

LANGUAGE: dart
CODE:
final pod = Serverpod(
  args,
  Protocol(),
  Endpoints(),
  authenticationHandler: (Session session, String token) async {
    /// Custom validation handler
    if (token != 'valid') return null;

    return AuthenticationInfo(1, <Scope>{});
  },
);

----------------------------------------

TITLE: Defining a Basic Model Class in Serverpod YAML
DESCRIPTION: Demonstrates how to define a basic Company class with different field types including strings, dates, and lists of other model objects.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/02-models.md#2025-04-16_snippet_0

LANGUAGE: yaml
CODE:
class: Company
fields:
  name: String
  foundedDate: DateTime?
  employees: List<Employee>

----------------------------------------

TITLE: Configuring Password Pepper in YAML
DESCRIPTION: Adding a pepper to password hashing for additional security. A pepper adds a server-side secret to password hashing to protect against database breaches.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/11-authentication/04-providers/01-email.md#2025-04-16_snippet_10

LANGUAGE: yaml
CODE:
development:
  emailPasswordPepper: 'your-pepper'

----------------------------------------

TITLE: Finding Multiple Rows with Criteria in Serverpod Dart
DESCRIPTION: This Dart code demonstrates how to find multiple rows using the 'find' method with filtering criteria and a limit. It returns a List of Company objects matching the specified conditions.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/05-concepts/06-database/05-crud.md#2025-04-16_snippet_5

LANGUAGE: dart
CODE:
var companies = await Company.db.find(
  session,
  where: (t) => t.id < 100,
  limit: 50,
);

----------------------------------------

TITLE: Applying Migrations During Server Startup (Bash)
DESCRIPTION: Command to start the server with the apply-migrations flag, which applies any pending migrations as part of the startup sequence.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/06-database/11-migrations.md#2025-04-16_snippet_4

LANGUAGE: bash
CODE:
$ dart run bin/main.dart --apply-migrations

----------------------------------------

TITLE: Creating an Enum with Name-Based Serialization in YAML
DESCRIPTION: This example illustrates how to define an enum with serialization based on the name of the enum value instead of its index.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/02-models.md#2025-04-16_snippet_5

LANGUAGE: yaml
CODE:
enum: Animal
serialized: byName
values:
 - dog
 - cat
 - bird

----------------------------------------

TITLE: Implementing Complete Flutter App Structure with Serverpod Client in Dart
DESCRIPTION: Provides the full implementation of the Flutter app, including the Serverpod client setup, main app structure, and the initial MyHomePageState class. This forms the foundation for the notes app.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/03-tutorials/01-first-app.mdx#2025-04-16_snippet_5

LANGUAGE: dart
CODE:
import 'package:notes_client/notes_client.dart';
import 'package:flutter/material.dart';
import 'package:serverpod_flutter/serverpod_flutter.dart';

// Sets up a singleton client object that can be used to talk to the server from
// anywhere in our app. The client is generated from your server code.
// The client is set up to connect to a Serverpod running on a local server on
// the default port. You will need to modify this to connect to staging or
// production servers.
var client = Client('http://localhost:8080/')
  ..connectivityMonitor = FlutterConnectivityMonitor();

void main() {
  runApp(const MyApp());
}

class MyApp extends StatelessWidget {
  const MyApp({Key? key}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Serverpod Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: const MyHomePage(title: 'Serverpod Example'),
    );
  }
}

class MyHomePage extends StatefulWidget {
  const MyHomePage({Key? key, required this.title}) : super(key: key);

  final String title;

  @override
  MyHomePageState createState() => MyHomePageState();
}

class MyHomePageState extends State<MyHomePage> {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text(widget.title),
      ),
    );
  }
}


----------------------------------------

TITLE: Writing Integration Tests in Serverpod
DESCRIPTION: Example of how to write an integration test using Serverpod's test tools. Shows how to use the withServerpod helper to call endpoints directly from tests and verify their behavior.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/19-testing/01-get-started.md#2025-04-16_snippet_8

LANGUAGE: dart
CODE:
import 'package:test/test.dart';

// Import the generated file, it contains everything you need.
import 'test_tools/serverpod_test_tools.dart';

void main() {
  withServerpod('Given Example endpoint', (sessionBuilder, endpoints) {
    test('when calling `hello` then should return greeting', () async {
      final greeting = await endpoints.example.hello(sessionBuilder, 'Michael');
      expect(greeting, 'Hello Michael');
    });
  });
}

----------------------------------------

TITLE: Defining a Relation Field in a Serverpod Model
DESCRIPTION: This YAML snippet shows how to define a relation field in a Serverpod model using the 'relation' keyword. It creates a database relation between two tables, keeping the data in sync.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/06-database/02-models.md#2025-04-16_snippet_3

LANGUAGE: yaml
CODE:
class: Company
table: company
fields:
  address: Address?, relation

----------------------------------------

TITLE: Including Multiple Related Objects in Serverpod Queries (Dart)
DESCRIPTION: Demonstrates including multiple related objects in a single query, retrieving an employee with both their address and company (which also includes its address).
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/05-concepts/06-database/07-relation-queries.md#2025-04-16_snippet_2

LANGUAGE: dart
CODE:
var user = await Employee.db.findById(
  session,
  employeeId,
  include: Employee.include(
    address: Address.include(),
    company: Company.include(
      address: Address.include(),
    ),
  ),
);

----------------------------------------

TITLE: Complete Pagination Implementation with Page Calculation
DESCRIPTION: Full implementation of pagination with page number calculation, limit, offset, and ordering.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/06-database/09-pagination.md#2025-04-16_snippet_2

LANGUAGE: dart
CODE:
int page = 3;
int companiesPerPage = 10;

var companies = await Company.db.find(
  session,
  orderBy: (t) => t.id,
  limit: companiesPerPage,
  offset: (page - 1) * companiesPerPage,
);

----------------------------------------

TITLE: Implementing Basic Object Caching in Serverpod using Dart
DESCRIPTION: This snippet demonstrates how to implement basic object caching in a Serverpod endpoint. It retrieves user data from cache if available, otherwise loads it from the database and stores it in the cache with a 5-minute lifetime.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/08-caching.md#2025-04-16_snippet_0

LANGUAGE: dart
CODE:
Future<UserData> getUserData(Session session, int userId) async {
  // Define a unique key for the UserData object
  var cacheKey = 'UserData-$userId';

  // Try to retrieve the object from the cache
  var userData = await session.caches.local.get<UserData>(cacheKey);

  // If the object wasn't found in the cache, load it from the database and
  // save it in the cache. Make it valid for 5 minutes.
  if (userData == null) {
    userData = UserData.db.findById(session, userId);
    await session.caches.local.put(cacheKey, userData!, lifetime: Duration(minutes: 5));
  }

  // Return the user data to the client
  return userData;
}

----------------------------------------

TITLE: Implementing Required Login for Endpoints in Dart
DESCRIPTION: Shows how to restrict endpoint access to authenticated users by overriding the requireLogin property.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/11-authentication/02-basics.md#2025-04-16_snippet_2

LANGUAGE: dart
CODE:
class MyEndpoint extends Endpoint {
  @override
  bool get requireLogin => true;

  Future<void> myMethod(Session session) async {
    ...
  }
  ...
}

----------------------------------------

TITLE: Checking User Authentication Status in Dart
DESCRIPTION: Demonstrates how to access user authentication information and check if a user is signed in using the Session object.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/11-authentication/02-basics.md#2025-04-16_snippet_0

LANGUAGE: dart
CODE:
Future<void> myMethod(Session session) async {
  final authenticationInfo = await session.authenticated;
  final userId = authenticationInfo?.userId;
  ...
}

LANGUAGE: dart
CODE:
Future<void> myMethod(Session session) async {
  var isSignedIn = await session.isUserSignedIn;
  ...
}

----------------------------------------

TITLE: Finding a Row by ID in Serverpod
DESCRIPTION: Retrieves a single Company record from the database using its ID. Returns either the Company model or null if not found.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/06-database/05-crud.md#2025-04-16_snippet_3

LANGUAGE: dart
CODE:
var company = await Company.db.findById(session, companyId);

----------------------------------------

TITLE: Configuring Serverpod using YAML Config File
DESCRIPTION: Example YAML configuration file showing all major server settings including API server, insights server, web server, database, and Redis configurations. This file should be placed in the config directory and named according to the run mode (e.g., development.yaml).
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/07-configuration.md#2025-04-16_snippet_0

LANGUAGE: yaml
CODE:
apiServer:
  port: 8080
  publicHost: localhost
  publicPort: 8080
  publicScheme: http

insightsServer:
  port: 8081
  publicHost: localhost
  publicPort: 8081
  publicScheme: http

webServer:
  port: 8082
  publicHost: localhost
  publicPort: 8082
  publicScheme: http

database:
  host: localhost
  port: 8090
  name: database_name
  user: postgres

redis:
  enabled: false
  host: localhost
  port: 8091

maxRequestSize: 524288

----------------------------------------

TITLE: Querying Users with One-to-Many Relation None Filter in Dart
DESCRIPTION: This example shows how to use a one-to-many relation none filter to fetch all users that have no orders from the database.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/06-database/06-filter.md#2025-04-16_snippet_19

LANGUAGE: dart
CODE:
await User.db.find(
  where: (t) => t.orders.none()
);

----------------------------------------

TITLE: Configuring Database Connection in YAML for Serverpod
DESCRIPTION: This YAML snippet shows how to configure database connection details in Serverpod's development.yaml file. It specifies the host, port, database name, and user for connecting to a Postgres database.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/06-database/01-connection.md#2025-04-16_snippet_0

LANGUAGE: yaml
CODE:
...
database:
  host: localhost
  port: 8090
  name: <YOUR_PROJECT_NAME>
  user: postgres
...

----------------------------------------

TITLE: ProtocolSerialization Implementation
DESCRIPTION: Example of implementing ProtocolSerialization for selective field serialization.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/03-serialization.md#2025-04-16_snippet_9

LANGUAGE: dart
CODE:
class CustomClass implements ProtocolSerialization {
  final String? value;
  final String? serverSideValue;

  .......

  // Serializes fields specifically for protocol communication
  Map<String, dynamic> toJsonForProtocol() {
    return {
      "value":value,
    };
  }

  // Serializes all fields, including those intended only for server-side use
  Map<String, dynamic> toJson() {
    return {
      "value": value,
      "serverSideValue": serverSideValue,
    };
  }
}

----------------------------------------

TITLE: Inserting a Single Row in Dart
DESCRIPTION: Example of inserting a single Company row into the database using the insertRow method.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/05-concepts/06-database/05-crud.md#2025-04-16_snippet_1

LANGUAGE: dart
CODE:
var row = Company(name: 'Serverpod');
var company = await Company.db.insertRow(session, row);

----------------------------------------

TITLE: Implementing copyWith() Method for Custom Serialization in Dart
DESCRIPTION: This snippet shows how to implement the copyWith() method, which returns a new instance of the object with specified fields replaced. This method is crucial for maintaining immutability in Serverpod's custom serializable objects.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/03-serialization.md#2025-04-16_snippet_2

LANGUAGE: dart
CODE:
ClassName copyWith({
  String? name,
}) {
  return ClassName(
    name: name ?? this.name,
  );
}

----------------------------------------

TITLE: Implementing createNote Method in Dart Flutter
DESCRIPTION: A helper method that calls the server endpoint to create a new note in the database and then reloads the notes list. It includes error handling to manage connection failures.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/05-tutorials/01-first-app.mdx#2025-04-16_snippet_12

LANGUAGE: dart
CODE:
Future<void> _createNote(Note note) async {
  try {
    await client.notes.createNote(note);
    await _loadNotes();
  } catch (e) {
    _connectionFailed(e);
  }
}

----------------------------------------

TITLE: Creating Savepoints in Database Transactions
DESCRIPTION: Demonstrates how to create a savepoint within a transaction, allowing partial rollback capabilities. Shows savepoint creation after company insertion but before employee insertion.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/06-database/08-transactions.md#2025-04-16_snippet_2

LANGUAGE: dart
CODE:
await session.db.transaction((transaction) async {
  await Company.db.insertRow(session, company, transaction: transaction);
  // Create savepoint
  var savepoint = await transaction.createSavepoint();
  await Employee.db.insertRow(session, employee, transaction: transaction);
});

----------------------------------------

TITLE: Proper Database Handling in Serverpod Tests
DESCRIPTION: Demonstrates the correct approach to database handling in tests, relying on Serverpod's automatic transaction rollback capability without explicit cleanup.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/19-testing/04-best-practises.md#2025-04-16_snippet_3

LANGUAGE: dart
CODE:
withServerpod('Given ProductsEndpoint', (sessionBuilder, endpoints) {
  var session = sessionBuilder.build();

  setUp(() async {
    await Product.db.insertRow(session, Product(name: 'Apple', price: 10));
  });

  ✅  // Clean up can be omitted since the transaction is rolled back after each by default

  // ...
}); 

----------------------------------------

TITLE: Implementing User Data Caching in Serverpod (Dart)
DESCRIPTION: This snippet demonstrates how to implement caching for user data in a Serverpod application. It checks the cache for existing data, retrieves from the database if not found, and caches the result for future use. The cache key is based on the user ID and the data is set to expire after 5 minutes.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.7/03-concepts/04-caching.md#2025-04-16_snippet_0

LANGUAGE: dart
CODE:
Future<UserData> getUserData(Session session, int userId) async {
  // Define a unique key for the UserData object
  var cacheKey = 'UserData-$userId';

  // Try to retrieve the object from the cache
  var userData = await session.caches.local.get(cacheKey) as UserData?;

  // If the object wasn't found in the cache, load it from the database and
  // save it in the cache. Make it valid for 5 minutes.
  if (userData == null) {
    userData = session.db.findById(tUserData, userId) as UserData?;
    await session.caches.local.put(cacheKey, userData!, lifetime: Duration(minutes: 5));
  }

  // Return the user data to the client
  return userData;
}

----------------------------------------

TITLE: Configuring AWS S3 Storage
DESCRIPTION: Configuration code for integrating AWS S3 with Serverpod, including storage settings and bucket configuration.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/12-file-uploads.md#2025-04-16_snippet_8

LANGUAGE: dart
CODE:
pod.addCloudStorage(s3.S3CloudStorage(
  serverpod: pod,
  storageId: 'public',
  public: true,
  region: 'us-west-2',
  bucket: 'my-bucket-name',
  publicHost: 'storage.myapp.com',
));

----------------------------------------

TITLE: Basic Sorting of Database Query Results in Dart
DESCRIPTION: Demonstrates how to fetch companies from the database and sort them by name in ascending order. The orderBy parameter takes a callback function that specifies which column to use for sorting.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/06-database/08-sort.md#2025-04-16_snippet_0

LANGUAGE: dart
CODE:
var companies = await Company.db.find(
  session,
  orderBy: (t) => t.name,
);

----------------------------------------

TITLE: Finding Multiple Rows with Conditions in Dart using Serverpod
DESCRIPTION: This Dart snippet demonstrates how to find multiple rows in a database table with conditions using Serverpod. It retrieves a list of 'Company' objects with IDs less than 100, limited to 50 results.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.22/04-concepts/03-database-communication.md#2025-04-16_snippet_8

LANGUAGE: dart
CODE:
var companies = await Company.find(
  tCompany,
  where: (t) => t.id < 100,
  limit: 50,
);

----------------------------------------

TITLE: Implementing Basic Serverpod Endpoint
DESCRIPTION: Shows how to create a basic endpoint class that extends Endpoint with a hello method. The endpoint demonstrates proper method signature with Session parameter and Future return type.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.20/04-concepts/01-working-with-endpoints.md#2025-04-16_snippet_0

LANGUAGE: dart
CODE:
import 'package:serverpod/serverpod.dart';

class ExampleEndpoint extends Endpoint {
  Future<String> hello(Session session, String name) async {
    return 'Hello $name';
  }
}

----------------------------------------

TITLE: Basic Database Transaction Implementation in Serverpod
DESCRIPTION: Demonstrates a basic database transaction that atomically inserts both a company and employee record. The transaction ensures both operations succeed or neither is applied.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/06-database/08-transactions.md#2025-04-16_snippet_0

LANGUAGE: dart
CODE:
var result = await session.db.transaction((transaction) async {
  // Do some database queries here.
  await Company.db.insertRow(session, company, transaction: transaction);
  await Employee.db.insertRow(session, employee, transaction: transaction);

  // Optionally return a value.
  return true;
});

----------------------------------------

TITLE: Implementing Note Creation Method in Flutter
DESCRIPTION: Async method to create notes using the notes endpoint and handle server communication.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/05-tutorials/01-first-app.mdx#2025-04-16_snippet_20

LANGUAGE: dart
CODE:
Future<void> _createNote(Note note) async {
  try {
    await client.notes.createNote(note);
    await _loadNotes();
  } catch (e) {
    _connectionFailed(e);
  }
}

----------------------------------------

TITLE: Adding Documentation to Models in Serverpod
DESCRIPTION: Demonstrates how to add documentation comments to classes and fields using the triple hash (###) syntax, which will be included in the generated Dart code.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/02-models.md#2025-04-16_snippet_6

LANGUAGE: yaml
CODE:
### Information about a company.
class: Company
fields:
  ### The name of the company.
  name: String

  ### The date the company was founded, if known.
  foundedDate: DateTime?

  ### A list of people currently employed at the company.
  employees: List<Employee>

----------------------------------------

TITLE: Querying Users with Equals Filter in Dart
DESCRIPTION: This snippet demonstrates how to use the equals filter to fetch all users with the name 'Alice' from the database.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/06-database/06-filter.md#2025-04-16_snippet_0

LANGUAGE: dart
CODE:
await User.db.find(
  where: (t) => t.name.equals('Alice')
);

----------------------------------------

TITLE: Retrieving a Row by ID from Database in Dart
DESCRIPTION: Shows how to retrieve a single row from the database using the db.findById method in Dart.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/01-get-started/08-working-with-database.md#2025-04-16_snippet_6

LANGUAGE: dart
CODE:
var myCompany = await Company.db.findById(session, companyId);

----------------------------------------

TITLE: Defining a Complex Type Field in a Serverpod Model
DESCRIPTION: This YAML snippet demonstrates how to define a field with a complex type (Address) in a Serverpod model. Complex types are stored as JSON objects in the database.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/06-database/02-models.md#2025-04-16_snippet_2

LANGUAGE: yaml
CODE:
class: Company
table: company
fields:
  address: Address # Stored as a json column

----------------------------------------

TITLE: Basic Caching Implementation in Serverpod
DESCRIPTION: Example showing how to implement basic caching for user data in Serverpod. The code demonstrates retrieving data from cache, handling cache misses, and storing data with a specified lifetime.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/08-caching.md#2025-04-16_snippet_0

LANGUAGE: dart
CODE:
Future<UserData> getUserData(Session session, int userId) async {
  // Define a unique key for the UserData object
  var cacheKey = 'UserData-$userId';

  // Try to retrieve the object from the cache
  var userData = await session.caches.local.get<UserData>(cacheKey);

  // If the object wasn't found in the cache, load it from the database and
  // save it in the cache. Make it valid for 5 minutes.
  if (userData == null) {
    userData = UserData.db.findById(session, userId);
    await session.caches.local.put(cacheKey, userData!, lifetime: Duration(minutes: 5));
  }

  // Return the user data to the client
  return userData;
}

----------------------------------------

TITLE: Initializing Serverpod Client in Dart
DESCRIPTION: Demonstrates how to initialize a Serverpod client for communication with the server. It sets up a singleton client object and configures it to connect to a local server on the default port.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/05-concepts/01-working-with-endpoints.md#2025-04-16_snippet_2

LANGUAGE: dart
CODE:
// Sets up a singleton client object that can be used to talk to the server from
// anywhere in our app. The client is generated from your server code.
// The client is set up to connect to a Serverpod running on a local server on
// the default port. You will need to modify this to connect to staging or
// production servers.
var client = Client('http://$localhost:8080/')
  ..connectivityMonitor = FlutterConnectivityMonitor();

----------------------------------------

TITLE: Batch Inserting Multiple Rows in Serverpod
DESCRIPTION: Shows how to insert multiple company records in a single atomic operation
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/06-database/05-crud.md#2025-04-16_snippet_2

LANGUAGE: dart
CODE:
var rows = [Company(name: 'Serverpod'), Company(name: 'Google')];
var companies = await Company.db.insert(session, rows);

----------------------------------------

TITLE: Basic Table Model Definition in YAML
DESCRIPTION: Demonstrates how to define a basic Company model with a database table mapping. This configuration will automatically generate CRUD methods and add an implicit id field.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/06-database/02-models.md#2025-04-16_snippet_0

LANGUAGE: yaml
CODE:
class: Company
table: company
fields:
  name: String

----------------------------------------

TITLE: Finding Single Row with Expression in Dart
DESCRIPTION: Example of finding a single company record using a where expression filter.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/06-database/05-crud.md#2025-04-16_snippet_4

LANGUAGE: dart
CODE:
var company = await Company.db.findFirstRow(
  session,
  where: (t) => t.name.equals('Serverpod'),
);

----------------------------------------

TITLE: Using Custom Scopes in Endpoints with Dart and Serverpod
DESCRIPTION: This snippet shows how to use custom scopes to restrict access to an endpoint. It combines multiple custom scopes in the requiredScopes property.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/11-authentication/02-basics.md#2025-04-16_snippet_6

LANGUAGE: dart
CODE:
class MyEndpoint extends Endpoint {
  @override
  bool get requireLogin => true;

  @override
  Set<Scope> get requiredScopes => {CustomScope.userRead, CustomScope.userWrite};

  Future<void> myMethod(Session session) async {
    ...
  }
  ...
}

----------------------------------------

TITLE: Implementing Custom Serializable Class in Dart
DESCRIPTION: Shows a complete implementation of a custom serializable class in Dart, including constructor, toJson, and fromJson methods.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/03-serialization.md#2025-04-16_snippet_5

LANGUAGE: dart
CODE:
class ClassName {
  String name;
  ClassName(this.name);

  toJson() {
    return {
      'name': name,
    };
  }

  factory ClassName.fromJson(
    Map<String, dynamic> jsonSerialization,
  ) {
    return ClassName(
      jsonSerialization['name'],
    );
  }
}

----------------------------------------

TITLE: Implementing Notes API Endpoint
DESCRIPTION: Dart implementation of the NotesEndpoint class with CRUD operations for notes using Serverpod's database integration.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/03-tutorials/01-first-app.mdx#2025-04-16_snippet_3

LANGUAGE: dart
CODE:
import 'package:serverpod/server.dart';

import '../generated/protocol.dart';

class NotesEndpoint extends Endpoint {
  // Endpoint implementation goes here
}


LANGUAGE: dart
CODE:
Future<void> example(Session session) async {
  // Endpoint implementation goes here
}

LANGUAGE: dart
CODE:
Future<void> createNote(Session session, Note note) async {
  await Note.db.insertRow(session, note);
}

LANGUAGE: dart
CODE:
Future<void> deleteNote(Session session, Note note) async {
  await Note.db.deleteRow(session, note);
}

LANGUAGE: dart
CODE:
Future<List<Note>> getAllNotes(Session session) async {
  // By ordering by the id column, we always get the notes in the same order
  // and not in the order they were updated.
  return await Note.db.find(
    session,
    orderBy: (t) => t.id,
  );
}

LANGUAGE: dart
CODE:
import 'package:serverpod/server.dart';

import '../generated/protocol.dart';

class NotesEndpoint extends Endpoint {
  Future<List<Note>> getAllNotes(Session session) async {
    // By ordering by the id column, we always get the notes in the same order
    // and not in the order they were updated.
    return await Note.db.find(
      session,
      orderBy: (t) => t.id,
    );
  }

  Future<void> createNote(Session session, Note note) async {
    await Note.db.insertRow(session, note);
  }

  Future<void> deleteNote(Session session, Note note) async {
    await Note.db.deleteRow(session, note);
  }
}

----------------------------------------

TITLE: Client-Side Authentication Handling in Dart with Serverpod
DESCRIPTION: This snippet demonstrates how to handle authentication on the client-side using Serverpod's SessionManager. It shows how to register a signed-in user after a successful authentication response from the server.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/11-authentication/04-providers/06-custom-providers.md#2025-04-16_snippet_10

LANGUAGE: dart
CODE:
var serverResponse = await caller.myAuthentication.login(username, password);

if (serverResponse.success) {
    // Store the user info in the session manager.
    SessionManager sessionManager = await SessionManager.instance;
    await sessionManager.registerSignedInUser(
        serverResponse.userInfo!,
        serverResponse.keyId!,
        serverResponse.key!,
    );
}

----------------------------------------

TITLE: Implementing Exception Handling in Serverpod Endpoint
DESCRIPTION: Dart implementation showing how to throw a custom exception within a Serverpod endpoint method.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/04-exceptions.md#2025-04-16_snippet_1

LANGUAGE: dart
CODE:
class ExampleEndpoint extends Endpoint {
  Future<void> doThingy(Session session) {
    // ... do stuff ...
    if (failure) {
      throw MyException(
        message: 'Failed to do thingy',
        errorType: MyEnum.thingyError,
      );
    }
  }
}

----------------------------------------

TITLE: Including Related Data in Serverpod Query
DESCRIPTION: Demonstrates how to include related data in a basic query using the include method. This example retrieves an employee record with their associated address.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/06-database/07-relation-queries.md#2025-04-16_snippet_0

LANGUAGE: dart
CODE:
var employee = await Employee.db.findById(
  session,
  employeeId,
  include: Employee.include(
    address: Address.include(),
  ),
);

----------------------------------------

TITLE: Retrieving Data by ID from Database in Dart
DESCRIPTION: Shows how to retrieve a single row from the database using the db.findById method in Dart.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/01-get-started.md#2025-04-16_snippet_14

LANGUAGE: dart
CODE:
var myCompany = await Company.db.findById(session, companyId);

----------------------------------------

TITLE: Querying Database with Expression in Dart
DESCRIPTION: Illustrates how to perform a more refined database query using the db.findFirstRow method with a where expression in Dart.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/01-get-started/08-working-with-database.md#2025-04-16_snippet_7

LANGUAGE: dart
CODE:
var myCompany = await Company.db.findFirstRow(
  session,
  where: (t) => t.name.equals('My Company'),
);

----------------------------------------

TITLE: Calling Serverpod Endpoint from Client
DESCRIPTION: Demonstrates how to call a Serverpod endpoint method from the client side using the generated client code. Shows the simplified syntax for making remote calls.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.5/02-concepts/01-working-with-endpoints.md#2025-04-16_snippet_1

LANGUAGE: dart
CODE:
var result = await client.example.hello('World');

----------------------------------------

TITLE: Finding Single Row with Expression in Dart
DESCRIPTION: Retrieves first Company record matching a specific condition
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/06-database/05-crud.md#2025-04-16_snippet_4

LANGUAGE: dart
CODE:
var company = await Company.db.findFirstRow(
  session,
  where: (t) => t.name.equals('Serverpod'),
);

----------------------------------------

TITLE: Updating Specific Columns in Multiple Rows
DESCRIPTION: Demonstrates how to update specific columns across multiple company records
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/06-database/05-crud.md#2025-04-16_snippet_9

LANGUAGE: dart
CODE:
var companies = await Company.db.find(session);
companies = companies.map((c) => c.copyWith(name: 'New name', address: 'Baker Street')).toList();
var updatedCompanies = await Company.db.update(session, companies, columns: [Company.t.name]);

----------------------------------------

TITLE: Implicit One-to-Many Relation Definition in YAML
DESCRIPTION: Demonstrates how to implicitly define a one-to-many relationship between Company and Employee using a List type with relation keyword. The foreign key is automatically handled by Serverpod.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/06-database/03-relations/02-one-to-many.md#2025-04-16_snippet_0

LANGUAGE: yaml
CODE:
# company.yaml
class: Company
table: company
fields:
  name: String
  employees: List<Employee>?, relation

# employee.yaml
class: Employee
table: employee
fields:
  name: String

----------------------------------------

TITLE: Database Migration Commands
DESCRIPTION: Commands to create and apply database migrations for the Note table
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/05-tutorials/01-first-app.mdx#2025-04-16_snippet_2

LANGUAGE: bash
CODE:
$ serverpod create-migration

LANGUAGE: bash
CODE:
$ dart run bin/main.dart --role maintenance --apply-migrations

----------------------------------------

TITLE: Client-Side Error Handling for Serverpod Streams
DESCRIPTION: Demonstrates how to handle errors in streaming methods on the client side, including sending errors to the server and receiving error responses.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/15-streams.md#2025-04-16_snippet_3

LANGUAGE: dart
CODE:
var inStream = StreamController();
var outStream = client.example.echoStream(inStream.stream);
outStream.listen((message) {
  // Do nothing
}, onError: (error) {
  print('Client received error: $error');
});

inStream.addError(SerializableException('Error from client'));

// This will print
// Server received error: Error from client 
// Client received error: Error from server 

----------------------------------------

TITLE: Validating User Account with Verification Code
DESCRIPTION: Verifying a new user account by submitting the verification code. This method creates the user and signs them in if the code is valid.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/11-authentication/04-providers/01-email.md#2025-04-16_snippet_6

LANGUAGE: dart
CODE:
await authController.validateAccount(email, verificationCode);

----------------------------------------

TITLE: Defining a Class with Selective Field Visibility in YAML
DESCRIPTION: This snippet illustrates how to create a class with fields that have different visibility scopes, allowing some fields to be server-only while others are public.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/02-models.md#2025-04-16_snippet_2

LANGUAGE: yaml
CODE:
class: SelectivelyHiddenClass
fields:
  hiddenSecretKey: String, scope=serverOnly
  publicKey: String

----------------------------------------

TITLE: Server-Only Class Definition
DESCRIPTION: Demonstrates how to create a server-side only class by setting the serverOnly property to true.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/05-concepts/02-models.md#2025-04-16_snippet_1

LANGUAGE: yaml
CODE:
class: MyPrivateClass
serverOnly: true
fields:
  hiddenSecretKey: String

----------------------------------------

TITLE: Installing Serverpod CLI Tool using Dart
DESCRIPTION: Command to install the Serverpod command line interface tools globally using Dart pub.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/index.md#2025-04-16_snippet_0

LANGUAGE: bash
CODE:
$ dart pub global activate serverpod_cli

----------------------------------------

TITLE: Including Relational Data in Serverpod Query (Dart)
DESCRIPTION: This snippet demonstrates how to include relational data in a Serverpod query using the 'include' method. It retrieves an employee record with the related address object.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/06-database/07-relation-queries.md#2025-04-16_snippet_0

LANGUAGE: dart
CODE:
var employee = await Employee.db.findById(
  session,
  employeeId,
  include: Employee.include(
    address: Address.include(),
  ),
);

----------------------------------------

TITLE: Multi-Column Sorting in Serverpod
DESCRIPTION: Retrieves Company records sorted by multiple columns using orderByList. This example sorts companies first by name in descending order, then by id in ascending order.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/05-concepts/06-database/08-sort.md#2025-04-16_snippet_2

LANGUAGE: dart
CODE:
var companies = await Company.db.find(
  session,
  orderByList: (t) => [
    Order(column: t.name, orderDescending: true), 
    Order(column: t.id),
  ],
);

----------------------------------------

TITLE: Using UserAuthentication Methods in Serverpod 2.0
DESCRIPTION: Example of how to use the UserAuthentication class from the auth module instead of session methods for signing in and out users. These methods are now static and take the session object as a parameter.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/08-upgrading/03-upgrade-to-two.md#2025-04-16_snippet_1

LANGUAGE: dart
CODE:
UserAuthentication.signInUser(session, userId, 'provider');

UserAuthentication.signOutUser(session);

----------------------------------------

TITLE: Verifying File Upload Completion in Serverpod
DESCRIPTION: Server-side method to verify if a file upload has been completed successfully. Essential for confirming uploads to third-party services like S3 or Google Cloud Storage.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.21/04-concepts/08-file-uploads.md#2025-04-16_snippet_1

LANGUAGE: dart
CODE:
Future<bool> verifyUpload(Session session, String path) async {
  return await session.storage.verifyDirectFileUpload(
    storageId: 'public',
    path: path,
  );
}

----------------------------------------

TITLE: Scheduling a Future Call at a Specific Time in Dart
DESCRIPTION: Demonstrates scheduling a future call to be executed at a specific date and time using the futureCallAtTime method. The example schedules the call for January 1, 2025.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/14-scheduling.md#2025-04-16_snippet_3

LANGUAGE: dart
CODE:
await session.serverpod.futureCallAtTime(
  'exampleFutureCall',
  data,
  DateTime(2025, 1, 1),
);

----------------------------------------

TITLE: Updated Database Query Usage
DESCRIPTION: Shows the new way to access the database layer through the session object.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/08-upgrading/03-upgrade-to-two.md#2025-04-16_snippet_3

LANGUAGE: dart
CODE:
session.db.find(...);

----------------------------------------

TITLE: Accessing User Authentication Info in Dart with Serverpod Session
DESCRIPTION: Demonstrates how to access the authenticated user's ID using the Session object's authenticated getter.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/11-authentication/02-basics.md#2025-04-16_snippet_0

LANGUAGE: dart
CODE:
Future<void> myMethod(Session session) async {
  final authenticationInfo = await session.authenticated;
  final userId = authenticationInfo?.userId;
  ...
}

----------------------------------------

TITLE: Accessing User Authentication Information in Dart
DESCRIPTION: Demonstrates how to access the authenticated user's ID using the Session object in a Serverpod endpoint method.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/11-authentication/02-basics.md#2025-04-16_snippet_0

LANGUAGE: dart
CODE:
Future<void> myMethod(Session session) async {
  final authenticationInfo = await session.authenticated;
  final userId = authenticationInfo?.userId;
  ...
}

----------------------------------------

TITLE: Custom Login Endpoint Implementation in Serverpod
DESCRIPTION: This code shows a complete implementation of a custom login endpoint in Serverpod, including user authentication, finding/creating a user, creating an auth token, and returning an AuthenticationResponse.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/05-concepts/10-authentication/04-providers/06-custom-providers.md#2025-04-16_snippet_3

LANGUAGE: dart
CODE:
class MyAuthenticationEndpoint extends Endpoint {
  Future<AuthenticationResponse> login(
    Session session,
    String username,
    String password,
  ) async {
    // Authenticates a user with email and password.
    if (!authenticateUser(session, username, password)) {
      return AuthenticationResponse(success: false);
    }

    // Finds or creates a user in the database using the User methods.
    var userInfo = findOrCreateUser(session, username);

    // Creates an authentication key for the user.
    var authToken = await UserAuthentication.signInUser(
      session,
      userInfo.id!,
      'myAuth',
      scopes: {},
    );

    // Returns the authentication response.
    return AuthenticationResponse(
      success: true,
      keyId: authToken.id,
      key: authToken.key,
      userInfo: userInfo,
    );
  }
}

----------------------------------------

TITLE: Handling and Forwarding Stream Messages in Dart
DESCRIPTION: Demonstrates how to process incoming stream messages and forward them to appropriate recipients using the messaging system. This example forwards chat messages to specific user channels.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.1.0/04-concepts/11-streams.md#2025-04-16_snippet_2

LANGUAGE: dart
CODE:
@override
Future<void> handleStreamMessage(
  StreamingSession session,
  SerializableEntity message,
) async {
  if (message is MyChatMessage) {
    session.messages.postMessage(
      'user_${message.recipientId}',
      message,
    );
  }
}

----------------------------------------

TITLE: Inserting a Single Row in Serverpod
DESCRIPTION: Creates a new Company record in the database by calling the insertRow method on the generated model. Returns the complete Company object with an assigned ID.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/06-database/05-crud.md#2025-04-16_snippet_1

LANGUAGE: dart
CODE:
var row = Company(name: 'Serverpod');
var company = await Company.db.insertRow(session, row);

----------------------------------------

TITLE: Initializing EmailAuthController for Custom UI
DESCRIPTION: Creating an EmailAuthController instance for customized email authentication UI. This controller encapsulates authentication functionality for email/password authentication.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/11-authentication/04-providers/01-email.md#2025-04-16_snippet_4

LANGUAGE: dart
CODE:
import 'package:serverpod_auth_email_flutter/serverpod_auth_email_flutter.dart';

final authController = EmailAuthController(client.modules.auth);

----------------------------------------

TITLE: Initial Request for Cursor-based Pagination in Serverpod
DESCRIPTION: This code demonstrates the initial request for cursor-based pagination where no cursor is provided yet. It retrieves the first batch of records with ordering to establish the baseline for subsequent paginated requests.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/06-database/09-pagination.md#2025-04-16_snippet_3

LANGUAGE: dart
CODE:
int recordsPerPage = 10;

var companies = await Company.db.find(
session,
orderBy: (t) => t.id,
limit: recordsPerPage,
);

----------------------------------------

TITLE: Retrieving File from Storage in Serverpod (Dart)
DESCRIPTION: Code to directly retrieve a file from the server's storage. It uses the retrieveFile method of the storage object, returning a ByteData object.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/12-file-uploads.md#2025-04-16_snippet_5

LANGUAGE: dart
CODE:
var myByteData = await session.storage.retrieveFile(
  storageId: 'public',
  path: 'my/file/path',
);

----------------------------------------

TITLE: Defining One-to-many Relationship Implicitly in Serverpod
DESCRIPTION: Sets up a one-to-many relationship between Company and Employee tables using an implicit definition where Serverpod automatically establishes the relationship based on the List<Employee> type together with the relation keyword.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/06-database/03-relations/02-one-to-many.md#2025-04-16_snippet_0

LANGUAGE: yaml
CODE:
# company.yaml
class: Company
table: company
fields:
  name: String
  employees: List<Employee>?, relation

# employee.yaml
class: Employee
table: employee
fields:
  name: String

----------------------------------------

TITLE: Building Pixorama User Interface in Flutter
DESCRIPTION: Implementation of the build method for the Pixorama widget, creating the user interface for pixel drawing and handling user interactions.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/05-tutorials/02-real-time-communication.md#2025-04-16_snippet_11

LANGUAGE: dart
CODE:
// lib/src/pixorama.dart

class _PixoramaState extends State<Pixorama> {
  // ...

  @override
  Widget build(BuildContext context) {
    return Center(
      child: _imageController == null
          ? const CircularProgressIndicator()
          : PixelEditor(
              controller: _imageController!,
              onSetPixel: (details) {
                // When a user clicks a pixel we will get a callback from the
                // PixelImageController, with information about the changed
                // pixel. When that happens we call the setPixels method on
                // the server.
                client.pixorama.setPixel(
                  pixelIndex: details.tapDetails.index,
                  colorIndex: details.colorIndex,
                );
              },
            ),
    );
  }
}

----------------------------------------

TITLE: Finding Record by ID in Dart
DESCRIPTION: Shows how to retrieve a single company record using its ID.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/06-database/05-crud.md#2025-04-16_snippet_3

LANGUAGE: dart
CODE:
var company = await Company.db.findById(session, companyId);

----------------------------------------

TITLE: Complete Flutter App Main File
DESCRIPTION: Full implementation of main.dart including client setup, app configuration, and basic UI structure
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/05-tutorials/01-first-app.mdx#2025-04-16_snippet_15

LANGUAGE: dart
CODE:
import 'package:notes_client/notes_client.dart';
import 'package:flutter/material.dart';
import 'package:serverpod_flutter/serverpod_flutter.dart';

var client = Client('http://localhost:8080/')
  ..connectivityMonitor = FlutterConnectivityMonitor();

void main() {
  runApp(const MyApp());
}

class MyApp extends StatelessWidget {
  const MyApp({Key? key}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Serverpod Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: const MyHomePage(title: 'Serverpod Example'),
    );
  }
}

class MyHomePage extends StatefulWidget {
  const MyHomePage({Key? key, required this.title}) : super(key: key);

  final String title;

  @override
  MyHomePageState createState() => MyHomePageState();
}

class MyHomePageState extends State<MyHomePage> {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text(widget.title),
      ),
    );
  }
}

----------------------------------------

TITLE: Finding a Row with Expressions in Dart
DESCRIPTION: Shows how to find a single database row using a typed expression builder with the where parameter.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.0.0/04-concepts/03-database-communication.md#2025-04-16_snippet_7

LANGUAGE: dart
CODE:
var myCompany = await Company.findSingleRow(
  session,
  where: (t) => t.name.equals('My Company'),
);

----------------------------------------

TITLE: Implementing Bearer Token Validation in Serverpod Authentication Handler
DESCRIPTION: Shows how to validate OAuth Bearer tokens in a custom authentication handler on the server side.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/11-authentication/05-custom-overrides.md#2025-04-16_snippet_9

LANGUAGE: dart
CODE:
// Initialize Serverpod and connect it with your generated code.
final pod = Serverpod(
  args,
  Protocol(),
  Endpoints(),
  authenticationHandler: (Session session, String token) async {
    /// Bearer token validation handler
    var (uid, scopes) = myBearerTokenValidator(token)
    if (uid == null) return null;

    return AuthenticationInfo(uid, scopes);
  },
);

----------------------------------------

TITLE: Configuring Serverpod with YAML Configuration File
DESCRIPTION: Example YAML configuration file for Serverpod, showing settings for API server, insights server, web server, database, Redis, and session logging. This file should be placed in the config directory and named after the run mode.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/07-configuration.md#2025-04-16_snippet_0

LANGUAGE: yaml
CODE:
apiServer:
  port: 8080
  publicHost: localhost
  publicPort: 8080
  publicScheme: http

insightsServer:
  port: 8081
  publicHost: localhost
  publicPort: 8081
  publicScheme: http

webServer:
  port: 8082
  publicHost: localhost
  publicPort: 8082
  publicScheme: http

database:
  host: localhost
  port: 8090
  name: database_name
  user: postgres

redis:
  enabled: false
  host: localhost
  port: 8091

maxRequestSize: 524288

sessionLogs:
  persistentEnabled: true
  consoleEnabled: true

----------------------------------------

TITLE: Including Nested Lists in Serverpod Relations (Dart)
DESCRIPTION: Shows how to include lists within lists in relational queries, retrieving a company with all its employees and each employee's tools.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/05-concepts/06-database/07-relation-queries.md#2025-04-16_snippet_5

LANGUAGE: dart
CODE:
var user = await Company.db.findById(
  session,
  employeeId,
  include: Company.include(
    employees: Employee.includeList(
      includes: Employee.include(
        tools: Tool.includeList(),
      ),
    ),
  ),
);

----------------------------------------

TITLE: Configuring Serverpod Development Server
DESCRIPTION: YAML configuration for setting up the development server with API server settings including port, host, and scheme.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/05-concepts/01-working-with-endpoints.md#2025-04-16_snippet_3

LANGUAGE: yaml
CODE:
apiServer:
  port: 8080
  publicHost: localhost # Change this line
  publicPort: 8080
  publicScheme: http
...

----------------------------------------

TITLE: Finding a Database Row with Query in Serverpod
DESCRIPTION: Example of finding a single company row in the database using a typed expression builder to query by name.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.1.1/01-get-started.md#2025-04-16_snippet_13

LANGUAGE: dart
CODE:
var myCompany = await Company.findSingleRow(
  session,
  where: (t) => t.name.equals('My Company'),
);

----------------------------------------

TITLE: Creating a Future Call in Serverpod
DESCRIPTION: This snippet demonstrates how to create a future call by extending the FutureCall class and overriding the invoke method. It shows the basic structure of a future call implementation.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/05-concepts/13-scheduling.md#2025-04-16_snippet_0

LANGUAGE: dart
CODE:
import 'package:serverpod/serverpod.dart';

class ExampleFutureCall extends FutureCall<MyModelEntity> {
  @override
  Future<void> invoke(Session session, MyModelEntity? object) async {
    // Do something interesting in the future here.
  }
}

----------------------------------------

TITLE: Implementing Custom Serializable Class in Dart
DESCRIPTION: Complete example of implementing a custom serializable class in Dart for use with Serverpod, including toJson() and fromJson() methods.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/03-serialization.md#2025-04-16_snippet_5

LANGUAGE: dart
CODE:
class ClassName {
  String name;
  ClassName(this.name);

  toJson() {
    return {
      'name': name,
    };
  }

  factory ClassName.fromJson(
    Map<String, dynamic> jsonSerialization,
  ) {
    return ClassName(
      jsonSerialization['name'],
    );
  }
}

----------------------------------------

TITLE: Inserting Database Row in Serverpod (Dart)
DESCRIPTION: Demonstrates how to insert a new row into the database using the db.insertRow method. Creates a Company object and inserts it into the database, returning the object with its assigned ID.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/01-get-started.md#2025-04-16_snippet_11

LANGUAGE: dart
CODE:
var myCompany = Company(name: 'Serverpod corp.', foundedDate: DateTime.now());
myCompany = await Company.db.insertRow(session, myCompany);

----------------------------------------

TITLE: Defining a Serializable Class in YAML for Serverpod
DESCRIPTION: This YAML snippet demonstrates how to define a serializable 'Company' class with various field types including String, nullable DateTime, and a List of another serializable class 'Employee'. It showcases the structure and syntax for creating serializable classes in Serverpod.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.8/03-concepts/02-serialization.md#2025-04-16_snippet_0

LANGUAGE: yaml
CODE:
class: Company
fields:
  name: String
  foundedDate: DateTime?
  employees: List<Employee>

----------------------------------------

TITLE: Defining Explicit One-to-many Relationship with Object Relation in Serverpod YAML
DESCRIPTION: This example shows how to explicitly define a one-to-many relationship using an object relation in Serverpod's YAML configuration. The Employee class includes a Company field with the 'relation' keyword to establish the relationship.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/05-concepts/06-database/03-relations/02-one-to-many.md#2025-04-16_snippet_1

LANGUAGE: yaml
CODE:
# company.yaml
class: Company
table: company
fields:
  name: String

# employee.yaml
class: Employee
table: employee
fields:
  name: String
  company: Company?, relation

----------------------------------------

TITLE: Connecting to Server WebSocket in Client (Dart)
DESCRIPTION: Shows how to connect to the server's WebSocket from the client side. This is necessary before accessing streams in the client.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.1.1/05-concepts/11-streams.md#2025-04-16_snippet_3

LANGUAGE: dart
CODE:
await client.connectWebSocket();


----------------------------------------

TITLE: Accessing Youtube API with Google Authentication in Serverpod
DESCRIPTION: Server-side implementation showing how to create an authenticated Youtube API client using the googleapis package. The code demonstrates obtaining an auth client for a specific user and making API calls to fetch playlist items.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/05-concepts/10-authentication/04-providers/02-google.md#2025-04-16_snippet_5

LANGUAGE: dart
CODE:
import 'package:serverpod_auth_server/module.dart';
import 'package:googleapis/youtube/v3.dart';


final googleClient = await GoogleAuth.authClientForUser(session, userId);

if (googleClient != null) {
  var youTubeApi = YouTubeApi(googleClient);

  var favorites = await youTubeApi.playlistItems.list(
    ['snippet'],
    playlistId: 'LL', // Liked List
  );

} else {
  // The user hasn't signed in with Google.
}

----------------------------------------

TITLE: Testing Multi-User Stream Communication
DESCRIPTION: Test implementation for verifying shared stream communication between multiple users. Demonstrates session management and stream testing patterns.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/19-testing/03-advanced-examples.md#2025-04-16_snippet_3

LANGUAGE: dart
CODE:
withServerpod('Given CommunicationExampleEndpoint', (sessionBuilder, endpoints) {
  const int userId1 = 1;
  const int userId2 = 2;

  test(
      'when calling postNumberToSharedStream and listenForNumbersOnSharedStream '
      'with different sessions then number should be echoed',
      () async {
    var userSession1 = sessionBuilder.copyWith(
      authentication: AuthenticationOverride.authenticationInfo(
        userId1,
        {},
      ),
    );
    var userSession2 = sessionBuilder.copyWith(
      authentication: AuthenticationOverride.authenticationInfo(
        userId2,
        {},
      ),
    );

    var stream =
        endpoints.testTools.listenForNumbersOnSharedStream(userSession1);
    // Wait for `listenForNumbersOnSharedStream` to execute up to its 
    // `yield` statement before continuing
    await flushEventQueue(); 

    await endpoints.testTools.postNumberToSharedStream(userSession2, 111);
    await endpoints.testTools.postNumberToSharedStream(userSession2, 222);

    await expectLater(stream.take(2), emitsInOrder([111, 222]));
  });
});

----------------------------------------

TITLE: Deleting Database Rows in Dart
DESCRIPTION: Demonstrates how to delete a single row or multiple rows using expressions from a database table.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.0.0/04-concepts/03-database-communication.md#2025-04-16_snippet_10

LANGUAGE: dart
CODE:
// Delete a single row
await Company.deleteRow(session, myCompany);

// Delete all rows where the company name ends with 'Ltd'
await Company.delete(
  where: (t) => t.name.like('%Ltd'),
);

----------------------------------------

TITLE: Scheduling a Future Call with an Identifier in Dart
DESCRIPTION: Shows how to schedule a future call with an identifier that can be used to reference or cancel the call later. Multiple future calls can share the same identifier.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/14-scheduling.md#2025-04-16_snippet_4

LANGUAGE: dart
CODE:
await session.serverpod.futureCallWithDelay(
  'exampleFutureCall',
  data,
  const Duration(hours: 1),
  identifier: 'an-identifying-string',
);

----------------------------------------

TITLE: Basic Limit Pagination in Serverpod using Dart
DESCRIPTION: Demonstrates how to implement basic pagination using the limit parameter to retrieve a specific number of records from the database.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/06-database/09-pagination.md#2025-04-16_snippet_0

LANGUAGE: dart
CODE:
var companies = await Company.db.find(
  session,
  limit: 10,
);

----------------------------------------

TITLE: Inserting a Row in Serverpod
DESCRIPTION: Inserts a new Company record into the database. After insertion, the object's id field will be automatically populated with the database-generated ID value.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.9/03-concepts/03-database-communication.md#2025-04-16_snippet_3

LANGUAGE: dart
CODE:
var myRow = Company(name: 'Serverpod corp.', employees: []);
await Company.insert(session, myRow);

----------------------------------------

TITLE: Defining Serializable Exception in YAML for Serverpod
DESCRIPTION: This YAML snippet defines a serializable exception 'MyException' with custom fields for message and error type. It demonstrates how to create a custom exception that can be serialized and passed between server and client in Serverpod.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/04-exceptions.md#2025-04-16_snippet_0

LANGUAGE: yaml
CODE:
exception: MyException
fields:
  message: String
  errorType: MyEnum

----------------------------------------

TITLE: Implementing Scope-based Authorization in Serverpod
DESCRIPTION: Shows how to implement scope-based access control for endpoints using the requiredScopes property.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/11-authentication/02-basics.md#2025-04-16_snippet_3

LANGUAGE: dart
CODE:
class MyEndpoint extends Endpoint {
  @override
  bool get requireLogin => true;

  @override
  Set<Scope> get requiredScopes => {Scope.admin};

  Future<void> myMethod(Session session) async {
    ...
  }
  ...
}

----------------------------------------

TITLE: Batch Inserting Multiple Rows in Serverpod with Dart
DESCRIPTION: Inserts multiple Company records in a single atomic operation. If any insert fails, no entries are created. Returns a list of created company objects with ids.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/06-database/05-crud.md#2025-04-16_snippet_2

LANGUAGE: dart
CODE:
var rows = [Company(name: 'Serverpod'), Company(name: 'Google')];
var companies = await Company.db.insert(session, rows);

----------------------------------------

TITLE: Calling Server Methods from Flutter Client
DESCRIPTION: Dart code showing how to create a Company object in a Flutter app and call the 'isLegit' server method using the generated client code.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/01-get-started/04-get-started-with-mini.md#2025-04-16_snippet_7

LANGUAGE: dart
CODE:
var company = Company(
  name: 'Serverpod',
  foundedDate: DateTime(2021, 9, 27),
  employees: [
    'Alex',
    'Isak',
    'Viktor',
  ],
);

var result = await client.company.isLegit(company);

----------------------------------------

TITLE: Initializing Serverpod Client in Dart
DESCRIPTION: Demonstrates how to initialize a Serverpod client to connect to a server. The example includes setting up connectivity monitoring for Flutter applications.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/01-working-with-endpoints.md#2025-04-16_snippet_2

LANGUAGE: dart
CODE:
// Sets up a singleton client object that can be used to talk to the server from
// anywhere in our app. The client is generated from your server code.
// The client is set up to connect to a Serverpod running on a local server on
// the default port. You will need to modify this to connect to staging or
// production servers.
var client = Client('http://$localhost:8080/')
  ..connectivityMonitor = FlutterConnectivityMonitor();

----------------------------------------

TITLE: Configuring Email Authentication on the Server in Dart
DESCRIPTION: Server-side configuration for email authentication in the main server.dart file. Sets up handlers for sending validation and password reset emails.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/11-authentication/04-providers/01-email.md#2025-04-16_snippet_0

LANGUAGE: dart
CODE:
import 'package:serverpod_auth_server/module.dart' as auth;

auth.AuthConfig.set(auth.AuthConfig(
  sendValidationEmail: (session, email, validationCode) async {
    // Send the validation email to the user.
    // Return `true` if the email was successfully sent, otherwise `false`.
    return true;
  },
  sendPasswordResetEmail: (session, userInfo, validationCode) async {
    // Send the password reset email to the user.
    // Return `true` if the email was successfully sent, otherwise `false`.
    return true;
  },
));

// Start the Serverpod server.
await pod.start();

----------------------------------------

TITLE: Error Handling in Serverpod Streaming Methods (Client-side)
DESCRIPTION: Shows how to handle errors in a Serverpod streaming method on the client side, including sending errors to the server and handling received errors.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/15-streams.md#2025-04-16_snippet_3

LANGUAGE: dart
CODE:
var inStream = StreamController();
var outStream = client.example.echoStream(inStream.stream);
outStream.listen((message) {
  // Do nothing
}, onError: (error) {
  print('Client received error: $error');
});

inStream.addError(SerializableException('Error from client'));

// This will print
// Server received error: Error from client 
// Client received error: Error from server 

----------------------------------------

TITLE: Using the copyWith Method in Generated Serverpod Models
DESCRIPTION: Demonstrates the usage of the automatically generated copyWith method that allows for creating a new instance with selectively modified fields.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/02-models.md#2025-04-16_snippet_7

LANGUAGE: dart
CODE:
var john = User(name: 'John Doe', age: 25);
var jane = john.copyWith(name: 'Jane Doe');

----------------------------------------

TITLE: Rendering Notes in Flutter ListView
DESCRIPTION: Updated build method to render fetched notes in a ListView, with conditional rendering based on the _notes variable.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/05-tutorials/01-first-app.mdx#2025-04-16_snippet_19

LANGUAGE: dart
CODE:
@override
Widget build(BuildContext context) {
  return Scaffold(
    appBar: AppBar(
      title: Text(widget.title),
    ),
    body: _notes == null
      ? Container()
      : ListView.builder(
          itemCount: _notes!.length,
          itemBuilder: ((context, index) {
            return ListTile(
              title: Text(_notes![index].text),
            );
          }),
        ),
  );
}

----------------------------------------

TITLE: Implementing Custom Serializable Class in Dart
DESCRIPTION: This Dart snippet shows a complete implementation of a custom serializable class in the shared package, including the constructor, toJson(), and fromJson() methods.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/03-serialization.md#2025-04-16_snippet_5

LANGUAGE: dart
CODE:
class ClassName {
  String name;
  ClassName(this.name);

  toJson() {
    return {
      'name': name,
    };
  }

  factory ClassName.fromJson(
    Map<String, dynamic> jsonSerialization,
  ) {
    return ClassName(
      jsonSerialization['name'],
    );
  }
}

----------------------------------------

TITLE: Creating Authentication Tokens with Specific Scopes
DESCRIPTION: This snippet demonstrates how to create an authentication token for a user with specific scopes using the UserAuthentication.signInUser method.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/11-authentication/04-providers/06-custom-providers.md#2025-04-16_snippet_2

LANGUAGE: dart
CODE:
var authToken = await UserAuthentication.signInUser(userInfo.id, 'myAuthMethod', scopes: {
    Scope('delete'),
    Scope('create'),
});

----------------------------------------

TITLE: Basic Cache Implementation in Serverpod
DESCRIPTION: Demonstrates how to implement basic caching for user data using Serverpod's local cache. The code shows how to check for cached data, retrieve from database if not found, and store in cache with a specified lifetime.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/05-concepts/07-caching.md#2025-04-16_snippet_0

LANGUAGE: dart
CODE:
Future<UserData> getUserData(Session session, int userId) async {
  // Define a unique key for the UserData object
  var cacheKey = 'UserData-$userId';

  // Try to retrieve the object from the cache
  var userData = await session.caches.local.get<UserData>(cacheKey);

  // If the object wasn't found in the cache, load it from the database and
  // save it in the cache. Make it valid for 5 minutes.
  if (userData == null) {
    userData = UserData.db.findById(session, userId);
    await session.caches.local.put(cacheKey, userData!, lifetime: Duration(minutes: 5));
  }

  // Return the user data to the client
  return userData;
}

----------------------------------------

TITLE: Implementing copyWith() Method for Custom Serialization in Dart
DESCRIPTION: Example of implementing the copyWith() method required for custom serialization in Serverpod. This method returns a new instance of the object with specified fields replaced.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/03-serialization.md#2025-04-16_snippet_2

LANGUAGE: dart
CODE:
ClassName copyWith({
  String? name,
}) {
  return ClassName(
    name: name ?? this.name,
  );
}

----------------------------------------

TITLE: Throwing Custom Exception in Serverpod Endpoint (Dart)
DESCRIPTION: This Dart code shows how to throw a custom exception (MyException) within a Serverpod endpoint. It demonstrates error handling in server-side Dart code for Serverpod applications.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/04-exceptions.md#2025-04-16_snippet_1

LANGUAGE: dart
CODE:
class ExampleEndpoint extends Endpoint {
  Future<void> doThingy(Session session) {
    // ... do stuff ...
    if (failure) {
      throw MyException(
        message: 'Failed to do thingy',
        errorType: MyEnum.thingyError,
      );
    }
  }
}

----------------------------------------

TITLE: Implementing Notes API Endpoint
DESCRIPTION: Complete implementation of the NotesEndpoint class with CRUD operations for notes
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/05-tutorials/01-first-app.mdx#2025-04-16_snippet_3

LANGUAGE: dart
CODE:
import 'package:serverpod/server.dart';

import '../generated/protocol.dart';

class NotesEndpoint extends Endpoint {
  Future<List<Note>> getAllNotes(Session session) async {
    // By ordering by the id column, we always get the notes in the same order
    // and not in the order they were updated.
    return await Note.db.find(
      session,
      orderBy: (t) => t.id,
    );
  }

  Future<void> createNote(Session session, Note note) async {
    await Note.db.insertRow(session, note);
  }

  Future<void> deleteNote(Session session, Note note) async {
    await Note.db.deleteRow(session, note);
  }
}

----------------------------------------

TITLE: Shared Stream Communication Endpoint Implementation in Serverpod
DESCRIPTION: An example endpoint class that demonstrates how to post messages to and listen for messages on a shared stream in Serverpod, useful for real-time communication.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/19-testing/03-advanced-examples.md#2025-04-16_snippet_2

LANGUAGE: dart
CODE:
class CommunicationExampleEndpoint {
  static const sharedStreamName = 'shared-stream';
  Future<void> postNumberToSharedStream(Session session, int number) async {
    await session.messages
        .postMessage(sharedStreamName, SimpleData(num: number));
  }

  Stream<int> listenForNumbersOnSharedStream(Session session) async* {
    var sharedStream =
        session.messages.createStream<SimpleData>(sharedStreamName);

    await for (var message in sharedStream) {
      yield message.num;
    }
  }
}

----------------------------------------

TITLE: Finding a Single Row with Expression in Dart
DESCRIPTION: Dart code demonstrating how to find a single row using a typed expression. This example finds a company where the name equals 'My Company' using the type-safe expression builder.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.1.1/05-concepts/05-database-communication.md#2025-04-16_snippet_7

LANGUAGE: dart
CODE:
var myCompany = await Company.findSingleRow(
  session,
  where: (t) => t.name.equals('My Company'),
);

----------------------------------------

TITLE: Setting Up SessionManager in Flutter
DESCRIPTION: This Dart code demonstrates how to set up a SessionManager in a Flutter app for handling user authentication state.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.0.0/04-concepts/07-authentication.md#2025-04-16_snippet_5

LANGUAGE: dart
CODE:
void main() async {
  WidgetsFlutterBinding.ensureInitialized();

  client = Client(
    'http://localhost:8080/',
    authenticationKeyManager: FlutterAuthenticationKeyManager(),
  );

  sessionManager = SessionManager(
    caller: client.modules.auth,
  );
  await sessionManager.initialize();

  runApp(MyApp());
}

----------------------------------------

TITLE: Implementing Custom Password Hash Generator in Dart
DESCRIPTION: Overriding the default password hash generator and validator to support custom hashing algorithms or migration from existing systems.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/11-authentication/04-providers/01-email.md#2025-04-16_snippet_12

LANGUAGE: dart
CODE:
AuthConfig(
  passwordHashValidator: (
    password,
    email,
    hash, {
      onError,
      onValidationFailure,
    },
  ) {
  // Custom hash validator.
  },
  passwordHashGenerator: (password) {
  // Custom hash generator.
  },
)

----------------------------------------

TITLE: Including Multiple Related Objects in Serverpod Queries
DESCRIPTION: Demonstrates including multiple related objects in a single query by specifying multiple named parameters in the include method, retrieving an employee with their address, company, and company's address.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/06-database/07-relation-queries.md#2025-04-16_snippet_2

LANGUAGE: dart
CODE:
var user = await Employee.db.findById(
  session,
  employeeId,
  include: Employee.include(
    address: Address.include(),
    company: Company.include(
      address: Address.include(),
    ),
  ),
);

----------------------------------------

TITLE: Checking User Authentication in Dart with Serverpod
DESCRIPTION: Demonstrates how to access the authenticated user's ID and check if a user is signed in using the Session object in Serverpod.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/11-authentication/02-basics.md#2025-04-16_snippet_0

LANGUAGE: dart
CODE:
Future<void> myMethod(Session session) async {
  final authenticationInfo = await session.authenticated;
  final userId = authenticationInfo?.userId;
  ...
}

LANGUAGE: dart
CODE:
Future<void> myMethod(Session session) async {
  var isSignedIn = await session.isUserSignedIn;
  ...
}

----------------------------------------

TITLE: Querying Users with Not In Set Filter in Dart
DESCRIPTION: This example demonstrates how to use the notInSet filter to fetch all users with names not matching 'Alice' or 'Bob' from the database.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/06-database/06-filter.md#2025-04-16_snippet_9

LANGUAGE: dart
CODE:
await User.db.find(
  where: (t) => t.name.notInSet({'Alice', 'Bob'})
);

----------------------------------------

TITLE: Client-side File Upload Implementation in Serverpod
DESCRIPTION: Client-side code that requests an upload description, uploads a file using FileUploader, and verifies the upload with the server. Works with both Stream and ByteData objects.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/12-file-uploads.md#2025-04-16_snippet_2

LANGUAGE: dart
CODE:
var uploadDescription = await client.myEndpoint.getUploadDescription('myfile');
if (uploadDescription != null) {
  var uploader = FileUploader(uploadDescription);
  await uploader.upload(myStream);
  var success = await client.myEndpoint.verifyUpload('myfile');
}

----------------------------------------

TITLE: Adding Custom Methods to Generated Classes with Dart Extensions
DESCRIPTION: Shows how to extend generated Serverpod model classes with custom methods using Dart's extension feature. This approach allows adding functionality without modifying the generated code.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/05-concepts/02-models.md#2025-04-16_snippet_8

LANGUAGE: dart
CODE:
extension MyExtension on MyClass {
  bool isCustomMethod() {
    return true;
  }
}

----------------------------------------

TITLE: Scheduling a Future Call with Delay in Serverpod
DESCRIPTION: This snippet shows how to schedule a future call to be invoked after a specified delay using the futureCallWithDelay method. It demonstrates scheduling a call to be executed 1 hour from the current time.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/14-scheduling.md#2025-04-16_snippet_2

LANGUAGE: dart
CODE:
await session.serverpod.futureCallWithDelay(
  'exampleFutureCall',
  data,
  const Duration(hours: 1),
);

----------------------------------------

TITLE: Initializing PixoramaEndpoint Class
DESCRIPTION: Dart implementation of the base PixoramaEndpoint class with image constants and pixel data initialization.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/05-tutorials/02-real-time-communication.md#2025-04-16_snippet_3

LANGUAGE: dart
CODE:
import 'dart:typed_data';

import 'package:serverpod/serverpod.dart';

class PixoramaEndpoint extends Endpoint {
  static const _imageWidth = 64;
  static const _imageHeight = 64;
  static const _numPixels = _imageWidth * _imageHeight;

  static const _numColorsInPalette = 16;
  static const _defaultPixelColor = 2;
  
  final _pixelData = Uint8List(_numPixels)
    ..fillRange(
      0,
      _numPixels,
      _defaultPixelColor,
    );
}

----------------------------------------

TITLE: Implementing SessionManager for Authentication
DESCRIPTION: Sets up the SessionManager to track user authentication state, handle auth keys, and manage user sessions.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/11-authentication/01-setup.md#2025-04-16_snippet_10

LANGUAGE: dart
CODE:
late SessionManager sessionManager;
late Client client;

void main() async {
  // Need to call this as we are using Flutter bindings before runApp is called.
  WidgetsFlutterBinding.ensureInitialized();

  // The android emulator does not have access to the localhost of the machine.
  // const ipAddress = '10.0.2.2'; // Android emulator ip for the host

  // On a real device replace the ipAddress with the IP address of your computer.
  const ipAddress = 'localhost';

  // Sets up a singleton client object that can be used to talk to the server from
  // anywhere in our app. The client is generated from your server code.
  // The client is set up to connect to a Serverpod running on a local server on
  // the default port. You will need to modify this to connect to staging or
  // production servers.
  client = Client(
    'http://$ipAddress:8080/',
    authenticationKeyManager: FlutterAuthenticationKeyManager(),
  )..connectivityMonitor = FlutterConnectivityMonitor();

  // The session manager keeps track of the signed-in state of the user. You
  // can query it to see if the user is currently signed in and get information
  // about the user.
  sessionManager = SessionManager(
    caller: client.modules.auth,
  );
  await sessionManager.initialize();

  runApp(MyApp());
}

----------------------------------------

TITLE: Nested Include Operations in Serverpod
DESCRIPTION: Shows how to include deeply nested related objects in a query. Retrieves an employee with their company and company's address.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/06-database/07-relation-queries.md#2025-04-16_snippet_1

LANGUAGE: dart
CODE:
var employee = await Employee.db.findById(
  session,
  employeeId,
  include: Employee.include(
    company: Company.include(
      address: Address.include(),
    ),
  ),
);

----------------------------------------

TITLE: Generating Serverpod Client Library
DESCRIPTION: Command to generate client library code for the notes application endpoints
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/05-tutorials/01-first-app.mdx#2025-04-16_snippet_13

LANGUAGE: bash
CODE:
$ serverpod generate

----------------------------------------

TITLE: Bulk Attaching Related Rows in Serverpod
DESCRIPTION: Demonstrates how to associate multiple employees with a company in a single atomic operation using the attach method.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/06-database/07-relation-queries.md#2025-04-16_snippet_10

LANGUAGE: dart
CODE:
var company = await Company.db.findById(session, companyId);
var employee = await Employee.db.findById(session, employeeId);

await Company.db.attach.employees(session, company!, [employee!]);

----------------------------------------

TITLE: Creating a Serverpod Endpoint
DESCRIPTION: Example of creating a Serverpod endpoint with a method to check if a company is legitimate based on its founding date.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/02-get-started-with-mini.md#2025-04-16_snippet_5

LANGUAGE: dart
CODE:
import 'package:serverpod/serverpod.dart';

class CompanyEndpoint extends Endpoint {
  Future<bool> isLegit(Session session, Company company) async {
    // Check if the company has the foundedDate set and that it
    // has been around for more than one year.

    if (company.foundedDate == null) {
      return false;
    }

    var oneYearAgo = DateTime.now().subract(Duration(days: 365));
    return company.foundedDate!.isBefore(oneYearAgo);
  }
}

----------------------------------------

TITLE: Signing Out All Devices in Serverpod with Dart
DESCRIPTION: Demonstrates how to sign out a user from all devices using the StatusEndpoint in Serverpod.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/11-authentication/02-basics.md#2025-04-16_snippet_8

LANGUAGE: dart
CODE:
await client.modules.auth.status.signOutAllDevices();

----------------------------------------

TITLE: Sorting by Filtered Related List Count in Dart
DESCRIPTION: Shows how to sort based on a filtered count of related items. This example sorts companies by the number of employees with the specific role of 'developer'.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/06-database/08-sort.md#2025-04-16_snippet_5

LANGUAGE: dart
CODE:
var companies = await Company.db.find(
  session,
  orderBy: (t) => t.employees.count(
    (employee) => employee.role.equals('developer'),
  ),
);

----------------------------------------

TITLE: Creating a Server-Only Class in Serverpod YAML
DESCRIPTION: This example shows how to define a class that will only be generated on the server side, useful for handling private information.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/02-models.md#2025-04-16_snippet_1

LANGUAGE: yaml
CODE:
class: MyPrivateClass
serverOnly: true
fields:
  hiddenSecretKey: String

----------------------------------------

TITLE: Generating Serverpod Module Code
DESCRIPTION: These commands update dependencies and generate the necessary code for the added module in the server directory.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.6/02-concepts/06-modules.md#2025-04-16_snippet_2

LANGUAGE: bash
CODE:
dart pub get
serverpod generate

----------------------------------------

TITLE: Implementing One-to-One Self-Relation for Blog Posts in Serverpod
DESCRIPTION: Defines a Post class with self-referential relationships to track post history. Uses nextId field to link to the next post and creates a bidirectional relationship with previous posts. Includes a unique index on nextId to ensure proper linking.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/06-database/03-relations/04-self-relations.md#2025-04-16_snippet_0

LANGUAGE: yaml
CODE:
class: Post
table: post
fields:
  content: String
  previous: Post?, relation(name=next_previous_post)
  nextId: int?
  next: Post?, relation(name=next_previous_post, field=nextId, onDelete=SetNull)
indexes:
  next_unique_idx:
    fields: nextId
    unique: true

----------------------------------------

TITLE: Inserting a Table Row in Dart with Serverpod
DESCRIPTION: This Dart snippet shows how to insert a new row into a database table using Serverpod. It creates a new 'Company' object and inserts it into the database.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.22/04-concepts/03-database-communication.md#2025-04-16_snippet_5

LANGUAGE: dart
CODE:
var myRow = Company(name: 'Serverpod corp.', employees: []);
await Company.insert(session, myRow);

----------------------------------------

TITLE: Querying Data with Conditions
DESCRIPTION: Example of querying database with conditions using db.findFirstRow method and expression builder
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/01-get-started/08-working-with-database.md#2025-04-16_snippet_7

LANGUAGE: dart
CODE:
var myCompany = await Company.db.findFirstRow(
  session,
  where: (t) => t.name.equals('My Company'),
);

----------------------------------------

TITLE: Uploading File from Client-side in Serverpod (Dart)
DESCRIPTION: Client-side code to request upload description, upload a file, and verify the upload with the server. This example uses a Stream for uploading larger files.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/05-concepts/11-file-uploads.md#2025-04-16_snippet_2

LANGUAGE: dart
CODE:
var uploadDescription = await client.myEndpoint.getUploadDescription('myfile');
if (uploadDescription != null) {
  var uploader = FileUploader(uploadDescription);
  await uploader.upload(myStream);
  var success = await client.myEndpoint.verifyUpload('myfile');
}

----------------------------------------

TITLE: Creating a Unique Index in Serverpod
DESCRIPTION: Demonstrates how to create a unique index that ensures no duplicate values exist for the indexed fields. The example makes the 'name' field unique for the Company class by setting 'unique: true' on the index definition.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/06-database/04-indexing.md#2025-04-16_snippet_2

LANGUAGE: yaml
CODE:
class: Company
table: company
fields:
  name: String
indexes:
  company_name_idx:
    fields: name
    unique: true

----------------------------------------

TITLE: Filtering Users with Less Than or Equal Operator in Dart
DESCRIPTION: Shows filtering users by age using the less than or equal operator.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/06-database/06-filter.md#2025-04-16_snippet_5

LANGUAGE: dart
CODE:
await User.db.find(
  where: (t) => t.age <= 25
);

----------------------------------------

TITLE: Retrieving User ID from Authenticated Session in Dart
DESCRIPTION: This snippet demonstrates how to retrieve the user ID of a signed-in user through the session object in Serverpod.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/11-authentication/03-working-with-users.md#2025-04-16_snippet_0

LANGUAGE: dart
CODE:
var userId = (await session.authenticated)?.userId;

----------------------------------------

TITLE: Creating an Endpoint in Dart for Serverpod
DESCRIPTION: This snippet demonstrates how to create a basic endpoint in Serverpod. It extends the Endpoint class and defines a method that returns a Future<String>. The method takes a Session object and a name parameter.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.8/03-concepts/01-working-with-endpoints.md#2025-04-16_snippet_0

LANGUAGE: dart
CODE:
import 'package:serverpod/serverpod.dart';

class ExampleEndpoint extends Endpoint {
  Future<String> hello(Session session, String name) async {
    return 'Hello $name';
  }
}

----------------------------------------

TITLE: Creating an Endpoint in Serverpod (Dart)
DESCRIPTION: This snippet demonstrates how to create a simple endpoint in Serverpod. The endpoint extends the Endpoint class and includes a method that returns a Future<String>. The first parameter of the method is a Session object, which is required for all endpoint methods.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.11/03-concepts/01-working-with-endpoints.md#2025-04-16_snippet_0

LANGUAGE: dart
CODE:
import 'package:serverpod/serverpod.dart';

class ExampleEndpoint extends Endpoint {
  Future<String> hello(Session session, String name) async {
    return 'Hello $name';
  }
}

----------------------------------------

TITLE: Setting Up Serverpod Passwords File
DESCRIPTION: Example YAML passwords file for Serverpod containing secrets required for database, Redis, and service connections. The file has a shared section and separate sections for different run modes.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/07-configuration.md#2025-04-16_snippet_1

LANGUAGE: yaml
CODE:
shared:
  myCustomSharedSecret: 'secret_key'

development:
  database: 'development_password'
  redis: 'development_password'
  serviceSecret: 'development_service_secret'

production:
  database: 'production_password'
  redis: 'production_password'
  serviceSecret: 'production_service_secret'

----------------------------------------

TITLE: Defining Course Model with Many-to-many Relationship in Serverpod
DESCRIPTION: YAML configuration for the Course model that defines a many-to-many relationship with Student through Enrollment. Includes a field for course name and a list of enrollments.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/06-database/03-relations/03-many-to-many.md#2025-04-16_snippet_0

LANGUAGE: yaml
CODE:
class: Course
table: course
fields:
  name: String
  enrollments: List<Enrollment>?, relation(name=course_enrollments)

----------------------------------------

TITLE: Catching a Custom Exception in Client App
DESCRIPTION: Client-side code showing how to catch custom exceptions thrown by the server. This allows handling specific error types differently and accessing the structured error data.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/04-exceptions.md#2025-04-16_snippet_2

LANGUAGE: dart
CODE:
try {
  client.example.doThingy();
}
on MyException catch(e) {
  print(e.message);
}
catch(e) {
  print('Something else went wrong.');
}

----------------------------------------

TITLE: Batch Updating Multiple Rows in Serverpod with Dart
DESCRIPTION: Updates multiple Company records in a single atomic operation. If any update fails, no entries are updated. Returns a list of updated model objects.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/06-database/05-crud.md#2025-04-16_snippet_7

LANGUAGE: dart
CODE:
var companies = await Company.db.find(session);
companies = companies.map((c) => c.copyWith(name: 'New name')).toList();
var updatedCompanies = await Company.db.update(session, companies);

----------------------------------------

TITLE: Complete Authentication Endpoint Implementation
DESCRIPTION: Full example of an authentication endpoint that handles login, user creation, and auth token generation.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/11-authentication/04-providers/06-custom-providers.md#2025-04-16_snippet_3

LANGUAGE: dart
CODE:
class MyAuthenticationEndpoint extends Endpoint {
  Future<AuthenticationResponse> login(
    Session session,
    String username,
    String password,
  ) async {
    // Authenticates a user with email and password.
    if (!authenticateUser(session, username, password)) {
      return AuthenticationResponse(success: false);
    }

    // Finds or creates a user in the database using the User methods.
    var userInfo = findOrCreateUser(session, username);

    // Creates an authentication key for the user.
    var authToken = await UserAuthentication.signInUser(
      session,
      userInfo.id!,
      'myAuth',
      scopes: {},
    );

    // Returns the authentication response.
    return AuthenticationResponse(
      success: true,
      keyId: authToken.id,
      key: authToken.key,
      userInfo: userInfo,
    );
  }
}

----------------------------------------

TITLE: Defining Referential Actions in Serverpod YAML Configuration
DESCRIPTION: Shows the syntax for applying referential actions to relationships in Serverpod model definitions. The pattern uses the relation keyword with onUpdate and onDelete parameters to specify the desired behavior when parent records are modified or removed.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/06-database/03-relations/05-referential-actions.md#2025-04-16_snippet_0

LANGUAGE: yaml
CODE:
relation(onUpdate=<ACTION>, onDelete=<ACTION>)

----------------------------------------

TITLE: Creating Expressions for Queries in Dart with Serverpod
DESCRIPTION: This Dart snippet shows how to create expressions for database queries in Serverpod. It demonstrates various conditions like equality, comparison, and null checks.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.22/04-concepts/03-database-communication.md#2025-04-16_snippet_11

LANGUAGE: dart
CODE:
// The name column of the Company table equals 'My company')
t.name.equals('My company')

// Companies founded at or after 2020
t.foundedDate >= DateTime.utc(2020)

// Companies with number of employees between 10 and 100
(t.numEmployees > 10) & (t.numEmployees <= 100)

// Companies that has the founded date set
t.foundedDate.notEquals(null)

----------------------------------------

TITLE: Configuring SSL/TLS Security Context for Serverpod Server
DESCRIPTION: This snippet demonstrates how to create a SecurityContext with certificate and private key, then use it in the Serverpod constructor to enable SSL/TLS for all server components (API, web, and insights servers).
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/21-security-configuration.md#2025-04-16_snippet_0

LANGUAGE: dart
CODE:
final securityContext = SecurityContext()
  ..useCertificateChain('path/to/server_cert.pem')
  ..usePrivateKey('path/to/server_key.pem', password: 'password');

Serverpod(
  args,
  Protocol(),
  Endpoints(),
  securityContextConfig: SecurityContextConfig(
    apiServer: securityContext,
    webServer: securityContext,
    insightsServer: securityContext,
  ),
);

----------------------------------------

TITLE: Defining a Company Model with Database Table in YAML
DESCRIPTION: This snippet demonstrates how to define a Company model that maps to a database table using YAML configuration in Serverpod. It includes a 'name' field of type String.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/06-database/02-models.md#2025-04-16_snippet_0

LANGUAGE: yaml
CODE:
class: Company
table: company
fields:
  name: String

----------------------------------------

TITLE: Defining a Database Table for Note Objects
DESCRIPTION: Enhanced YAML definition that adds database table support for the Note class, enabling persistent storage.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/05-tutorials/01-first-app.mdx#2025-04-16_snippet_4

LANGUAGE: yaml
CODE:
### Holds a note with a text written by the user.
class: Note
table: note
fields:
  ### The contents of the note.
  text: String

----------------------------------------

TITLE: Complete Page-Based Pagination in Serverpod Dart
DESCRIPTION: Implements full page-based pagination with ordering, calculating offset based on page number and items per page.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/06-database/09-pagination.md#2025-04-16_snippet_2

LANGUAGE: dart
CODE:
int page = 3;
int companiesPerPage = 10;

var companies = await Company.db.find(
  session,
  orderBy: (t) => t.id,
  limit: companiesPerPage,
  offset: (page - 1) * companiesPerPage,
);

----------------------------------------

TITLE: Inserting Database Records in Dart
DESCRIPTION: Example of inserting a new company record into the database using Serverpod's insert method.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.7/03-concepts/03-database-communication.md#2025-04-16_snippet_3

LANGUAGE: dart
CODE:
var myRow = Company(name: 'Serverpod corp.', employees: []);
await Company.insert(session, myRow);

----------------------------------------

TITLE: Creating a Basic Database Table Model in Serverpod
DESCRIPTION: Defines a Company model with a database table mapping. When the table keyword is added, Serverpod will automatically generate CRUD methods and create necessary database migrations.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/06-database/02-models.md#2025-04-16_snippet_0

LANGUAGE: yaml
CODE:
class: Company
table: company
fields:
  name: String

----------------------------------------

TITLE: Testing Business Logic with Session Dependencies in Serverpod
DESCRIPTION: Example of using withServerpod helper to test business logic that depends on a Session object. The example shows a test for a product quantity update operation that throws an exception when quantity is zero.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/19-testing/03-advanced-examples.md#2025-04-16_snippet_1

LANGUAGE: dart
CODE:
withServerpod('Given decreasing product quantity when quantity is zero', (
  sessionBuilder,
  _,
) {
  var session = sessionBuilder.build();

  setUp(() async {
    await Product.db.insertRow(session, [
      Product(
        id: 123,
        name: 'Apple',
        quantity: 0,
      ),
    ]);
  });

  test('then should throw `InvalidOperationException`',
      () async {
    var future = ProductsBusinessLogic.updateQuantity(
      session,
      id: 123,
      decrease: 1,
    );

    await expectLater(future, throwsA(isA<InvalidOperationException>()));
  });
});

----------------------------------------

TITLE: Defining a Streaming Method in Serverpod
DESCRIPTION: Example of creating an endpoint method that uses streams for bidirectional communication. This method accepts a stream input and returns a stream output, echoing back any messages received.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/15-streams.md#2025-04-16_snippet_0

LANGUAGE: dart
CODE:
class ExampleEndpoint extends Endpoint {
  Stream echoStream(Session session, Stream stream) async* {
    await for (var message in stream) {
      yield message;
    }
  }
}

----------------------------------------

TITLE: Connecting Users with Email and Identifier in Serverpod
DESCRIPTION: Demonstrates finding or creating users based on email or unique identifier. First attempts to find existing user by email/identifier, then creates new user if none found.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/11-authentication/04-providers/06-custom-providers.md#2025-04-16_snippet_0

LANGUAGE: dart
CODE:
UserInfo? userInfo;
userInfo = await Users.findUserByEmail(session, email);
userInfo ??= await Users.findUserByIdentifier(session, userIdentifier);
if (userInfo == null) {
  userInfo = UserInfo(
    userIdentifier: userIdentifier,
    userName: name,
    email: email,
    blocked: false,
    created: DateTime.now().toUtc(),
    scopeNames: [],
  );
  userInfo = await Users.createUser(session, userInfo, _authMethod);
}

----------------------------------------

TITLE: Finding Data by ID in Serverpod (Dart)
DESCRIPTION: Dart code for retrieving a database record by its ID using Serverpod's ORM. This example finds a Company by its ID and returns the corresponding object or null if not found.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/01-get-started.md#2025-04-16_snippet_14

LANGUAGE: dart
CODE:
var myCompany = await Company.db.findById(session, companyId);

----------------------------------------

TITLE: Removing Development Database with Data
DESCRIPTION: Command to stop the Docker database instance and remove all data using the -v flag.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/05-concepts/06-database/01-connection.md#2025-04-16_snippet_4

LANGUAGE: bash
CODE:
$ docker compose down -v

----------------------------------------

TITLE: Adding Delete Button to Flutter ListTile with Optimistic UI Updates
DESCRIPTION: Adds a delete button to a ListTile that removes the note from the local state immediately for responsive UI feedback, then calls the _deleteNote method to delete it from the server database.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/05-tutorials/01-first-app.mdx#2025-04-16_snippet_31

LANGUAGE: dart
CODE:
ListTile(
  ...
  trailing: IconButton(
    icon: const Icon(Icons.delete),
    onPressed: () {
      var note = _notes![index];

      setState(() {
        _notes!.remove(note);
      });

      _deleteNote(note);
    },
  ),
),

----------------------------------------

TITLE: Configuring Client-Side TLS/SSL in Serverpod
DESCRIPTION: Shows how to configure the client-side security context to trust server certificates when connecting over HTTPS. This setup is necessary for secure client-server communication.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/21-security-configuration.md#2025-04-16_snippet_1

LANGUAGE: dart
CODE:
final securityContext = SecurityContext()
  ..setTrustedCertificates('path/to/server_cert.pem');


final client = Client(
  'https://yourserver.com',
  securityContext: securityContext,
  ...
);

----------------------------------------

TITLE: Including Related Object in a Query with Serverpod
DESCRIPTION: Demonstrates how to include a related object (address) when querying for an employee using Serverpod's include method, which provides a typed interface for all declared relations.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/06-database/07-relation-queries.md#2025-04-16_snippet_0

LANGUAGE: dart
CODE:
var employee = await Employee.db.findById(
  session,
  employeeId,
  include: Employee.include(
    address: Address.include(),
  ),
);

----------------------------------------

TITLE: Example Endpoint Test Using Serverpod Test Tools
DESCRIPTION: A sample test that demonstrates how to use the withServerpod helper to test an endpoint directly. The test verifies that the 'hello' endpoint returns the expected greeting.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/19-testing/01-get-started.md#2025-04-16_snippet_8

LANGUAGE: dart
CODE:
import 'package:test/test.dart';

// Import the generated file, it contains everything you need.
import 'test_tools/serverpod_test_tools.dart';

void main() {
  withServerpod('Given Example endpoint', (sessionBuilder, endpoints) {
    test('when calling `hello` then should return greeting', () async {
      final greeting = await endpoints.example.hello(sessionBuilder, 'Michael');
      expect(greeting, 'Hello Michael');
    });
  });
}

----------------------------------------

TITLE: Client-Side Session Management in Serverpod Authentication
DESCRIPTION: This snippet shows how to handle a successful authentication response on the client-side by registering the signed-in user with the SessionManager in Serverpod.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/05-concepts/10-authentication/04-providers/06-custom-providers.md#2025-04-16_snippet_6

LANGUAGE: dart
CODE:
var serverResponse = await caller.myAuthentication.login(username, password);

if (serverResponse.success) {
    // Store the user info in the session manager.
    SessionManager sessionManager = await SessionManager.instance;
    await sessionManager.registerSignedInUser(
        serverResponse.userInfo!,
        serverResponse.keyId!,
        serverResponse.key!,
    );
}

----------------------------------------

TITLE: Catching Custom Exception in Serverpod Client (Dart)
DESCRIPTION: This Dart snippet demonstrates how to catch a custom exception (MyException) in a Serverpod client application. It shows proper error handling for specific and general exceptions in client-side Dart code.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/04-exceptions.md#2025-04-16_snippet_2

LANGUAGE: dart
CODE:
try {
  client.example.doThingy();
}
on MyException catch(e) {
  print(e.message);
}
catch(e) {
  print('Something else went wrong.');
}

----------------------------------------

TITLE: Including Nested Related Objects in Serverpod Queries
DESCRIPTION: Shows how to include deeply nested objects in a query, retrieving an employee with their company and the company's address in a single query operation.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/06-database/07-relation-queries.md#2025-04-16_snippet_1

LANGUAGE: dart
CODE:
var employee = await Employee.db.findById(
  session,
  employeeId,
  include: Employee.include(
    company: Company.include(
      address: Address.include(),
    ),
  ),
);

----------------------------------------

TITLE: Configuring Serverpod Development Environment
DESCRIPTION: Shows how to configure the development.yaml file to set the public host for the Serverpod server, which is important for correct asset paths and server connections.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/01-working-with-endpoints.md#2025-04-16_snippet_3

LANGUAGE: yaml
CODE:
# your_project_server/config/development.yaml

apiServer:
  port: 8080
  publicHost: localhost # Change this line
  publicPort: 8080
  publicScheme: http
...

----------------------------------------

TITLE: Counting Records with Filter in Dart
DESCRIPTION: Shows how to count the number of records matching a specific filter condition.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/06-database/05-crud.md#2025-04-16_snippet_13

LANGUAGE: dart
CODE:
var count = await Company.db.count(
  session, 
  where: (t) => t.name.like('s%'),
);

----------------------------------------

TITLE: Configuring Server-Side TLS/SSL Security in Serverpod
DESCRIPTION: Example showing how to configure TLS/SSL on a Serverpod server by creating a SecurityContext with certificate and private key paths, then passing it to the Serverpod constructor via SecurityContextConfig.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/21-security-configuration.md#2025-04-16_snippet_0

LANGUAGE: dart
CODE:
final securityContext = SecurityContext()
  ..useCertificateChain('path/to/server_cert.pem')
  ..usePrivateKey('path/to/server_key.pem', password: 'password');

Serverpod(
  args,
  Protocol(),
  Endpoints(),
  securityContextConfig: SecurityContextConfig(
    apiServer: securityContext,
    webServer: securityContext,
    insightsServer: securityContext,
  ),
);

----------------------------------------

TITLE: Client-side File Upload Implementation
DESCRIPTION: Client-side code demonstrating how to upload a file using the FileUploader class. Shows the complete process of getting upload description, uploading the file, and verifying the upload.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.1.1/05-concepts/10-file-uploads.md#2025-04-16_snippet_2

LANGUAGE: dart
CODE:
var uploadDescription = await client.myEndpoint.getUploadDescription('myfile');
if (uploadDescription != null) {
  var uploader = FileUploader(uploadDescription);
  await uploader.upload(myStream);
  var success = await client.myEndpoint.verifyUpload('myfile');
}

----------------------------------------

TITLE: Nested Lists within Lists Query
DESCRIPTION: Shows how to include lists within lists, demonstrating multi-level relationship querying.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/06-database/07-relation-queries.md#2025-04-16_snippet_5

LANGUAGE: dart
CODE:
var user = await Company.db.findById(
  session,
  employeeId,
  include: Company.include(
    employees: Employee.includeList(
      includes: Employee.include(
        tools: Tool.includeList(),
      ),
    ),
  ),
);

----------------------------------------

TITLE: Executing Multiple SQL Statements without Results using Simple Query Protocol in Dart
DESCRIPTION: Shows how to use unsafeSimpleExecute for running multiple SQL statements that modify data without returning results. This method should be used with extreme caution due to SQL injection risks.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/06-database/10-raw-access.md#2025-04-16_snippet_3

LANGUAGE: dart
CODE:
int result = await session.db.unsafeSimpleExecute(
    r'DELETE FROM mytable WHERE id = 1; DELETE FROM othertable;'
);

----------------------------------------

TITLE: Defining Database Table Mapping in YAML
DESCRIPTION: Demonstrates how to map a serializable Company class to a database table using YAML configuration with fields for name, date, and employee relationships.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.5/02-concepts/03-database-communication.md#2025-04-16_snippet_0

LANGUAGE: yaml
CODE:
class: Company
table: company
fields:
  name: String
  foundedDate: DateTime?
  employees: List<Employee>

----------------------------------------

TITLE: Setting Field-Level Visibility Scopes in Serverpod Models
DESCRIPTION: Demonstrates how to set visibility scopes on individual fields within a class, allowing some fields to be server-only while others remain accessible to clients.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/02-models.md#2025-04-16_snippet_2

LANGUAGE: yaml
CODE:
class: SelectivelyHiddenClass
fields:
  hiddenSecretKey: String, scope=serverOnly
  publicKey: String

----------------------------------------

TITLE: Updating a Single Row in Serverpod Dart
DESCRIPTION: This Dart snippet shows how to update a single row in the database using the 'updateRow' method. It first fetches a company, modifies its name, and then updates it in the database.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/05-concepts/06-database/05-crud.md#2025-04-16_snippet_6

LANGUAGE: dart
CODE:
var company = await Company.db.findById(session, companyId); // Fetched company has its id set 
company.name = 'New name';
var updatedCompany = await Company.db.updateRow(session, company);

----------------------------------------

TITLE: Defining Course Model with Many-to-many Relationship in Serverpod
DESCRIPTION: YAML configuration for a Course model that participates in a many-to-many relationship with students via an enrollments relation. The course can have multiple enrollments, each linking to a student.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/06-database/03-relations/03-many-to-many.md#2025-04-16_snippet_0

LANGUAGE: yaml
CODE:
# course.yaml
class: Course
table: course
fields:
  name: String
  enrollments: List<Enrollment>?, relation(name=course_enrollments)

----------------------------------------

TITLE: Accessing Youtube API with Google Authentication
DESCRIPTION: Server-side implementation for accessing the Youtube API using the googleapis package. Demonstrates how to create an authenticated client and make API requests to fetch playlist items.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/05-concepts/10-authentication/04-providers/02-google.md#2025-04-16_snippet_6

LANGUAGE: dart
CODE:
import 'package:serverpod_auth_server/module.dart';
import 'package:googleapis/youtube/v3.dart';


final googleClient = await GoogleAuth.authClientForUser(session, userId);

if (googleClient != null) {
  var youTubeApi = YouTubeApi(googleClient);

  var favorites = await youTubeApi.playlistItems.list(
    ['snippet'],
    playlistId: 'LL', // Liked List
  );

} else {
  // The user hasn't signed in with Google.
}

----------------------------------------

TITLE: Explicit One-to-Many Relationship with Object Relation
DESCRIPTION: Shows explicit definition of one-to-many relationship using object relation where Employee references Company directly.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/05-concepts/06-database/03-relations/02-one-to-many.md#2025-04-16_snippet_1

LANGUAGE: yaml
CODE:
# company.yaml
class: Company
table: company
fields:
  name: String

# employee.yaml
class: Employee
table: employee
fields:
  name: String
  company: Company?, relation

----------------------------------------

TITLE: Installing Serverpod Auth Server Module
DESCRIPTION: Adds the serverpod_auth_server dependency to the server project using dart pub command.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/11-authentication/01-setup.md#2025-04-16_snippet_0

LANGUAGE: bash
CODE:
$ dart pub add serverpod_auth_server

----------------------------------------

TITLE: Custom User Identification in Dart using Serverpod
DESCRIPTION: This code snippet shows how to implement a custom user identification method by directly accessing the database in Serverpod. It uses the UserInfo model to find a user by their full name.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/11-authentication/04-providers/06-custom-providers.md#2025-04-16_snippet_1

LANGUAGE: dart
CODE:
var userInfo = await UserInfo.db.findFirstRow(
  session,
  where: (t) => t.fullName.equals(name),
);

----------------------------------------

TITLE: Rolling Back to Savepoints in Transactions
DESCRIPTION: Shows how to roll back to a previously created savepoint, preserving changes made before the savepoint while discarding later changes.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/06-database/08-transactions.md#2025-04-16_snippet_3

LANGUAGE: dart
CODE:
await session.db.transaction((transaction) async {
  // Changes preserved in the database
  await Company.db.insertRow(session, company, transaction: transaction);
  
  // Create savepoint
  var savepoint = await transaction.createSavepoint();

  await Employee.db.insertRow(session, employee, transaction: transaction);
  // Changes rolled back 
  await savepoint.rollback();
});

----------------------------------------

TITLE: Inserting a Single Row into the Database
DESCRIPTION: Creates a new Company record in the database using the insertRow method, which returns the created object with the id field set.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/06-database/05-crud.md#2025-04-16_snippet_1

LANGUAGE: dart
CODE:
var row = Company(name: 'Serverpod');
var company = await Company.db.insertRow(session, row);

----------------------------------------

TITLE: Retrieving Authenticated User ID in Serverpod
DESCRIPTION: Gets the ID of the currently authenticated user from the session object. This is a fundamental operation for accessing user context in Serverpod applications.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.1.1/05-concepts/09-authentication/03-working-with-users.md#2025-04-16_snippet_0

LANGUAGE: dart
CODE:
var userId = await session.auth.authenticatedUserId;

----------------------------------------

TITLE: Throwing a Custom Exception in Server Endpoint
DESCRIPTION: This Dart code demonstrates how to throw a custom serializable exception from a server endpoint. The custom exception includes a message and an error type that will be serialized and sent to the client.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/05-concepts/04-exceptions.md#2025-04-16_snippet_1

LANGUAGE: dart
CODE:
class ExampleEndpoint extends Endpoint {
  Future<void> doThingy(Session session) {
    // ... do stuff ...
    if (failure) {
      throw MyException(
        message: 'Failed to do thingy',
        errorType: MyEnum.thingyError,
      );
    }
  }
}

----------------------------------------

TITLE: Finding or Creating Users with Serverpod Authentication
DESCRIPTION: This snippet demonstrates how to find a user by email or identifier, and create a new user if none exists. It uses the Users utility methods from the authentication module.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/11-authentication/04-providers/06-custom-providers.md#2025-04-16_snippet_0

LANGUAGE: dart
CODE:
UserInfo? userInfo;
userInfo = await Users.findUserByEmail(session, email);
userInfo ??= await Users.findUserByIdentifier(session, userIdentifier);
if (userInfo == null) {
  userInfo = UserInfo(
    userIdentifier: userIdentifier,
    userName: name,
    email: email,
    blocked: false,
    created: DateTime.now().toUtc(),
    scopeNames: [],
  );
  userInfo = await Users.createUser(session, userInfo, _authMethod);
}

----------------------------------------

TITLE: Connecting to WebSocket in Serverpod Client
DESCRIPTION: Shows how to establish a WebSocket connection between the client and the Serverpod server, which is required before any streaming communication can occur.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.1.0/04-concepts/11-streams.md#2025-04-16_snippet_3

LANGUAGE: dart
CODE:
await client.connectWebSocket();


----------------------------------------

TITLE: Registering Signed-In User in Serverpod Client
DESCRIPTION: This snippet shows how to register a signed-in user in the client-side SessionManager after a successful authentication. It stores the user info, key ID, and key in the session manager.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/11-authentication/04-providers/06-custom-providers.md#2025-04-16_snippet_10

LANGUAGE: dart
CODE:
var serverResponse = await caller.myAuthentication.login(username, password);

if (serverResponse.success) {
    // Store the user info in the session manager.
    SessionManager sessionManager = await SessionManager.instance;
    await sessionManager.registerSignedInUser(
        serverResponse.userInfo!,
        serverResponse.keyId!,
        serverResponse.key!,
    );
}

----------------------------------------

TITLE: Logging Exceptions and Setting Log Levels in Serverpod (Dart)
DESCRIPTION: This code snippet shows how to log more complex information in Serverpod, including setting a custom log level, passing exceptions, and including stack traces. It demonstrates the flexibility of the 'log' method in handling various types of logging scenarios.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/09-logging.md#2025-04-16_snippet_1

LANGUAGE: dart
CODE:
session.log(
  'Oops, something went wrong',
  level: LogLevel.warning,
  exception: e,
  stackTrace: stackTrace,
);

----------------------------------------

TITLE: Generating Client Code for Auth Module in Bash
DESCRIPTION: This command generates the client code and endpoint methods for the auth module using the serverpod generate tool.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/11-authentication/01-setup.md#2025-04-16_snippet_3

LANGUAGE: bash
CODE:
$ serverpod generate

----------------------------------------

TITLE: Defining One-to-One Relationship with ID Field in Serverpod YAML
DESCRIPTION: Demonstrates how to set up a 1:1 relationship between User and Address models using an id field. The User model contains a foreign key field (addressId) referencing the Address model, with a unique index to ensure the one-to-one nature of the relationship.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/06-database/03-relations/01-one-to-one.md#2025-04-16_snippet_0

LANGUAGE: yaml
CODE:
# address.yaml
class: Address
table: address
fields:
  street: String

# user.yaml
class: User
table: user
fields:
  addressId: int, relation(parent=address) // Foreign key field
indexes:
  user_address_unique_idx:
    fields: addressId
    unique: true

----------------------------------------

TITLE: Logging a Simple Message in Serverpod (Dart)
DESCRIPTION: This snippet demonstrates how to log a basic message during the execution of a session in Serverpod. It uses the 'log' method of the 'session' object to record a custom message.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.1.0/04-concepts/07-logging.md#2025-04-16_snippet_0

LANGUAGE: dart
CODE:
session.log('This is working well');

----------------------------------------

TITLE: Sorting Companies by Count of Related List in Dart using Serverpod
DESCRIPTION: This snippet demonstrates how to sort companies based on the count of a list relation. It fetches all companies and sorts them by the number of employees.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/06-database/08-sort.md#2025-04-16_snippet_4

LANGUAGE: dart
CODE:
var companies = await Company.db.find(
  session,
  orderBy: (t) => t.employees.count(),
);

----------------------------------------

TITLE: Accessing YouTube API on Server-Side with Serverpod and Dart
DESCRIPTION: This code snippet shows how to use the googleapis package to access the YouTube API on the server-side in a Serverpod application. It demonstrates creating an authenticated client and fetching a user's liked videos.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/11-authentication/04-providers/02-google.md#2025-04-16_snippet_6

LANGUAGE: dart
CODE:
import 'package:serverpod_auth_server/module.dart';
import 'package:googleapis/youtube/v3.dart';


final googleClient = await GoogleAuth.authClientForUser(session, userId);

if (googleClient != null) {
  var youTubeApi = YouTubeApi(googleClient);

  var favorites = await youTubeApi.playlistItems.list(
    ['snippet'],
    playlistId: 'LL', // Liked List
  );

} else {
  // The user hasn't signed in with Google.
}

----------------------------------------

TITLE: Defining a Future Call Class in Dart for Serverpod
DESCRIPTION: This snippet shows how to create a future call by extending the FutureCall class and overriding the invoke method. It demonstrates the basic structure required for implementing a future call in Serverpod.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/14-scheduling.md#2025-04-16_snippet_0

LANGUAGE: dart
CODE:
import 'package:serverpod/serverpod.dart';

class ExampleFutureCall extends FutureCall<MyModelEntity> {
  @override
  Future<void> invoke(Session session, MyModelEntity? object) async {
    // Do something interesting in the future here.
  }
}

----------------------------------------

TITLE: Creating New Serverpod Project
DESCRIPTION: Command to create a new Serverpod project named 'mypod'
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/01-get-started.md#2025-04-16_snippet_0

LANGUAGE: bash
CODE:
$ serverpod create mypod

----------------------------------------

TITLE: Advanced Logging with Exception Handling
DESCRIPTION: Shows how to log messages with additional parameters including custom log levels, exceptions, and stack traces.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/09-logging.md#2025-04-16_snippet_1

LANGUAGE: dart
CODE:
session.log(
  'Oops, something went wrong',
  level: LogLevel.warning,
  exception: e,
  stackTrace: stackTrace,
);

----------------------------------------

TITLE: Configuring Email Authentication in Serverpod Server
DESCRIPTION: This snippet shows how to set up the AuthConfig for email authentication in the server.dart file. It includes methods for sending validation and password reset emails.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/11-authentication/04-providers/01-email.md#2025-04-16_snippet_0

LANGUAGE: dart
CODE:
import 'package:serverpod_auth_server/module.dart' as auth;

auth.AuthConfig.set(auth.AuthConfig(
  sendValidationEmail: (session, email, validationCode) async {
    // Send the validation email to the user.
    // Return `true` if the email was successfully sent, otherwise `false`.
    return true;
  },
  sendPasswordResetEmail: (session, userInfo, validationCode) async {
    // Send the password reset email to the user.
    // Return `true` if the email was successfully sent, otherwise `false`.
    return true;
  },
));

// Start the Serverpod server.
await pod.start();

----------------------------------------

TITLE: Client-Side Authentication with SessionManager
DESCRIPTION: This snippet shows how to register a signed-in user in the client's SessionManager after receiving an authentication response from the server.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/11-authentication/04-providers/06-custom-providers.md#2025-04-16_snippet_11

LANGUAGE: dart
CODE:
var serverResponse = await caller.myAuthentication.login(username, password);

if (serverResponse.success) {
    // Store the user info in the session manager.
    SessionManager sessionManager = await SessionManager.instance;
    await sessionManager.registerSignedInUser(
        serverResponse.userInfo!,
        serverResponse.keyId!,
        serverResponse.key!,
    );
}

----------------------------------------

TITLE: Including Related Object Lists in Serverpod Queries (Dart)
DESCRIPTION: Shows how to include a list of related objects (one-to-many relation) using the includeList method, returning a company with all its employees.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/05-concepts/06-database/07-relation-queries.md#2025-04-16_snippet_3

LANGUAGE: dart
CODE:
var user = await Company.db.findById(
  session,
  employeeId,
  include: Company.include(
    employees: Employee.includeList(),
  ),
);

----------------------------------------

TITLE: Completing Password Reset with Verification Code
DESCRIPTION: Resetting a user's password using the verification code and new password. This completes the password reset process with the provided verification code.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/11-authentication/04-providers/01-email.md#2025-04-16_snippet_9

LANGUAGE: dart
CODE:
await authController.resetPassword(email, verificationCode, password);

----------------------------------------

TITLE: Retrieving User ID from Session in Dart
DESCRIPTION: This snippet demonstrates how to retrieve the ID of a signed-in user from the session object in a Serverpod application.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/05-concepts/10-authentication/03-working-with-users.md#2025-04-16_snippet_0

LANGUAGE: dart
CODE:
var userId = (await session.authenticated)?.userId;

----------------------------------------

TITLE: Implementing toJson() Method for Custom Serialization in Dart
DESCRIPTION: Example of implementing the toJson() method required for custom serialization in Serverpod. This method returns a JSON serialization of the object.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/03-serialization.md#2025-04-16_snippet_0

LANGUAGE: dart
CODE:
Map<String, dynamic> toJson() {
return {
    name: 'John Doe',
};
}

----------------------------------------

TITLE: Configuring SSL/TLS Security Context for Serverpod Client
DESCRIPTION: This example shows how to set up a SecurityContext that trusts a specific certificate when creating a Serverpod client that connects to an HTTPS server.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/21-security-configuration.md#2025-04-16_snippet_1

LANGUAGE: dart
CODE:
final securityContext = SecurityContext()
  ..setTrustedCertificates('path/to/server_cert.pem');


final client = Client(
  'https://yourserver.com',
  securityContext: securityContext,
  ...
);

----------------------------------------

TITLE: Including Related Objects in Serverpod Queries (Dart)
DESCRIPTION: Demonstrates how to include related objects when querying a model. This example shows fetching an employee record with its related address included.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/06-database/07-relation-queries.md#2025-04-16_snippet_0

LANGUAGE: dart
CODE:
var employee = await Employee.db.findById(
  session,
  employeeId,
  include: Employee.include(
    address: Address.include(),
  ),
);

----------------------------------------

TITLE: Checking User Authentication Status in Dart with Serverpod
DESCRIPTION: This code shows how to verify if a user is signed in using the Session object in a Serverpod endpoint method.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/05-concepts/10-authentication/02-basics.md#2025-04-16_snippet_1

LANGUAGE: dart
CODE:
Future<void> myMethod(Session session) async {
  var isSignedIn = await session.isUserSignedIn;
  ...
}

----------------------------------------

TITLE: Updating Main App File for Note Creation in Flutter with Serverpod
DESCRIPTION: This comprehensive snippet shows the updated main.dart file, incorporating all the new features for note creation, including the loading screen, note dialog, and server communication.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/05-tutorials/01-first-app.mdx#2025-04-16_snippet_25

LANGUAGE: dart
CODE:
import 'package:notes_client/notes_client.dart';
import 'package:flutter/material.dart';
import 'package:serverpod_flutter/serverpod_flutter.dart';

import 'note_dialog.dart';

var client = Client('http://localhost:8080/')
  ..connectivityMonitor = FlutterConnectivityMonitor();

void main() {
  runApp(const MyApp());
}

class MyApp extends StatelessWidget {
  const MyApp({Key? key}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Notes',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: const MyHomePage(title: 'Notes'),
    );
  }
}

class MyHomePage extends StatefulWidget {
  const MyHomePage({Key? key, required this.title}) : super(key: key);

  final String title;

  @override
  MyHomePageState createState() => MyHomePageState();
}

class MyHomePageState extends State<MyHomePage> {
  List<Note>? _notes;
  Exception? _connectionException;

  @override
  void initState() {
    super.initState();
    _loadNotes();
  }

  Future<void> _loadNotes() async {
    try {
      final notes = await client.notes.getAllNotes();
      setState(() {
        _notes = notes;
      });
    } catch (e) {
      _connectionFailed(e);
    }
  }

  Future<void> _createNote(Note note) async {
    try {
      await client.notes.createNote(note);
      await _loadNotes();
    } catch (e) {
      _connectionFailed(e);
    }
  }

  void _connectionFailed(dynamic exception) {
    setState(() {
      _notes = null;
      _connectionException = exception;
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text(widget.title),
      ),
      body: _notes == null
          ? LoadingScreen(
              exception: _connectionException,
              onTryAgain: _loadNotes,
            )
          : ListView.builder(
              itemCount: _notes!.length,
              itemBuilder: ((context, index) {
                return ListTile(
                  title: Text(_notes![index].text),
                );
              }),
            ),
      floatingActionButton: _notes == null
          ? null
          : FloatingActionButton(
              onPressed: () {
                showNoteDialog(
                  context: context,
                  onSaved: (text) {
                    var note = Note(
                      text: text,
                    );
                    _notes!.add(note);
                    _createNote(note);
                  },
                );
              },
              child: const Icon(Icons.add),
            ),
    );
  }
}

----------------------------------------

TITLE: Implementing Scope-based Authorization for Endpoints in Dart with Serverpod
DESCRIPTION: This code demonstrates how to implement scope-based authorization for an endpoint by overriding the requiredScopes property in a Serverpod Endpoint class.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/05-concepts/10-authentication/02-basics.md#2025-04-16_snippet_3

LANGUAGE: dart
CODE:
class MyEndpoint extends Endpoint {
  @override
  bool get requireLogin => true;

  @override
  Set<Scope> get requiredScopes => {Scope.admin};

  Future<void> myMethod(Session session) async {
    ...
  }
  ...
}

----------------------------------------

TITLE: Applying Database Migrations
DESCRIPTION: Command to apply the database migration in maintenance mode. This updates the database schema with the new note table.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/05-tutorials/01-first-app.mdx#2025-04-16_snippet_6

LANGUAGE: bash
CODE:
$ dart run bin/main.dart --role maintenance --apply-migrations

----------------------------------------

TITLE: Registering a Custom Health Check Handler with Serverpod
DESCRIPTION: This code shows how to register a custom health check handler when initializing a Serverpod instance. The handler is passed as a parameter during Serverpod initialization and will be called periodically to collect metrics.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.1.0/04-concepts/12-health-checks.md#2025-04-16_snippet_1

LANGUAGE: dart
CODE:
final pod = Serverpod(
    args,
    Protocol(),
    Endpoints(),
    healthCheckHandler: myHealthCheckHandler,
  );

----------------------------------------

TITLE: Deleting Rows with a Filter Expression
DESCRIPTION: Deletes all Company records that match a specified filter expression using the deleteWhere method.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/06-database/05-crud.md#2025-04-16_snippet_12

LANGUAGE: dart
CODE:
var companiesDeleted = await Company.db.deleteWhere(
  session,
  where: (t) => t.name.like('%Ltd'),
);

----------------------------------------

TITLE: Creating Authentication Token in Dart with Serverpod
DESCRIPTION: This snippet demonstrates how to create an authentication token for a user using Serverpod's UserAuthentication class. It shows how to specify the authentication method and assign scopes to the token.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/11-authentication/04-providers/06-custom-providers.md#2025-04-16_snippet_2

LANGUAGE: dart
CODE:
var authToken = await UserAuthentication.signInUser(userInfo.id, 'myAuthMethod', scopes: {
    Scope('delete'),
    Scope('create'),
});

----------------------------------------

TITLE: Updated Parent Relation Syntax in Serverpod Models
DESCRIPTION: Example showing the deprecated 'parent' keyword syntax and the new 'relation' keyword that encapsulates it in Serverpod 1.2 model files.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/08-upgrading/02-upgrade-to-one-point-two.md#2025-04-16_snippet_7

LANGUAGE: yaml
CODE:
class: Example
table: example
fields:
  name: String
  parentId: int, parent=example

LANGUAGE: yaml
CODE:
class: Example
table: example
fields:
  name: String
  parentId: int, relation(parent=example)

----------------------------------------

TITLE: Finding Record by ID in Dart
DESCRIPTION: Retrieves a single Company record by its ID
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/06-database/05-crud.md#2025-04-16_snippet_3

LANGUAGE: dart
CODE:
var company = await Company.db.findById(session, companyId);

----------------------------------------

TITLE: Running Serverpod Generation Commands
DESCRIPTION: Terminal commands to update dependencies and generate the module protocol code.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.5/02-concepts/06-modules.md#2025-04-16_snippet_2

LANGUAGE: bash
CODE:
dart pub get
serverpod generate

----------------------------------------

TITLE: Defining Bidirectional One-to-many Relationship with Object Relation in Serverpod
DESCRIPTION: Creates a bidirectional one-to-many relationship between Company and Employee using an object relation with a named relation to connect both sides of the relationship.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/06-database/03-relations/02-one-to-many.md#2025-04-16_snippet_3

LANGUAGE: yaml
CODE:
# company.yaml
class: Company
table: company
fields:
  name: String
  employees: List<Employee>?, relation(name=company_employees)

# employee.yaml
class: Employee
table: employee
fields:
  name: String
  company: Company?, relation(name=company_employees)

----------------------------------------

TITLE: Implementing User Data Caching in Serverpod Dart
DESCRIPTION: Example of an endpoint method that implements caching for user data. The code demonstrates how to check for cached data, retrieve from database if not cached, and store in cache with a specified lifetime. Uses local cache with a 5-minute expiration time.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.22/04-concepts/04-caching.md#2025-04-16_snippet_0

LANGUAGE: dart
CODE:
Future<UserData> getUserData(Session session, int userId) async {
  // Define a unique key for the UserData object
  var cacheKey = 'UserData-$userId';

  // Try to retrieve the object from the cache
  var userData = await session.caches.local.get<UserData>(cacheKey);

  // If the object wasn't found in the cache, load it from the database and
  // save it in the cache. Make it valid for 5 minutes.
  if (userData == null) {
    userData = session.db.findById(tUserData, userId) as UserData?;
    await session.caches.local.put(cacheKey, userData!, lifetime: Duration(minutes: 5));
  }

  // Return the user data to the client
  return userData;
}

----------------------------------------

TITLE: Creating File Upload Description in Dart
DESCRIPTION: Server-side function to generate an upload description for file upload authorization. It uses the session's storage to create a direct file upload description for the 'public' storage.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/05-concepts/11-file-uploads.md#2025-04-16_snippet_0

LANGUAGE: dart
CODE:
Future<String?> getUploadDescription(Session session, String path) async {
  return await session.storage.createDirectFileUploadDescription(
    storageId: 'public',
    path: path,
  );
}

----------------------------------------

TITLE: Stopping Docker Compose for PostgreSQL in Serverpod
DESCRIPTION: Bash command to stop the Docker container running the PostgreSQL database for Serverpod development.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/06-database/01-connection.md#2025-04-16_snippet_3

LANGUAGE: bash
CODE:
$ docker compose stop

----------------------------------------

TITLE: Session Manager Implementation
DESCRIPTION: Dart code showing how to set up SessionManager for handling user authentication state in a Flutter app.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/11-authentication/01-setup.md#2025-04-16_snippet_10

LANGUAGE: dart
CODE:
late SessionManager sessionManager;
late Client client;

void main() async {
  // Need to call this as we are using Flutter bindings before runApp is called.
  WidgetsFlutterBinding.ensureInitialized();

  // The android emulator does not have access to the localhost of the machine.
  // const ipAddress = '10.0.2.2'; // Android emulator ip for the host

  // On a real device replace the ipAddress with the IP address of your computer.
  const ipAddress = 'localhost';

  client = Client(
    'http://$ipAddress:8080/',
    authenticationKeyManager: FlutterAuthenticationKeyManager(),
  )..connectivityMonitor = FlutterConnectivityMonitor();

  sessionManager = SessionManager(
    caller: client.modules.auth,
  );
  await sessionManager.initialize();

  runApp(MyApp());
}

----------------------------------------

TITLE: Configuring Google Sign-In Button with Additional Scopes in Dart
DESCRIPTION: This snippet demonstrates how to add additional scopes when configuring the Google Sign-In button in a Dart application. It specifically shows how to request access to the YouTube API.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/11-authentication/04-providers/02-google.md#2025-04-16_snippet_5

LANGUAGE: dart
CODE:
SignInWithGoogleButton(
  ...
  additionalScopes: const ['https://www.googleapis.com/auth/youtube'],
)

----------------------------------------

TITLE: Adding Custom Methods to Generated Classes with Dart Extensions
DESCRIPTION: Shows how to extend generated Serverpod model classes with custom methods using Dart's extension feature without modifying the generated code.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/02-models.md#2025-04-16_snippet_8

LANGUAGE: dart
CODE:
extension MyExtension on MyClass {
  bool isCustomMethod() {
    return true;
  }
}

----------------------------------------

TITLE: Listening to Server Stream in Dart Serverpod Client
DESCRIPTION: Demonstrates how to listen to a stream from a server endpoint in a Serverpod client. This allows the client to receive real-time updates from the server.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.21/04-concepts/09-streams.md#2025-04-16_snippet_4

LANGUAGE: dart
CODE:
await for (var message in client.myEndpoint.stream) {
  _handleMessage(message);
}

----------------------------------------

TITLE: Registering Google Sign-In Route in Serverpod Server
DESCRIPTION: This Dart code shows how to register the Google Sign-In route in the server.dart file. This route handles the redirect after authentication, which is essential for web integration.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/11-authentication/04-providers/02-google.md#2025-04-16_snippet_2

LANGUAGE: dart
CODE:
import 'package:serverpod_auth_server/module.dart' as auth


void run(List<String> args) async {
  ...
  pod.webServer.addRoute(auth.RouteGoogleSignIn(), '/googlesignin');
  ...
}

----------------------------------------

TITLE: Client-Side Endpoint Call in Dart
DESCRIPTION: Shows how to call an endpoint method from the client side using the generated client code.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/01-working-with-endpoints.md#2025-04-16_snippet_1

LANGUAGE: dart
CODE:
var result = await client.example.hello('World');

----------------------------------------

TITLE: Complete Example of Referential Actions in Serverpod
DESCRIPTION: A full example showing how to configure referential actions in a Serverpod class definition. This example sets the parentId field to null when the parent is updated and does nothing when the parent is deleted.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/06-database/03-relations/05-referential-actions.md#2025-04-16_snippet_2

LANGUAGE: yaml
CODE:
class: Example
table: example
fields:
  parentId: int?, relation(parent=example, onUpdate=SetNull, onDelete=NoAction)

----------------------------------------

TITLE: Complete Flutter Notes App Structure
DESCRIPTION: The full structure of the main.dart file for the notes app, including Serverpod client setup, app initialization, and basic UI structure.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/05-tutorials/01-first-app.mdx#2025-04-16_snippet_8

LANGUAGE: dart
CODE:
import 'package:notes_client/notes_client.dart';
import 'package:flutter/material.dart';
import 'package:serverpod_flutter/serverpod_flutter.dart';

// Sets up a singleton client object that can be used to talk to the server from
// anywhere in our app. The client is generated from your server code.
// The client is set up to connect to a Serverpod running on a local server on
// the default port. You will need to modify this to connect to staging or
// production servers.
var client = Client('http://localhost:8080/')
  ..connectivityMonitor = FlutterConnectivityMonitor();

void main() {
  runApp(const MyApp());
}

class MyApp extends StatelessWidget {
  const MyApp({Key? key}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Serverpod Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: const MyHomePage(title: 'Serverpod Example'),
    );
  }
}

class MyHomePage extends StatefulWidget {
  const MyHomePage({Key? key, required this.title}) : super(key: key);

  final String title;

  @override
  MyHomePageState createState() => MyHomePageState();
}

class MyHomePageState extends State<MyHomePage> {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text(widget.title),
      ),
    );
  }
}

----------------------------------------

TITLE: Implementing One-to-One Self-Relation for Blog Posts in YAML
DESCRIPTION: Defines a Post model with self-referential relationships to track previous and next posts in a blog chain. Includes unique index constraints and nullable relationships to handle the chain's endpoints.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/06-database/03-relations/04-self-relations.md#2025-04-16_snippet_0

LANGUAGE: yaml
CODE:
class: Post
table: post
fields:
  content: String
  previous: Post?, relation(name=next_previous_post)
  nextId: int?
  next: Post?, relation(name=next_previous_post, field=nextId, onDelete=SetNull)
indexes:
  next_unique_idx:
    fields: nextId
    unique: true

----------------------------------------

TITLE: Throwing Custom Exceptions from Server Endpoint
DESCRIPTION: Example of throwing a custom exception from a Serverpod endpoint. This demonstrates how to use the generated exception class with meaningful error data.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/04-exceptions.md#2025-04-16_snippet_1

LANGUAGE: dart
CODE:
class ExampleEndpoint extends Endpoint {
  Future<void> doThingy(Session session) {
    // ... do stuff ...
    if (failure) {
      throw MyException(
        message: 'Failed to do thingy',
        errorType: MyEnum.thingyError,
      );
    }
  }
}

----------------------------------------

TITLE: Filtering Users with ILike Operator in Dart
DESCRIPTION: Demonstrates case-insensitive pattern matching using ilike.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/06-database/06-filter.md#2025-04-16_snippet_12

LANGUAGE: dart
CODE:
await User.db.find(
  where: (t) => t.name.ilike('a%')
);

----------------------------------------

TITLE: Sorting Database Query Results by Related Model Fields in Dart
DESCRIPTION: Shows how to fetch companies from the database and sort them based on a field from a related model. In this example, companies are sorted by their CEO's name.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/06-database/08-sort.md#2025-04-16_snippet_3

LANGUAGE: dart
CODE:
var companies = await Company.db.find(
  session,
  orderBy: (t) => t.ceo.name,
);

----------------------------------------

TITLE: Descending Sort Order in Dart
DESCRIPTION: Shows how to sort database query results in descending order using orderDescending parameter.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/06-database/08-sort.md#2025-04-16_snippet_1

LANGUAGE: dart
CODE:
var companies = await Company.db.find(
  session,
  orderBy: (t) => t.name,
  orderDescending: true,
);

----------------------------------------

TITLE: Defining Implicit One-to-Many Relationship in YAML
DESCRIPTION: Demonstrates implicit setup of a one-to-many relationship between Company and Employee entities using List<Employee> type with relation keyword. The foreign key is automatically managed by Serverpod.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/05-concepts/06-database/03-relations/02-one-to-many.md#2025-04-16_snippet_0

LANGUAGE: yaml
CODE:
# company.yaml
class: Company
table: company
fields:
  name: String
  employees: List<Employee>?, relation

# employee.yaml
class: Employee
table: employee
fields:
  name: String

----------------------------------------

TITLE: Advanced User-Company One-to-Many Relation
DESCRIPTION: Complex YAML configuration showing a User model with both module relation and company relation. Demonstrates multiple relations and indexes in a single model.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/06-database/03-relations/06-modules.md#2025-04-16_snippet_2

LANGUAGE: yaml
CODE:
class: User
table: user
fields:
  userInfo: module:auth:UserInfo?, relation
  age: int
  company: Company?, relation(name=company_employee)
indexes:
  user_info_id_unique_idx:
    fields: userInfoId
    unique: true
  company_unique_idx:
    fields: companyId
    unique: true

----------------------------------------

TITLE: Signing Out All Devices in Serverpod
DESCRIPTION: Method to sign out a user from all authenticated devices simultaneously. Returns a boolean indicating success or failure of the operation.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/11-authentication/01-setup.md#2025-04-16_snippet_9

LANGUAGE: dart
CODE:
await sessionManager.signOutAllDevices();

----------------------------------------

TITLE: Implementing User Data Caching in Serverpod with Dart
DESCRIPTION: This code demonstrates how to implement a caching strategy for user data in Serverpod. It first attempts to retrieve data from the cache using a unique key, and if not found, loads it from the database and stores it in the cache with a 5-minute lifetime. This approach reduces database load for frequently accessed user information.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.1.1/05-concepts/06-caching.md#2025-04-16_snippet_0

LANGUAGE: dart
CODE:
Future<UserData> getUserData(Session session, int userId) async {
  // Define a unique key for the UserData object
  var cacheKey = 'UserData-$userId';

  // Try to retrieve the object from the cache
  var userData = await session.caches.local.get<UserData>(cacheKey);

  // If the object wasn't found in the cache, load it from the database and
  // save it in the cache. Make it valid for 5 minutes.
  if (userData == null) {
    userData = session.db.findById(tUserData, userId) as UserData?;
    await session.caches.local.put(cacheKey, userData!, lifetime: Duration(minutes: 5));
  }

  // Return the user data to the client
  return userData;
}

----------------------------------------

TITLE: Implementing User Data Caching in Dart with Serverpod
DESCRIPTION: Demonstrates how to implement caching for user data using Serverpod's session object. Shows retrieving data from cache, falling back to database queries, and setting cache expiration times. The example includes error handling and cache key generation.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.5/02-concepts/04-caching.md#2025-04-16_snippet_0

LANGUAGE: dart
CODE:
Future<UserData> getUserData(Session session, int userId) async {
  // Define a unique key for the UserData object
  var cacheKey = 'UserData-$userId';

  // Try to retrieve the object from the cache
  var userData = await session.caches.local.get(cacheKey) as UserData?;

  // If the object wasn't found in the cache, load it from the database and
  // save it in the cache. Make it valid for 5 minutes.
  if (userData == null) {
    userData = session.db.findById(tUserData, userId) as UserData?;
    await session.caches.local.put(cacheKey, userData!, lifetime: Duration(minutes: 5));
  }

  // Return the user data to the client
  return userData;
}

----------------------------------------

TITLE: Configuring Database Connection Details in YAML
DESCRIPTION: This YAML snippet shows the database configuration section in Serverpod's development.yaml file, specifying connection parameters like host, port, database name, and user.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/06-database/01-connection.md#2025-04-16_snippet_0

LANGUAGE: yaml
CODE:
...
database:
  host: localhost
  port: 8090
  name: <YOUR_PROJECT_NAME>
  user: postgres
...

----------------------------------------

TITLE: Bulk Detaching Rows in Serverpod
DESCRIPTION: Demonstrates how to remove multiple employee-company associations at once.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/06-database/07-relation-queries.md#2025-04-16_snippet_12

LANGUAGE: dart
CODE:
var employee = await Employee.db.findById(session, employeeId);

await Company.db.detach.employees(session, [employee!]);

----------------------------------------

TITLE: Initializing Serverpod Client in Dart
DESCRIPTION: Demonstrates how to initialize a Serverpod client for connecting to a local server. It sets up a singleton client object and configures the connectivity monitor.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/01-working-with-endpoints.md#2025-04-16_snippet_2

LANGUAGE: dart
CODE:
var client = Client('http://$localhost:8080/')
  ..connectivityMonitor = FlutterConnectivityMonitor();

----------------------------------------

TITLE: Greater Than Comparison in Serverpod
DESCRIPTION: Example of using the greater than operator for numeric comparisons in queries.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/06-database/06-filter.md#2025-04-16_snippet_2

LANGUAGE: dart
CODE:
await User.db.find(
  where: (t) => t.age > 25
);

----------------------------------------

TITLE: Including Related Data in Serverpod Query
DESCRIPTION: Demonstrates how to include related data in a query using the include method with a typed interface.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/06-database/07-relation-queries.md#2025-04-16_snippet_0

LANGUAGE: dart
CODE:
var employee = await Employee.db.findById(
  session,
  employeeId,
  include: Employee.include(
    address: Address.include(),
  ),
);

----------------------------------------

TITLE: Implementing Limit Parameter in Serverpod Queries
DESCRIPTION: This code snippet demonstrates how to use the limit parameter to restrict the number of results returned from a database query in Serverpod. The example fetches the first 10 companies from the database.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/06-database/09-pagination.md#2025-04-16_snippet_0

LANGUAGE: dart
CODE:
var companies = await Company.db.find(
  session,
  limit: 10,
);

----------------------------------------

TITLE: Complete Limit-Offset Pagination Implementation
DESCRIPTION: Demonstrates a full implementation of pagination using limit and offset with page calculation and ordering.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/05-concepts/06-database/09-pagination.md#2025-04-16_snippet_2

LANGUAGE: dart
CODE:
int page = 3;
int companiesPerPage = 10;

var companies = await Company.db.find(
  session,
  orderBy: (t) => t.id,
  limit: companiesPerPage,
  offset: (page - 1) * companiesPerPage,
);

----------------------------------------

TITLE: Configuring Authentication in Dart
DESCRIPTION: This snippet demonstrates how to customize the Authentication Configuration in the server's main file.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/11-authentication/01-setup.md#2025-04-16_snippet_7

LANGUAGE: dart
CODE:
import 'package:serverpod_auth_server/module.dart' as auth;  
  
void run(List<String> args) async {

  auth.AuthConfig.set(auth.AuthConfig(  
    minPasswordLength: 12,
  ));  
    
  // Start the Serverpod server.  
  await pod.start();
}

----------------------------------------

TITLE: Custom Method Extension Example
DESCRIPTION: Shows how to extend generated classes with custom methods using Dart extensions.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/05-concepts/02-models.md#2025-04-16_snippet_7

LANGUAGE: dart
CODE:
extension MyExtension on MyClass {
  bool isCustomMethod() {
    return true;
  }
}

----------------------------------------

TITLE: Complex Data Type Storage in YAML
DESCRIPTION: Example of storing a complex type (Address) as a JSON column in the database table.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/06-database/02-models.md#2025-04-16_snippet_2

LANGUAGE: yaml
CODE:
class: Company
table: company
fields:
  address: Address # Stored as a json column

----------------------------------------

TITLE: Listening to Stream Messages from Server in Dart
DESCRIPTION: Demonstrates how to listen to the stream of messages coming from a specific endpoint on the server. This allows the client to receive real-time updates pushed from the server.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.1.0/04-concepts/11-streams.md#2025-04-16_snippet_4

LANGUAGE: dart
CODE:
await for (var message in client.myEndpoint.stream) {
  _handleMessage(message);
}

----------------------------------------

TITLE: Defining Complex Data Types in Serverpod Model
DESCRIPTION: Illustrates how complex types like custom models are stored as JSON in the database. This approach allows for flexible data structures but requires individual updates.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/06-database/02-models.md#2025-04-16_snippet_2

LANGUAGE: yaml
CODE:
class: Company
table: company
fields:
  address: Address # Stored as a json column

----------------------------------------

TITLE: Filtering Users by Name Inequality in Dart
DESCRIPTION: This snippet shows how to use the 'notEquals' operator to filter users by excluding a specific name. It retrieves all users with a name that is not 'Bob'.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/06-database/06-filter.md#2025-04-16_snippet_1

LANGUAGE: dart
CODE:
await User.db.find(
  where: (t) => t.name.notEquals('Bob')
);

----------------------------------------

TITLE: Applying Repair Migration in Standard Mode
DESCRIPTION: Command to apply a repair migration during normal server startup. Uses the --apply-repair-migration flag to trigger the migration process during the startup sequence.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/06-database/11-migrations.md#2025-04-16_snippet_11

LANGUAGE: bash
CODE:
dart run bin/main.dart --apply-repair-migration

----------------------------------------

TITLE: Implementing Member Class for Many-to-Many Self-relation Blocking System in Serverpod
DESCRIPTION: Defines a Member class with two relational lists: members being blocked by the current member and members blocking the current member. Both relations connect to a junction table that manages the blocking relationships.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/06-database/03-relations/04-self-relations.md#2025-04-16_snippet_2

LANGUAGE: yaml
CODE:
class: Member
table: member
fields:
  name: String
  blocking: List<Blocking>?, relation(name=member_blocked_by_me)
  blockedBy: List<Blocking>?, relation(name=member_blocking_me)

----------------------------------------

TITLE: Updating Specific Column in Single Row
DESCRIPTION: Demonstrates how to update specific columns while leaving others unchanged.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/06-database/05-crud.md#2025-04-16_snippet_8

LANGUAGE: dart
CODE:
var company = await Company.db.findById(session, companyId); 
company.name = 'New name';
company.address = 'Baker street';
var updatedCompany = await Company.db.updateRow(session, company, columns: (t) => [t.name]);

----------------------------------------

TITLE: Querying Database with Expression in Serverpod (Dart)
DESCRIPTION: Demonstrates how to perform a refined database search using db.findFirstRow with a typed expression builder. Returns a single row matching the specified condition.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/01-get-started.md#2025-04-16_snippet_13

LANGUAGE: dart
CODE:
var myCompany = await Company.db.findFirstRow(
  session,
  where: (t) => t.name.equals('My Company'),
);

----------------------------------------

TITLE: Monitoring Authentication State Changes
DESCRIPTION: Example of how to add a listener to the SessionManager to track changes in user authentication state.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/11-authentication/01-setup.md#2025-04-16_snippet_11

LANGUAGE: dart
CODE:
@override
void initState() {
  super.initState();
  
  // Rebuild the page if authentication state changes.
  sessionManager.addListener(() {
    setState(() {});
  });
}

----------------------------------------

TITLE: Fetching Notes from Serverpod Backend
DESCRIPTION: Asynchronous method to fetch notes from the server endpoint and update the state, with error handling for connection failures.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/05-tutorials/01-first-app.mdx#2025-04-16_snippet_17

LANGUAGE: dart
CODE:
Future<void> _loadNotes() async {
  try {
    final notes = await client.notes.getAllNotes();
    setState(() {
      _notes = notes;
    });
  } catch (e) {
    _connectionFailed(e);
  }
}

----------------------------------------

TITLE: Database Transaction in Dart
DESCRIPTION: Example of using database transactions for atomic operations.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.1.0/04-concepts/05-database-communication.md#2025-04-16_snippet_13

LANGUAGE: dart
CODE:
var result = await session.db.transaction((transaction) async {
  // Do some database queries here.

  // Optionally return a value.
  return true;
});

----------------------------------------

TITLE: UUID Default Values in Serverpod
DESCRIPTION: Examples showing how to define UUID fields with default values in Serverpod. The first uses a random UUID generator, while the second specifies a fixed UUID string.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/02-models.md#2025-04-16_snippet_13

LANGUAGE: yaml
CODE:
uuidDefaultRandom: UuidValue, default=random
uuidDefaultUuid: UuidValue, default='550e8400-e29b-41d4-a716-446655440000'

----------------------------------------

TITLE: Sending Message to Serverpod WebSocket Stream in Dart Client
DESCRIPTION: Demonstrates how to send a message to a Serverpod endpoint's WebSocket stream from a Dart client.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/15-streams.md#2025-04-16_snippet_7

LANGUAGE: dart
CODE:
client.myEndpoint.sendStreamMessage(MyMessage(text: 'Hello'));

----------------------------------------

TITLE: Executing Raw SQL Query with Parameters in Dart
DESCRIPTION: Uses the unsafeQuery method to execute a parameterized SQL query and return the results as a DatabaseResult. This approach uses the extended query protocol with named parameters for SQL injection protection.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/06-database/10-raw-access.md#2025-04-16_snippet_0

LANGUAGE: dart
CODE:
DatabaseResult result = await session.db.unsafeQuery(
  r'SELECT * FROM mytable WHERE id = @id', 
  parameters: QueryParameters.named({'id': 1}),
);

----------------------------------------

TITLE: Initializing Serverpod with Custom Authentication Handler in Dart
DESCRIPTION: This snippet demonstrates how to initialize Serverpod with a custom authentication handler. The handler validates tokens and returns an AuthenticationInfo object if valid.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/05-concepts/10-authentication/05-custom-overrides.md#2025-04-16_snippet_0

LANGUAGE: dart
CODE:
final pod = Serverpod(
  args,
  Protocol(),
  Endpoints(),
  authenticationHandler: (Session session, String token) async {
    /// Custom validation handler
    if (token != 'valid') return null;

    return AuthenticationInfo(1, <Scope>{});
  },
);

----------------------------------------

TITLE: Deleting Rows with Filter Expression in Serverpod with Dart
DESCRIPTION: Deletes all Company records matching a filter condition. Returns a list of the deleted model objects. In this example, deletes companies with names ending in 'Ltd'.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/06-database/05-crud.md#2025-04-16_snippet_12

LANGUAGE: dart
CODE:
var companiesDeleted = await Company.db.deleteWhere(
  session,
  where: (t) => t.name.like('%Ltd'),
);

----------------------------------------

TITLE: Generated SQL for One-to-One Relationship
DESCRIPTION: Shows the SQL code that Serverpod generates behind the scenes to implement a one-to-one relationship with proper constraints and indexes.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/06-database/03-relations/01-one-to-one.md#2025-04-16_snippet_4

LANGUAGE: sql
CODE:
CREATE TABLE "address" (
    "id" serial PRIMARY KEY,
    "street" text NOT NULL
);

CREATE TABLE "user" (
    "id" serial PRIMARY KEY,
    "addressId" integer NOT NULL
);


CREATE UNIQUE INDEX "user_address_unique_idx" ON "user" USING btree ("addressId");

ALTER TABLE ONLY "user"
    ADD CONSTRAINT "user_fk_0"
    FOREIGN KEY("addressId")
    REFERENCES "address"("id")
    ON DELETE CASCADE
    ON UPDATE NO ACTION;

----------------------------------------

TITLE: Adding Routes to Serverpod Web Server
DESCRIPTION: Shows how to add page routes to the Serverpod web server. It demonstrates adding both a single page route and a wildcard route that matches all paths with a specific beginning.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/18-webserver.md#2025-04-16_snippet_0

LANGUAGE: dart
CODE:
// Add a single page.
pod.webServer.addRoute(MyRoute(), '/my/page/address');

// Match all paths that start with /item/
pod.webServer.addRoute(AnotherRoute(), '/item/*');

----------------------------------------

TITLE: Accessing Client IP Address in Serverpod
DESCRIPTION: Demonstrates how to retrieve the IP address of the client calling a method in Serverpod, even when running behind a load balancer. This snippet casts the Session to MethodCallSession and uses an extension on HttpRequest.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/05-sessions.md#2025-04-16_snippet_0

LANGUAGE: dart
CODE:
session as MethodCallSession;
var ipAddress = session.httpRequest.remoteIpAddress;

----------------------------------------

TITLE: Advanced Logging with Exception Handling
DESCRIPTION: Shows how to log messages with additional parameters including error level, exceptions, and stack traces for more detailed error logging.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/09-logging.md#2025-04-16_snippet_1

LANGUAGE: dart
CODE:
session.log(
  'Oops, something went wrong',
  level: LogLevel.warning,
  exception: e,
  stackTrace: stackTrace,
);

----------------------------------------

TITLE: Finding Multiple Rows with Filtering in Serverpod with Dart
DESCRIPTION: Retrieves multiple Company records matching the filter criteria with an optional limit. Returns a list of matching model objects.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/06-database/05-crud.md#2025-04-16_snippet_5

LANGUAGE: dart
CODE:
var companies = await Company.db.find(
  session,
  where: (t) => t.id < 100,
  limit: 50,
);

----------------------------------------

TITLE: Creating File Upload Description in Serverpod
DESCRIPTION: Server-side endpoint code to generate upload description that grants file upload access to the app. Takes session and path parameters to create a direct file upload description.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/12-file-uploads.md#2025-04-16_snippet_0

LANGUAGE: dart
CODE:
Future<String?> getUploadDescription(Session session, String path) async {
  return await session.storage.createDirectFileUploadDescription(
    storageId: 'public',
    path: path,
  );
}

----------------------------------------

TITLE: Advanced Logging with Exception Handling
DESCRIPTION: Demonstrates how to log a message with a specific log level, exception, and stack trace. This provides more detailed error information for debugging purposes.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/09-logging.md#2025-04-16_snippet_1

LANGUAGE: dart
CODE:
session.log(
  'Oops, something went wrong',
  level: LogLevel.warning,
  exception: e,
  stackTrace: stackTrace,
);

----------------------------------------

TITLE: Implementing Custom Health Check Handler in Dart
DESCRIPTION: Example of creating a custom health check handler function that returns server health metrics. The handler measures custom metrics and returns them in a standardized format for Serverpod to process.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/13-health-checks.md#2025-04-16_snippet_0

LANGUAGE: dart
CODE:
Future<List<ServerHealthMetric>> myHealthCheckHandler(
    Serverpod pod, DateTime timestamp) async {
  // Actually perform some checks.

  // Return a list of health metrics for the given timestamp.
  return [
    ServerHealthMetric(
      name: 'MyMetric',
      serverId: pod.serverId,
      timestamp: timestamp,
      isHealthy: true,
      value: 1.0,
    ),
  ];
}

----------------------------------------

TITLE: Executing Database Transactions in Dart with Serverpod
DESCRIPTION: This Dart snippet shows how to execute a database transaction in Serverpod. It uses the 'transaction' method to perform multiple database operations as a single atomic unit.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.21/04-concepts/03-database-communication.md#2025-04-16_snippet_13

LANGUAGE: dart
CODE:
var result = await session.db.transaction((transaction) async {
  // Do some database queries here.

  // Optionally return a value.
  return true;
});

----------------------------------------

TITLE: Cache Implementation with CacheMissHandler in Dart Serverpod
DESCRIPTION: Shows an improved version of the caching implementation using CacheMissHandler for more elegant cache miss handling. The handler automatically manages cache misses and storage of new values.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/08-caching.md#2025-04-16_snippet_1

LANGUAGE: dart
CODE:
Future<UserData> getUserData(Session session, int userId) async {
  // Define a unique key for the UserData object
  var cacheKey = 'UserData-$userId';

  // Try to retrieve the object from the cache
  var userData = await session.caches.local.get(
    cacheKey,
    // If the object wasn't found in the cache, load it from the database and
    // save it in the cache. Make it valid for 5 minutes.
    CacheMissHandler(
      () async => UserData.db.findById(session, userId),
      lifetime: Duration(minutes: 5),
    ),
    );

  // Return the user data to the client
  return userData;
}

----------------------------------------

TITLE: Logging a Simple Message in Serverpod (Dart)
DESCRIPTION: This snippet demonstrates how to log a custom message during the execution of a session using the log method of the session object. The message will be written to the log when the session is closed.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/05-concepts/08-logging.md#2025-04-16_snippet_0

LANGUAGE: dart
CODE:
session.log('This is working well');

----------------------------------------

TITLE: Defining a Basic Table-Mapped Serverpod Model in YAML
DESCRIPTION: Creates a serializable Company model that maps to a 'company' database table with a name field. Serverpod automatically adds an ID field and generates database CRUD methods for this model.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/05-concepts/06-database/02-models.md#2025-04-16_snippet_0

LANGUAGE: yaml
CODE:
class: Company
table: company
fields:
  name: String

----------------------------------------

TITLE: Sending Basic Message in Serverpod
DESCRIPTION: Demonstrates how to send a message to a specific channel using the postMessage method. The message must be a Serverpod model.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/16-server-events.md#2025-04-16_snippet_0

LANGUAGE: dart
CODE:
var message = UserUpdate(); // Model that represents changes to user data.
session.messages.postMessage('user_updates', message);

----------------------------------------

TITLE: Testing Business Logic with Session Dependencies
DESCRIPTION: Example of testing business logic that depends on a Session object using the withServerpod helper. Demonstrates database interaction and exception testing.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/19-testing/03-advanced-examples.md#2025-04-16_snippet_1

LANGUAGE: dart
CODE:
withServerpod('Given decreasing product quantity when quantity is zero', (
  sessionBuilder,
  _,
) {
  var session = sessionBuilder.build();

  setUp(() async {
    await Product.db.insertRow(session, [
      Product(
        id: 123,
        name: 'Apple',
        quantity: 0,
      ),
    ]);
  });

  test('then should throw `InvalidOperationException`',
      () async {
    var future = ProductsBusinessLogic.updateQuantity(
      session,
      id: 123,
      decrease: 1,
    );

    await expectLater(future, throwsA(isA<InvalidOperationException>()));
  });
});

----------------------------------------

TITLE: Signing In User with Email and Password in Dart
DESCRIPTION: Authenticating users with their email and password credentials.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/11-authentication/04-providers/01-email.md#2025-04-16_snippet_7

LANGUAGE: dart
CODE:
await authController.signIn(email, password);

----------------------------------------

TITLE: Executing Non-returning SQL Commands with unsafeExecute in Dart
DESCRIPTION: Execute a SQL command that modifies data without returning query results. Returns the number of rows affected by the operation.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/06-database/10-raw-access.md#2025-04-16_snippet_1

LANGUAGE: dart
CODE:
int result = await session.db.unsafeExecute(
  r'DELETE FROM mytable WHERE id = @id',
  parameters: QueryParameters.named({'id': 1}),
);

----------------------------------------

TITLE: Including Nested Lists in Serverpod Query (Dart)
DESCRIPTION: This example shows how to include lists within lists in a Serverpod query. It retrieves a company record with all related employees, where each employee includes their related tools list.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/06-database/07-relation-queries.md#2025-04-16_snippet_5

LANGUAGE: dart
CODE:
var user = await Company.db.findById(
  session,
  employeeId,
  include: Company.include(
    employees: Employee.includeList(
      includes: Employee.include(
        tools: Tool.includeList(),
      ),
    ),
  ),
);

----------------------------------------

TITLE: Defining Custom Scopes for Serverpod Authorization in Dart
DESCRIPTION: Illustrates how to create custom scopes by extending the Scope class for more granular access control in Serverpod.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/11-authentication/02-basics.md#2025-04-16_snippet_5

LANGUAGE: dart
CODE:
class CustomScope extends Scope {
  const CustomScope(String name) : super(name);

  static const userRead = CustomScope('userRead');
  static const userWrite = CustomScope('userWrite');
}

----------------------------------------

TITLE: Implementing Authentication Scenarios in Serverpod Tests with Dart
DESCRIPTION: Demonstrates how to set up authenticated and unauthenticated test scenarios using the withServerpod helper. It includes examples of testing an endpoint with both authenticated and unauthenticated sessions.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/19-testing/02-the-basics.md#2025-04-16_snippet_2

LANGUAGE: dart
CODE:
withServerpod('Given AuthenticatedExample endpoint', (sessionBuilder, endpoints) {
  // Corresponds to an actual user id
  const int userId = 1234;

  group('when authenticated', () {
    var authenticatedSessionBuilder = sessionBuilder.copyWith(
      authentication:
          AuthenticationOverride.authenticationInfo(userId, {Scope('user')}),
    );

    test('then calling `hello` should return greeting', () async {
      final greeting = await endpoints.authenticatedExample
          .hello(authenticatedSessionBuilder, 'Michael');
      expect(greeting, 'Hello, Michael!');
    });
  });

  group('when unauthenticated', () {
    var unauthenticatedSessionBuilder = sessionBuilder.copyWith(
      authentication: AuthenticationOverride.unauthenticated(),
    );

    test(
        'then calling `hello` should throw `ServerpodUnauthenticatedException`',
        () async {
      final future = endpoints.authenticatedExample
          .hello(unauthenticatedSessionBuilder, 'Michael');
      await expectLater(
          future, throwsA(isA<ServerpodUnauthenticatedException>()));
    });
  });
});

----------------------------------------

TITLE: Rolling Back to Savepoints in Serverpod
DESCRIPTION: Shows how to use savepoints for partial transaction rollback, preserving operations performed before the savepoint while rolling back later operations.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/06-database/08-transactions.md#2025-04-16_snippet_3

LANGUAGE: dart
CODE:
await session.db.transaction((transaction) async {
  // Changes preserved in the database
  await Company.db.insertRow(session, company, transaction: transaction);
  
  // Create savepoint
  var savepoint = await transaction.createSavepoint();

  await Employee.db.insertRow(session, employee, transaction: transaction);
  // Changes rolled back 
  await savepoint.rollback();
});

----------------------------------------

TITLE: Multi-Column Sorting in Serverpod
DESCRIPTION: Demonstrates sorting by multiple columns using orderByList. Companies are sorted by name in descending order and then by ID in ascending order.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/06-database/08-sort.md#2025-04-16_snippet_2

LANGUAGE: dart
CODE:
var companies = await Company.db.find(
  session,
  orderByList: (t) => [
    Order(column: t.name, orderDescending: true), 
    Order(column: t.id),
  ],
);

----------------------------------------

TITLE: Client-side Session Management in Serverpod
DESCRIPTION: Shows how to handle authentication response on the client side and register a signed-in user using SessionManager.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/05-concepts/10-authentication/04-providers/06-custom-providers.md#2025-04-16_snippet_4

LANGUAGE: dart
CODE:
var serverResponse = await caller.myAuthentication.login(username, password);

if (serverResponse.success) {
    // Store the user info in the session manager.
    SessionManager sessionManager = await SessionManager.instance;
    await sessionManager.registerSignedInUser(
        serverResponse.userInfo!,
        serverResponse.keyId!,
        serverResponse.key!,
    );
}

----------------------------------------

TITLE: Adding a Basic Index in Serverpod YAML Model
DESCRIPTION: Demonstrates how to add a basic index to a database table in Serverpod by adding an 'indexes' section to the YAML model definition. The example creates an index named 'company_name_idx' on the 'name' field of the Company class.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/06-database/04-indexing.md#2025-04-16_snippet_0

LANGUAGE: yaml
CODE:
class: Company
table: company
fields:
  name: String
indexes:
  company_name_idx:
    fields: name

----------------------------------------

TITLE: Listening to Serverpod WebSocket Stream in Dart Client
DESCRIPTION: Illustrates how to listen to a WebSocket stream from a Serverpod endpoint in a Dart client.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/15-streams.md#2025-04-16_snippet_6

LANGUAGE: dart
CODE:
await for (var message in client.myEndpoint.stream) {
  _handleMessage(message);
}

----------------------------------------

TITLE: Logging Exceptions and Stack Traces in Serverpod (Dart)
DESCRIPTION: Shows how to log more detailed information including exceptions and stack traces in Serverpod. This snippet demonstrates setting a custom log level, passing an exception and stack trace to the log method.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.5/02-concepts/05-logging.md#2025-04-16_snippet_1

LANGUAGE: dart
CODE:
session.log(
  'Oops, something went wrong',
  level: LogLevel.warning,
  exception: e,
  stackTrace: stackTrace,
);

----------------------------------------

TITLE: Configuring Serverpod using Dart Configuration Object
DESCRIPTION: Example of configuring Serverpod programmatically using the ServerpodConfig class in Dart. Shows how to set up API server, insights server, and web server configurations.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/07-configuration.md#2025-04-16_snippet_2

LANGUAGE: dart
CODE:
Serverpod(
  args,
  Protocol(),
  Endpoints(),
  config: ServerpodConfig(
    apiServer: ServerConfig(
      port: 8080,
      publicHost: 'localhost',
      publicPort: 8080,
      publicScheme: 'http',
    ),
    insightsServer: ServerConfig(
      port: 8081,
      publicHost: 'localhost',
      publicPort: 8081,
      publicScheme: 'http',
    ),
    webServer: ServerConfig(
      port: 8082,
      publicHost: 'localhost',
      publicPort: 8082,
      publicScheme: 'http',
    ),
  ),
);

----------------------------------------

TITLE: Implementing OAuth Bearer Token Authentication in Serverpod
DESCRIPTION: Example of implementing a custom authentication scheme using OAuth Bearer tokens, including both client-side key manager and server-side handler.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/11-authentication/05-custom-overrides.md#2025-04-16_snippet_6

LANGUAGE: dart
CODE:
class MyOAuthKeyManager extends AuthenticationKeyManager {
  String? _key;

  @override
  Future<String?> get() async {
    return _key;
  }

  @override
  Future<void> put(String key) async {
    _key = key;
  }

  @override
  Future<void> remove() async {
    _key = null;
  }

  @override
  Future<String?> toHeaderValue(String? key) async {
    if (key == null) return null;
    return 'Bearer ${myBearerTokenObtainer(key)}';
  }
}


var client = Client('http://$localhost:8080/',
    authenticationKeyManager: SimpleAuthKeyManager())
  ..connectivityMonitor = FlutterConnectivityMonitor();

LANGUAGE: dart
CODE:
// Initialize Serverpod and connect it with your generated code.
final pod = Serverpod(
  args,
  Protocol(),
  Endpoints(),
  authenticationHandler: (Session session, String token) async {
    /// Bearer token validation handler
    var (uid, scopes) = myBearerTokenValidator(token)
    if (uid == null) return null;

    return AuthenticationInfo(uid, scopes);
  },
);

----------------------------------------

TITLE: Optimizing Database Connections in Serverpod Tests
DESCRIPTION: Example showing how to delay database connection creation until tests are running by moving session building to setUpAll instead of the top level scope. This helps avoid exceeding database connection limits in environments with many CPU cores.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/19-testing/03-advanced-examples.md#2025-04-16_snippet_4

LANGUAGE: dart
CODE:
withServerpod('Given example test', (sessionBuilder, endpoints) {
  // Instead of this
  var session = sessionBuilder.build();


  // Do this to postpone connecting to the database until the test group is running
  late Session session;
  setUpAll(() {
    session = sessionBuilder.build();
  });
  // ...
});

----------------------------------------

TITLE: Updating a Single Row in Serverpod with Dart
DESCRIPTION: Updates an existing Company record in the database. The object must have its id set to a valid value. Returns the updated model object.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/06-database/05-crud.md#2025-04-16_snippet_6

LANGUAGE: dart
CODE:
var company = await Company.db.findById(session, companyId); // Fetched company has its id set 
company.name = 'New name';
var updatedCompany = await Company.db.updateRow(session, company);

----------------------------------------

TITLE: Implementing Delete Note Endpoint Method
DESCRIPTION: Method to delete a note from the database. This endpoint handles removing specific notes from persistent storage.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/05-tutorials/01-first-app.mdx#2025-04-16_snippet_10

LANGUAGE: dart
CODE:
Future<void> deleteNote(Session session, Note note) async {
  await Note.db.deleteRow(session, note);
}

----------------------------------------

TITLE: Defining Bidirectional One-to-one Relationship in Serverpod
DESCRIPTION: Demonstrates how to define a bidirectional one-to-one relationship where both sides of the relationship reference each other. The 'name' parameter connects the fields on both sides to the same relationship.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/06-database/03-relations/01-one-to-one.md#2025-04-16_snippet_6

LANGUAGE: yaml
CODE:
# user.yaml
class: User
table: user
fields:
  addressId: int
  address: Address?, relation(name=user_address, field=addressId)
indexes:
  user_address_unique_idx:
    fields: addressId
    unique: true

# address.yaml
class: Address
table: address
fields:
  street: String
  user: User?, relation(name=user_address)

----------------------------------------

TITLE: Batch Deleting Multiple Rows from the Database
DESCRIPTION: Deletes multiple Company records in a single atomic operation. If any deletion fails, no entries will be deleted.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/06-database/05-crud.md#2025-04-16_snippet_11

LANGUAGE: dart
CODE:
var companiesDeleted = await Company.db.delete(session, companies);

----------------------------------------

TITLE: Finding a Database Row by ID in Serverpod
DESCRIPTION: Example of finding a company record in the database by its ID using the generated findById method.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.1.1/01-get-started.md#2025-04-16_snippet_12

LANGUAGE: dart
CODE:
var myCompany = await Company.findById(session, companyId);

----------------------------------------

TITLE: Response Format from unsafeQuery with toColumnMap in Serverpod 2.0
DESCRIPTION: JSON example showing how to format results in Serverpod 2.0 using unsafeQuery with the toColumnMap method. This demonstrates the flattened structure that replaces the previous nested format.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/08-upgrading/03-upgrade-to-two.md#2025-04-16_snippet_7

LANGUAGE: json
CODE:
[
  {
    "company.id": 38,
    "company.name": "Apple",
    "company.townId": 62,
    "company_town_town.id": 62,
    "company_town_town.name": "San Francisco",
    "company_town_town.mayorId": null
  },
  {
    "company.id": 37,
    "company.name": "Serverpod",
    "company.townId": 61,
    "company_town_town.id": 61,
    "company_town_town.name": "Stockholm",
    "company_town_town.mayorId": null
  }
]

----------------------------------------

TITLE: Custom User Identification in Serverpod
DESCRIPTION: This code shows how to implement a custom user identification method by directly accessing the database. It uses the UserInfo model to find a user by their full name.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/11-authentication/04-providers/06-custom-providers.md#2025-04-16_snippet_1

LANGUAGE: dart
CODE:
var userInfo = await UserInfo.db.findFirstRow(
  session,
  where: (t) => t.fullName.equals(name),
);

----------------------------------------

TITLE: Signing Out User from All Devices in Dart with Serverpod
DESCRIPTION: This snippet demonstrates how to sign out a user from all devices using Serverpod's UserAuthentication class. It shows how to use the signOutUser method with an optional userId parameter.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/11-authentication/04-providers/06-custom-providers.md#2025-04-16_snippet_8

LANGUAGE: dart
CODE:
await UserAuthentication.signOutUser(
  session,
  userId: 123,  // Optional: If omitted, the currently authenticated user will be signed out
);

----------------------------------------

TITLE: Implementing fromJson() Factory Constructor for Custom Deserialization in Dart
DESCRIPTION: This snippet shows how to implement a fromJson() factory constructor for custom deserialization in Dart. It takes a JSON Map and constructs an object.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/03-serialization.md#2025-04-16_snippet_1

LANGUAGE: dart
CODE:
factory ClassName.fromJson(
Map<String, dynamic> json,
) {
return ClassName(
    name: json['name'] as String,
);
}

----------------------------------------

TITLE: Starting Serverpod Server
DESCRIPTION: Commands to start Docker containers and run the Serverpod server with migrations
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/01-get-started.md#2025-04-16_snippet_1

LANGUAGE: bash
CODE:
$ cd mypod/mypod_server
$ docker compose up --build --detach
$ dart bin/main.dart --apply-migrations

----------------------------------------

TITLE: Logical Operators in Serverpod Queries
DESCRIPTION: Shows how to combine multiple conditions using logical AND (&) and OR (|) operators.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/06-database/06-filter.md#2025-04-16_snippet_5

LANGUAGE: dart
CODE:
await User.db.find(
  where: (t) => (t.name.equals('Alice') & (t.age > 25))
);

LANGUAGE: dart
CODE:
await User.db.find(
  where: (t) => (t.name.like('A%') | t.name.like('B%'))
);

----------------------------------------

TITLE: Creating File Upload Description in Serverpod
DESCRIPTION: Server-side method that generates an upload description to grant access for client applications to upload files to the 'public' storage.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.0.0/04-concepts/08-file-uploads.md#2025-04-16_snippet_0

LANGUAGE: dart
CODE:
Future<String?> getUploadDescription(Session session, String path) async {
  return await session.storage.createDirectFileUploadDescription(
    storageId: 'public',
    path: path,
  );
}

----------------------------------------

TITLE: Requiring Authentication for Endpoints in Dart with Serverpod
DESCRIPTION: Shows how to restrict access to an endpoint to authenticated users by overriding the requireLogin property of the Endpoint class.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/11-authentication/02-basics.md#2025-04-16_snippet_1

LANGUAGE: dart
CODE:
class MyEndpoint extends Endpoint {
  @override
  bool get requireLogin => true;

  Future<void> myMethod(Session session) async {
    ...
  }
  ...
}

----------------------------------------

TITLE: Updating a Single Row in the Database
DESCRIPTION: Updates a Company record in the database. The object must have its id set to a non-null value and the id must exist in the database.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/06-database/05-crud.md#2025-04-16_snippet_6

LANGUAGE: dart
CODE:
var company = await Company.db.findById(session, companyId); // Fetched company has its id set 
company.name = 'New name';
var updatedCompany = await Company.db.updateRow(session, company);

----------------------------------------

TITLE: Implementing One-to-Many Self-Relation for Cat Family Tree in Serverpod
DESCRIPTION: Defines a Cat class with self-referential relationships to model mother-kitten relationships. Each cat can have one optional mother and multiple kittens, demonstrating a one-to-many relationship within the same table.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/06-database/03-relations/04-self-relations.md#2025-04-16_snippet_1

LANGUAGE: yaml
CODE:
class: Cat
table: cat
fields:
  name: String
  mother: Cat?, relation(name=cat_kittens, optional, onDelete=SetNull)
  kittens: List<Cat>?, relation(name=cat_kittens)

----------------------------------------

TITLE: Adding Delete Button to ListTile in Flutter
DESCRIPTION: Implementation of a delete button in a ListTile widget that removes a note from the UI immediately for responsiveness and then calls the server to delete it permanently.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/05-tutorials/01-first-app.mdx#2025-04-16_snippet_28

LANGUAGE: dart
CODE:
ListTile(
  ...
  trailing: IconButton(
    icon: const Icon(Icons.delete),
    onPressed: () {
      var note = _notes![index];

      setState(() {
        _notes!.remove(note);
      });

      _deleteNote(note);
    },
  ),
),

----------------------------------------

TITLE: Defining Serializable Class Structure in YAML
DESCRIPTION: Example of defining a Company class structure using Serverpod's native YAML serialization format. Shows field definitions with various types including String, DateTime, and List relationships.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.20/04-concepts/02-serialization.md#2025-04-16_snippet_0

LANGUAGE: yaml
CODE:
class: Company
fields:
  name: String
  foundedDate: DateTime?
  employees: List<Employee>

----------------------------------------

TITLE: Catching a Serializable Exception in the Client
DESCRIPTION: Shows how to catch a serializable exception in the client application. This pattern allows for specific handling of custom exceptions while still having a fallback for unexpected errors.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.1.0/04-concepts/04-exceptions.md#2025-04-16_snippet_2

LANGUAGE: dart
CODE:
try {
  client.example.doThingy();
}
on (MyException) catch(e) {
  print(e.message);
}
catch(e) {
  print('Something else went wrong.');
}

----------------------------------------

TITLE: Configuring Serverpod using YAML
DESCRIPTION: Example YAML configuration file for Serverpod, including settings for API server, insights server, web server, database, Redis, and session logs.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/07-configuration.md#2025-04-16_snippet_0

LANGUAGE: yaml
CODE:
apiServer:
  port: 8080
  publicHost: localhost
  publicPort: 8080
  publicScheme: http

insightsServer:
  port: 8081
  publicHost: localhost
  publicPort: 8081
  publicScheme: http

webServer:
  port: 8082
  publicHost: localhost
  publicPort: 8082
  publicScheme: http

database:
  host: localhost
  port: 8090
  name: database_name
  user: postgres

redis:
  enabled: false
  host: localhost
  port: 8091

maxRequestSize: 524288

sessionLogs:
  persistentEnabled: true
  consoleEnabled: true

----------------------------------------

TITLE: Executing Raw SQL Queries in Dart with Serverpod
DESCRIPTION: This Dart snippet demonstrates how to execute raw SQL queries in Serverpod for more advanced database tasks. It uses the 'query' method to run a custom SQL statement.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.21/04-concepts/03-database-communication.md#2025-04-16_snippet_14

LANGUAGE: dart
CODE:
var result = await session.db.query('SELECT * FROM mytable WHERE ...');

----------------------------------------

TITLE: Throwing Custom Exception in Serverpod Endpoint (Dart)
DESCRIPTION: This Dart code snippet shows how to throw a custom exception 'MyException' within a Serverpod endpoint. It demonstrates error handling in server-side code, allowing detailed error information to be passed to the client.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/04-exceptions.md#2025-04-16_snippet_1

LANGUAGE: dart
CODE:
class ExampleEndpoint extends Endpoint {
  Future<void> doThingy(Session session) {
    // ... do stuff ...
    if (failure) {
      throw MyException(
        message: 'Failed to do thingy',
        errorType: MyEnum.thingyError,
      );
    }
  }
}

----------------------------------------

TITLE: Using Database Transactions in Dart
DESCRIPTION: Dart code demonstrating how to use database transactions in Serverpod. The transaction method ensures that multiple database operations are executed atomically, with all changes committed or rolled back together.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.1.1/05-concepts/05-database-communication.md#2025-04-16_snippet_15

LANGUAGE: dart
CODE:
var result = await session.db.transaction((transaction) async {
  // Do some database queries here.

  // Optionally return a value.
  return true;
});

----------------------------------------

TITLE: Implementing Custom Health Check Handler in Dart for Serverpod
DESCRIPTION: This snippet demonstrates how to create a custom health check handler function in Dart for Serverpod. It returns a list of ServerHealthMetric objects, which include information such as metric name, server ID, timestamp, health status, and value.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/05-concepts/12-health-checks.md#2025-04-16_snippet_0

LANGUAGE: dart
CODE:
Future<List<ServerHealthMetric>> myHealthCheckHandler(
    Serverpod pod, DateTime timestamp) async {
  // Actually perform some checks.

  // Return a list of health metrics for the given timestamp.
  return [
    ServerHealthMetric(
      name: 'MyMetric',
      serverId: pod.serverId,
      timestamp: timestamp,
      isHealthy: true,
      value: 1.0,
    ),
  ];
}

----------------------------------------

TITLE: Implementing Apple Sign-In Button in Flutter
DESCRIPTION: Implementation of the SignInWithAppleButton widget that provides a native-looking Apple sign-in button and handles the authentication flow.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/11-authentication/04-providers/03-apple.md#2025-04-16_snippet_1

LANGUAGE: dart
CODE:
import 'package:serverpod_auth_email_flutter/serverpod_auth_email_flutter.dart';

SignInWithAppleButton(
  caller: client.modules.auth,
);

----------------------------------------

TITLE: Database Method Migration Examples
DESCRIPTION: Examples showing the migration from old database methods to new ones under the db namespace, including find, delete, update, and insert operations.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/12-upgrading/02-upgrade-to-one-point-two.md#2025-04-16_snippet_3

LANGUAGE: dart
CODE:
// The new find method is a drop-in replacement.
Example.find(...); // old
Example.db.find(...); // new

// The old findSingleRow method has changed name to findFirstRow but is otherwise a drop-in replacement.
Example.findSingleRow(...);
Example.db.findFirstRow(...);

// The new findById method is a drop-in replacement.
Example.findById(...); // old
Example.db.findById(...); // new

// The old delete method has been renamed to deleteWhere and now returns a list of ids of rows that was deleted.
Example.delete(...);
Example.db.deleteWhere(...);

// The new findById method is a drop-in replacement but returns the id of the row deleted.
Example.deleteRow(...); // old
Example.db.deleteRow(...); // new

// The old update method has been renamed too updateRow and now returns the entire updated object as a new copy.
Example.update(...);
Example.db.updateRow(...);

// The old insert method has been renamed too insertRow. The object you pass in is no longer modified, instead a new copy with the added row is returned which contains the inserted id. This means no mutations of the input object.
Example.insert(...);
Example.db.insertRow(...);

// The new count method is a drop-in replacement.
Example.count(...);
Example.db.count(...);

----------------------------------------

TITLE: Complete Custom Class Implementation
DESCRIPTION: Full implementation of a custom serializable class with required methods.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/05-concepts/03-serialization.md#2025-04-16_snippet_6

LANGUAGE: dart
CODE:
class ClassName {
  String name;
  ClassName(this.name);

  toJson() {
    return {
      'name': name,
    };
  }

  factory ClassName.fromJson(
    Map<String, dynamic> jsonSerialization,
  ) {
    return ClassName(
      jsonSerialization['name'],
    );
  }
}

----------------------------------------

TITLE: Adding a Message Listener in Serverpod (Dart)
DESCRIPTION: This snippet demonstrates how to add a listener to a specific channel using the addListener method. The callback function will be invoked whenever a message is posted to the channel, whether published locally or globally.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/16-server-events.md#2025-04-16_snippet_4

LANGUAGE: dart
CODE:
session.messages.addListener('user_updates', (message) {
  print('Received message: $message');
});

----------------------------------------

TITLE: Creating User Account Request
DESCRIPTION: Initiating user signup by sending a validation email with a verification code. This triggers the backend to send an email with the validation code to the user.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/11-authentication/04-providers/01-email.md#2025-04-16_snippet_5

LANGUAGE: dart
CODE:
await authController.createAccountRequest(userName, email, password);

----------------------------------------

TITLE: Querying Users with Logical AND Operator in Dart
DESCRIPTION: This snippet illustrates how to use the logical AND operator to fetch all users named 'Alice' who are older than 25 from the database.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/06-database/06-filter.md#2025-04-16_snippet_14

LANGUAGE: dart
CODE:
await User.db.find(
  where: (t) => (t.name.equals('Alice') & (t.age > 25))
);

----------------------------------------

TITLE: Creating Enums with Name-Based Serialization in Serverpod
DESCRIPTION: Shows how to define an enum with name-based serialization, which is less fragile when adding or removing enum values since it uses string names rather than index positions.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/02-models.md#2025-04-16_snippet_5

LANGUAGE: yaml
CODE:
enum: Animal
serialized: byName
values:
 - dog
 - cat
 - bird

----------------------------------------

TITLE: Retrieving User ID from Authenticated Session in Dart
DESCRIPTION: This snippet demonstrates how to retrieve the user ID of a signed-in user through the session object in a Serverpod application.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/11-authentication/03-working-with-users.md#2025-04-16_snippet_0

LANGUAGE: dart
CODE:
var userId = (await session.authenticated)?.userId;

----------------------------------------

TITLE: Batch Inserting Multiple Rows in Dart
DESCRIPTION: Demonstrates how to insert multiple company records in a single atomic operation.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/06-database/05-crud.md#2025-04-16_snippet_2

LANGUAGE: dart
CODE:
var rows = [Company(name: 'Serverpod'), Company(name: 'Google')];
var companies = await Company.db.insert(session, rows);

----------------------------------------

TITLE: Using flushEventQueue with Generator Functions in Dart
DESCRIPTION: Shows a practical example of using flushEventQueue to ensure a generator function has executed up to a specific yield point when testing stream-based endpoints.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/19-testing/02-the-basics.md#2025-04-16_snippet_7

LANGUAGE: dart
CODE:
var stream = endpoints.someEndoint.generatorFunction(session);
await flushEventQueue();

----------------------------------------

TITLE: Implementing Create Note Endpoint Method
DESCRIPTION: Method to create a new note in the database. This endpoint handles storing notes received from the client into the database.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/05-tutorials/01-first-app.mdx#2025-04-16_snippet_9

LANGUAGE: dart
CODE:
Future<void> createNote(Session session, Note note) async {
  await Note.db.insertRow(session, note);
}

----------------------------------------

TITLE: Implementing Image Updates Stream
DESCRIPTION: Stream method that provides real-time image updates to connected clients, starting with full image data followed by individual pixel updates
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/05-tutorials/02-real-time-communication.md#2025-04-16_snippet_5

LANGUAGE: dart
CODE:
Stream imageUpdates(Session session) async* {
  var updateStream =
      session.messages.createStream<ImageUpdate>(_channelPixelAdded);

  yield ImageData(
    pixels: _pixelData.buffer.asByteData(),
    width: _imageWidth,
    height: _imageHeight,
  );

  await for (var imageUpdate in updateStream) {
    yield imageUpdate;
  }
}

----------------------------------------

TITLE: Throwing a Custom Exception in Server Endpoint
DESCRIPTION: Server-side code demonstrating how to throw a custom exception from an endpoint method. This allows passing structured error data back to the client when a failure occurs.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/04-exceptions.md#2025-04-16_snippet_1

LANGUAGE: dart
CODE:
class ExampleEndpoint extends Endpoint {
  Future<void> doThingy(Session session) {
    // ... do stuff ...
    if (failure) {
      throw MyException(
        message: 'Failed to do thingy',
        errorType: MyEnum.thingyError,
      );
    }
  }
}

----------------------------------------

TITLE: Adding Message Listener in Serverpod
DESCRIPTION: Demonstrates how to add a listener to a channel that will be called whenever a message is posted.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/16-server-events.md#2025-04-16_snippet_4

LANGUAGE: dart
CODE:
session.messages.addListener('user_updates', (message) {
  print('Received message: $message');
});

----------------------------------------

TITLE: Batch Inserting Multiple Rows in Serverpod
DESCRIPTION: Inserts multiple Company records to the database in a single atomic operation using the insert method. If any insertion fails, no records will be created.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/06-database/05-crud.md#2025-04-16_snippet_2

LANGUAGE: dart
CODE:
var rows = [Company(name: 'Serverpod'), Company(name: 'Google')];
var companies = await Company.db.insert(session, rows);

----------------------------------------

TITLE: Creating a Custom Health Check Handler in Dart
DESCRIPTION: This snippet demonstrates how to create a custom health check handler function that returns health metrics. The handler takes a Serverpod instance and timestamp as parameters, performs checks, and returns a list of ServerHealthMetric objects with custom measurements.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.1.1/05-concepts/12-health-checks.md#2025-04-16_snippet_0

LANGUAGE: dart
CODE:
// Create your custom health metric handler.
Future<List<ServerHealthMetric>> myHealthCheckHandler(
    Serverpod pod, DateTime timestamp) async {
  // Actually perform some checks.

  // Return a list of health metrics for the given timestamp.
  return [
    ServerHealthMetric(
      name: 'MyMetric',
      serverId: pod.serverId,
      timestamp: timestamp,
      isHealthy: true,
      value: 1.0,
    ),
  ];
}

----------------------------------------

TITLE: Creating a Future Call Class in Dart
DESCRIPTION: Demonstrates how to create a custom future call class by extending FutureCall and implementing the invoke method. The class can optionally accept a SerializableModel parameter.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/14-scheduling.md#2025-04-16_snippet_0

LANGUAGE: dart
CODE:
import 'package:serverpod/serverpod.dart';

class ExampleFutureCall extends FutureCall<MyModelEntity> {
  @override
  Future<void> invoke(Session session, MyModelEntity? object) async {
    // Do something interesting in the future here.
  }
}

----------------------------------------

TITLE: Bulk Attaching Rows in Serverpod
DESCRIPTION: Demonstrates how to link multiple employees to a company in a single operation.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/06-database/07-relation-queries.md#2025-04-16_snippet_10

LANGUAGE: dart
CODE:
var company = await Company.db.findById(session, companyId);
var employee = await Employee.db.findById(session, employeeId);

await Company.db.attach.employees(session, company!, [employee!]);

----------------------------------------

TITLE: Creating a Serverpod Endpoint
DESCRIPTION: Example of defining an endpoint in Serverpod that extends the Endpoint class and implements a method that can be called from the client.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/01-get-started.md#2025-04-16_snippet_5

LANGUAGE: dart
CODE:
import 'package:serverpod/serverpod.dart';

class ExampleEndpoint extends Endpoint {
  Future<String> hello(Session session, String name) async {
    return 'Hello $name';
  }
}

----------------------------------------

TITLE: Caching with CacheMissHandler in Serverpod
DESCRIPTION: Enhanced version of the caching implementation using CacheMissHandler for more elegant cache miss handling. Shows how to automatically handle cache misses and update the cache when needed.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/08-caching.md#2025-04-16_snippet_1

LANGUAGE: dart
CODE:
Future<UserData> getUserData(Session session, int userId) async {
  // Define a unique key for the UserData object
  var cacheKey = 'UserData-$userId';

  // Try to retrieve the object from the cache
  var userData = await session.caches.local.get(
    cacheKey,
    // If the object wasn't found in the cache, load it from the database and
    // save it in the cache. Make it valid for 5 minutes.
    CacheMissHandler(
      () async => UserData.db.findById(session, userId),
      lifetime: Duration(minutes: 5),
    ),
    );

  // Return the user data to the client
  return userData;
}

----------------------------------------

TITLE: Stream Communication Endpoint Implementation
DESCRIPTION: Example endpoint class implementing shared stream communication between users. Shows methods for posting numbers and listening to the stream.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/19-testing/03-advanced-examples.md#2025-04-16_snippet_2

LANGUAGE: dart
CODE:
class CommunicationExampleEndpoint {
  static const sharedStreamName = 'shared-stream';
  Future<void> postNumberToSharedStream(Session session, int number) async {
    await session.messages
        .postMessage(sharedStreamName, SimpleData(num: number));
  }

  Stream<int> listenForNumbersOnSharedStream(Session session) async* {
    var sharedStream =
        session.messages.createStream<SimpleData>(sharedStreamName);

    await for (var message in sharedStream) {
      yield message.num;
    }
  }
}

----------------------------------------

TITLE: Defining a Company Model with Database Table in YAML
DESCRIPTION: This snippet demonstrates how to define a Company model with a corresponding database table using YAML. It includes a 'name' field of type String and automatically adds an 'id' field.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/06-database/02-models.md#2025-04-16_snippet_0

LANGUAGE: yaml
CODE:
class: Company
table: company
fields:
  name: String

----------------------------------------

TITLE: Creating Expressions for Database Queries in Serverpod
DESCRIPTION: This code snippet shows various examples of creating expressions for database queries in Serverpod, including equality checks, date comparisons, and combined conditions.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.8/03-concepts/03-database-communication.md#2025-04-16_snippet_9

LANGUAGE: dart
CODE:
// The name column of the Company table equals 'My company')
t.name.equals('My company')

// Companies founded at or after 2020
t.foundedDate >= DateTime.utc(2020)

// Companies with number of employees between 10 and 100
(t.numEmployees > 10) & (t.numEmployees <= 100)

// Companies that has the founded date set
t.foundedDate.notEquals(null)

----------------------------------------

TITLE: Signing Out the Currently Authenticated User
DESCRIPTION: This snippet shows how to sign out the currently authenticated user from all devices without specifying a user ID.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/11-authentication/04-providers/06-custom-providers.md#2025-04-16_snippet_9

LANGUAGE: dart
CODE:
// Sign out the currently authenticated user
await UserAuthentication.signOutUser(
  session,  // No userId provided, signs out the current user
);

----------------------------------------

TITLE: Registering Health Check Handler with Serverpod
DESCRIPTION: Shows how to register a custom health check handler when initializing a Serverpod instance. The handler is passed as a parameter during Serverpod object creation.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/13-health-checks.md#2025-04-16_snippet_1

LANGUAGE: dart
CODE:
final pod = Serverpod(
    args,
    Protocol(),
    Endpoints(),
    healthCheckHandler: myHealthCheckHandler,
  );

----------------------------------------

TITLE: Explicit One-to-Many Relationship Definition Using Foreign Key in Serverpod
DESCRIPTION: Defines a one-to-many relationship explicitly by adding a companyId field on the Employee (many) side with the relation keyword. This approach uses a direct foreign key reference rather than an object relation.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/06-database/03-relations/02-one-to-many.md#2025-04-16_snippet_2

LANGUAGE: yaml
CODE:
# company.yaml
class: Company
table: company
fields:
  name: String

# employee.yaml
class: Employee
table: employee
fields:
  name: String
  companyId: int, relation

----------------------------------------

TITLE: Registering Health Check Handler in Serverpod
DESCRIPTION: Demonstrates how to register a custom health check handler when initializing a Serverpod instance. The handler will be called automatically every minute to perform configured health checks.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/05-concepts/12-health-checks.md#2025-04-16_snippet_1

LANGUAGE: dart
CODE:
final pod = Serverpod(
    args,
    Protocol(),
    Endpoints(),
    healthCheckHandler: myHealthCheckHandler,
  );

----------------------------------------

TITLE: Retrieving File Data from Storage
DESCRIPTION: Server-side code to directly retrieve file data from storage as ByteData.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/12-file-uploads.md#2025-04-16_snippet_6

LANGUAGE: dart
CODE:
var myByteData = await session.storage.retrieveFile(
  storageId: 'public',
  path: 'my/file/path',
);

----------------------------------------

TITLE: Adding Test Database and Redis Services to Docker Compose
DESCRIPTION: Docker Compose configuration for adding dedicated PostgreSQL and Redis test instances. These instances run on separate ports (9090 and 9091) to avoid conflicts with development instances.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/19-testing/01-get-started.md#2025-04-16_snippet_1

LANGUAGE: yaml
CODE:
# Add to the existing services
postgres_test:
  image: postgres:16.3
  ports:
    - '9090:5432'
  environment:
    POSTGRES_USER: postgres
    POSTGRES_DB: <projectname>_test
    POSTGRES_PASSWORD: "<insert database test password>"
  volumes:
    - <projectname>_test_data:/var/lib/postgresql/data
redis_test:
  image: redis:6.2.6
  ports:
    - '9091:6379'
  command: redis-server --requirepass 'REDIS_TEST_PASSWORD'
  environment:
    - REDIS_REPLICATION_MODE=master
volumes:
  # ...
  <projectname>_test_data:

----------------------------------------

TITLE: Using Named and Positional Parameters in Raw SQL Queries in Dart
DESCRIPTION: Demonstrates both named and positional parameter binding approaches for safe SQL query execution to prevent SQL injection.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/06-database/10-raw-access.md#2025-04-16_snippet_4

LANGUAGE: dart
CODE:
// Named parameters
var result = await db.unsafeQuery(
  r'SELECT id FROM apparel WHERE color = @color AND size = @size',
  QueryParameters.named({
    'color': 'green',
    'size': 'XL',
  }));

// Positional parameters
var result = await db.unsafeQuery(
  r'SELECT id FROM apparel WHERE color = $1 AND size = $2',
  QueryParameters.positional(['green', 'XL']),
);

----------------------------------------

TITLE: Defining One-to-Many Self-Relation for Cat Genealogy in Serverpod YAML
DESCRIPTION: This snippet shows how to create a one-to-many self-referential relationship for cat genealogy, modeling the relationship between a cat and her kittens. It includes optional relations and handles null values for cats without a mother.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/06-database/03-relations/04-self-relations.md#2025-04-16_snippet_1

LANGUAGE: yaml
CODE:
class: Cat
table: cat
fields:
  name: String
  mother: Cat?, relation(name=cat_kittens, optional, onDelete=SetNull)
  kittens: List<Cat>?, relation(name=cat_kittens)

----------------------------------------

TITLE: Applying Repair Migration Using Maintenance Role in Serverpod (Bash)
DESCRIPTION: This command applies a repair migration using the maintenance role in Serverpod. It uses both --role maintenance and --apply-repair-migration flags. The server exits after applying migrations, with a success or failure exit code.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/06-database/11-migrations.md#2025-04-16_snippet_12

LANGUAGE: bash
CODE:
$ dart run bin/main.dart --role maintenance --apply-repair-migration

----------------------------------------

TITLE: Defining a Streaming Method in Dart for Serverpod
DESCRIPTION: Demonstrates how to define a streaming method in a Serverpod endpoint that echoes back any message received. The method uses Stream as both input and output.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/15-streams.md#2025-04-16_snippet_0

LANGUAGE: dart
CODE:
class ExampleEndpoint extends Endpoint {
  Stream echoStream(Session session, Stream stream) async* {
    await for (var message in stream) {
      yield message;
    }
  }
}

----------------------------------------

TITLE: Creating Custom Scopes in Dart for Serverpod Authorization
DESCRIPTION: Explains how to create and use custom scopes for more granular access control in Serverpod endpoints.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/11-authentication/02-basics.md#2025-04-16_snippet_3

LANGUAGE: dart
CODE:
class CustomScope extends Scope {
  const CustomScope(String name) : super(name);

  static const userRead = CustomScope('userRead');
  static const userWrite = CustomScope('userWrite');
}

LANGUAGE: dart
CODE:
class MyEndpoint extends Endpoint {
  @override
  bool get requireLogin => true;

  @override
  Set<Scope> get requiredScopes => {CustomScope.userRead, CustomScope.userWrite};

  Future<void> myMethod(Session session) async {
    ...
  }
  ...
}

----------------------------------------

TITLE: Implementing Password Reset in Serverpod
DESCRIPTION: This Dart snippet demonstrates how to initiate and complete a password reset process using the EmailAuthController.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/11-authentication/04-providers/01-email.md#2025-04-16_snippet_7

LANGUAGE: dart
CODE:
await authController.initiatePasswordReset(email);

await authController.resetPassword(email, verificationCode, password);

----------------------------------------

TITLE: Verifying File Upload in Serverpod
DESCRIPTION: Server-side code to verify completion of file upload. Essential for confirming successful uploads, especially when using third-party services like S3 or Google Cloud Storage.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/12-file-uploads.md#2025-04-16_snippet_1

LANGUAGE: dart
CODE:
Future<bool> verifyUpload(Session session, String path) async {
  return await session.storage.verifyDirectFileUpload(
    storageId: 'public',
    path: path,
  );
}

----------------------------------------

TITLE: Including Nested Lists in Serverpod Query (Dart)
DESCRIPTION: Shows how to include lists within lists in a Serverpod query. This example retrieves a company with all related employees, each including their list of tools.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/05-concepts/06-database/07-relation-queries.md#2025-04-16_snippet_5

LANGUAGE: dart
CODE:
var user = await Company.db.findById(
  session,
  employeeId,
  include: Company.include(
    employees: Employee.includeList(
      includes: Employee.include(
        tools: Tool.includeList(),
      ),
    ),
  ),
);

----------------------------------------

TITLE: Implementing Pixel Update Method
DESCRIPTION: Server method to handle pixel updates and broadcast changes to connected clients
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/05-tutorials/02-real-time-communication.md#2025-04-16_snippet_4

LANGUAGE: dart
CODE:
Future<void> setPixel(
  Session session, {
    required int colorIndex,
    required int pixelIndex,
  }) async {
    if (colorIndex < 0 || colorIndex >= _numColorsInPalette) {
      throw FormatException('colorIndex is out of range: $colorIndex');
    }
    if (pixelIndex < 0 || pixelIndex >= _numPixels) {
      throw FormatException('pixelIndex is out of range: $pixelIndex');
    }

    _pixelData[pixelIndex] = colorIndex;

    session.messages.postMessage(
      _channelPixelAdded,
      ImageUpdate(
        pixelIndex: pixelIndex,
        colorIndex: colorIndex,
      ),
    );
  }

----------------------------------------

TITLE: Connecting User with Custom Authentication in Dart
DESCRIPTION: This snippet demonstrates how to find or create a user in Serverpod's authentication system using email or a unique identifier. It utilizes the Users class methods to handle user management.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/11-authentication/04-providers/06-custom-providers.md#2025-04-16_snippet_0

LANGUAGE: dart
CODE:
UserInfo? userInfo;
userInfo = await Users.findUserByEmail(session, email);
userInfo ??= await Users.findUserByIdentifier(session, userIdentifier);
if (userInfo == null) {
  userInfo = UserInfo(
    userIdentifier: userIdentifier,
    userName: name,
    email: email,
    blocked: false,
    created: DateTime.now().toUtc(),
    scopeNames: [],
  );
  userInfo = await Users.createUser(session, userInfo, _authMethod);
}

----------------------------------------

TITLE: Implementing Custom Password Hash Generator in Serverpod
DESCRIPTION: This Dart snippet shows how to override the default password hash generator and validator in the AuthConfig.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/11-authentication/04-providers/01-email.md#2025-04-16_snippet_7

LANGUAGE: dart
CODE:
AuthConfig(
  passwordHashValidator: (
    password,
    email,
    hash, {
      onError,
      onValidationFailure,
    },
  ) {
  // Custom hash validator.
  },
  passwordHashGenerator: (password) {
  // Custom hash generator.
  },
)

----------------------------------------

TITLE: Implementing User Data Caching in Dart with Serverpod
DESCRIPTION: Example of a method that retrieves user data with caching implementation. The code demonstrates how to check for cached data, fetch from database if not cached, and store in cache with a specified lifetime.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.9/03-concepts/04-caching.md#2025-04-16_snippet_0

LANGUAGE: dart
CODE:
Future<UserData> getUserData(Session session, int userId) async {
  // Define a unique key for the UserData object
  var cacheKey = 'UserData-$userId';

  // Try to retrieve the object from the cache
  var userData = await session.caches.local.get(cacheKey) as UserData?;

  // If the object wasn't found in the cache, load it from the database and
  // save it in the cache. Make it valid for 5 minutes.
  if (userData == null) {
    userData = session.db.findById(tUserData, userId) as UserData?;
    await session.caches.local.put(cacheKey, userData!, lifetime: Duration(minutes: 5));
  }

  // Return the user data to the client
  return userData;
}

----------------------------------------

TITLE: Create and Apply Database Migration
DESCRIPTION: Terminal commands to create and apply database migrations for the auth module.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/11-authentication/01-setup.md#2025-04-16_snippet_3

LANGUAGE: bash
CODE:
$ serverpod create-migration

LANGUAGE: bash
CODE:
$ docker-compose up --build --detach

LANGUAGE: bash
CODE:
$ dart run bin/main.dart --role maintenance --apply-migrations

----------------------------------------

TITLE: Client-side File Upload Implementation
DESCRIPTION: Client-side code demonstrating the complete file upload process including getting upload description, uploading file, and verification.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.8/03-concepts/08-file-uploads.md#2025-04-16_snippet_2

LANGUAGE: dart
CODE:
var uploadDescription = await client.myEndpoint.getUploadDescription('myfile');
if (uploadDescription != null) {
  var uploader = FileUploader(uploadDescription);
  await uploader.upload(myStream);
  var success = await client.myEndpoint.verifyUpload('myfile');
}

----------------------------------------

TITLE: Company Model with One-to-Many Employee Relation in Serverpod
DESCRIPTION: This example shows the Company model that creates a one-to-many relationship with the User model from the previous example. It uses a named relation to connect with the User model through the company_employee relation.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/06-database/03-relations/06-modules.md#2025-04-16_snippet_3

LANGUAGE: yaml
CODE:
class: Company
table: company
fields:
  name: String
  employees: List<User>?, relation(name=company_employee)

----------------------------------------

TITLE: Database Table Mapping Configuration
DESCRIPTION: YAML configuration for mapping a Company class to a database table with field definitions.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/01-get-started.md#2025-04-16_snippet_11

LANGUAGE: yaml
CODE:
class: Company
table: company
fields:
  name: String
  foundedDate: DateTime?

----------------------------------------

TITLE: Implementing a Logout Endpoint in Serverpod
DESCRIPTION: This snippet demonstrates how to create an authenticated endpoint with a logout method that signs out the current user from all devices.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/11-authentication/04-providers/06-custom-providers.md#2025-04-16_snippet_10

LANGUAGE: dart
CODE:
class AuthenticatedEndpoint extends Endpoint {
  @override
  bool get requireLogin => true;

  Future<void> logout(Session session) async {
    await UserAuthentication.signOutUser(session);
  }
}

----------------------------------------

TITLE: Catching Serializable Exception in Dart Client Code
DESCRIPTION: This Dart code snippet shows how to catch a serializable exception (MyException) in the client app. It demonstrates a try-catch block that handles both the specific exception and general exceptions.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/05-concepts/04-exceptions.md#2025-04-16_snippet_2

LANGUAGE: dart
CODE:
try {
  client.example.doThingy();
}
on MyException catch(e) {
  print(e.message);
}
catch(e) {
  print('Something else went wrong.');
}

----------------------------------------

TITLE: Logging an Exception with Custom Level in Serverpod (Dart)
DESCRIPTION: This example shows how to log a message with a custom log level, along with an exception and stack trace. This is useful for logging warnings or errors with additional context.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/05-concepts/08-logging.md#2025-04-16_snippet_1

LANGUAGE: dart
CODE:
session.log(
  'Oops, something went wrong',
  level: LogLevel.warning,
  exception: e,
  stackTrace: stackTrace,
);

----------------------------------------

TITLE: Implementing SignInWithGoogleButton with Server Client ID
DESCRIPTION: Use the SignInWithGoogleButton widget with the server client ID and redirect URI to enable Google Sign-In functionality in your Flutter app.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.1.1/05-concepts/09-authentication/04-providers/02-google.md#2025-04-16_snippet_3

LANGUAGE: dart
CODE:
import 'package:serverpod_auth_google_flutter/serverpod_auth_google_flutter.dart';


SignInWithGoogleButton(
  caller: client.modules.auth,
  serverClientId: _googleServerClientId, // needs to be supplied for the web integration
  redirectUri: Uri.parse('http://localhost:8082/googlesignin'),
)

----------------------------------------

TITLE: Implementing Google Sign-In Button in Flutter
DESCRIPTION: Flutter implementation of the Google Sign-In button widget with basic configuration.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/11-authentication/04-providers/02-google.md#2025-04-16_snippet_2

LANGUAGE: dart
CODE:
import 'package:serverpod_auth_google_flutter/serverpod_auth_google_flutter.dart';


SignInWithGoogleButton(
  caller: client.modules.auth,
  serverClientId: _googleServerClientId, // needs to be supplied for the web integration
  redirectUri: Uri.parse('http://localhost:8082/googlesignin'),
)

----------------------------------------

TITLE: Building the Pixel Editor Interface with Server Communication
DESCRIPTION: Implementing the build method to render the PixelEditor UI. It displays a loading indicator while waiting for the image data, and once loaded, renders the pixel editor that sends updates to the server when pixels are modified.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/05-tutorials/02-real-time-communication.md#2025-04-16_snippet_11

LANGUAGE: dart
CODE:
// lib/src/pixorama.dart

class _PixoramaState extends State<Pixorama> {
  // ...

  @override
  Widget build(BuildContext context) {
    return Center(
      child: _imageController == null
          ? const CircularProgressIndicator()
          : PixelEditor(
              controller: _imageController!,
              onSetPixel: (details) {
                // When a user clicks a pixel we will get a callback from the
                // PixelImageController, with information about the changed
                // pixel. When that happens we call the setPixels method on
                // the server.
                client.pixorama.setPixel(
                  pixelIndex: details.tapDetails.index,
                  colorIndex: details.colorIndex,
                );
              },
            ),
    );
  }
}

----------------------------------------

TITLE: Defining Bidirectional One-to-many Relationship with Object Relation in Serverpod YAML
DESCRIPTION: This example demonstrates how to define a bidirectional one-to-many relationship using object relations in Serverpod's YAML configuration. Both Company and Employee classes include relation fields with a shared name parameter to link them together.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/05-concepts/06-database/03-relations/02-one-to-many.md#2025-04-16_snippet_3

LANGUAGE: yaml
CODE:
# company.yaml
class: Company
table: company
fields:
  name: String
  employees: List<Employee>?, relation(name=company_employees)

# employee.yaml
class: Employee
table: employee
fields:
  name: String
  company: Company?, relation(name=company_employees)

----------------------------------------

TITLE: Rolling Back to Savepoints in Transactions
DESCRIPTION: Shows how to roll back a transaction to a previously created savepoint, preserving changes made before the savepoint while discarding subsequent changes.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/06-database/08-transactions.md#2025-04-16_snippet_3

LANGUAGE: dart
CODE:
await session.db.transaction((transaction) async {
  // Changes preserved in the database
  await Company.db.insertRow(session, company, transaction: transaction);
  
  // Create savepoint
  var savepoint = await transaction.createSavepoint();

  await Employee.db.insertRow(session, employee, transaction: transaction);
  // Changes rolled back 
  await savepoint.rollback();
});

----------------------------------------

TITLE: Creating an Exception Model in YAML for Serverpod
DESCRIPTION: This example demonstrates how to define a custom exception model in Serverpod using YAML. It includes fields for the exception message and an enum type.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/02-models.md#2025-04-16_snippet_3

LANGUAGE: yaml
CODE:
exception: MyException
fields:
  message: String
  errorType: MyEnum

----------------------------------------

TITLE: Converting String Scopes to Scope Objects in Dart
DESCRIPTION: Shows how to extract scopes from a token and convert them into Scope objects that can be used for endpoint authorization in Serverpod.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/11-authentication/05-custom-overrides.md#2025-04-16_snippet_1

LANGUAGE: dart
CODE:
List<String> scopes = extractScopes(token);
Set<Scope> userScopes = scopes.map((scope) => Scope(scope)).toSet();

----------------------------------------

TITLE: Converting String Scopes to Scope Objects
DESCRIPTION: Demonstrates how to convert string-based scopes from a JWT token into Serverpod Scope objects.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/11-authentication/05-custom-overrides.md#2025-04-16_snippet_1

LANGUAGE: dart
CODE:
List<String> scopes = extractScopes(token);
Set<Scope> userScopes = scopes.map((scope) => Scope(scope)).toSet();

----------------------------------------

TITLE: Selective Field Visibility in Serverpod YAML
DESCRIPTION: Demonstrates how to set different visibility scopes for individual fields within a class.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/02-models.md#2025-04-16_snippet_2

LANGUAGE: yaml
CODE:
class: SelectivelyHiddenClass
fields:
  hiddenSecretKey: String, scope=serverOnly
  publicKey: String

----------------------------------------

TITLE: Executing Multiple SQL Queries using Simple Query Protocol in Dart
DESCRIPTION: Demonstrates the use of unsafeSimpleQuery for executing multiple SQL statements in a single query. This method doesn't support parameter binding and should be used with caution.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/06-database/10-raw-access.md#2025-04-16_snippet_2

LANGUAGE: dart
CODE:
DatabaseResult result = await session.db.unsafeSimpleQuery(
    r'SELECT * FROM mytable WHERE id = 1; SELECT * FROM othertable;'
);

----------------------------------------

TITLE: Implementing Pixel Update Handler
DESCRIPTION: Method to validate and process pixel updates, broadcasting changes to all connected clients.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/05-tutorials/02-real-time-communication.md#2025-04-16_snippet_4

LANGUAGE: dart
CODE:
Future<void> setPixel(
  Session session, {
    required int colorIndex,
    required int pixelIndex,
  }) async {
    if (colorIndex < 0 || colorIndex >= _numColorsInPalette) {
      throw FormatException('colorIndex is out of range: $colorIndex');
    }
    if (pixelIndex < 0 || pixelIndex >= _numPixels) {
      throw FormatException('pixelIndex is out of range: $pixelIndex');
    }

    _pixelData[pixelIndex] = colorIndex;

    session.messages.postMessage(
      _channelPixelAdded,
      ImageUpdate(
        pixelIndex: pixelIndex,
        colorIndex: colorIndex,
      ),
    );
  }

----------------------------------------

TITLE: Defining Explicit One-to-Many Relationship with Object Relation in Serverpod
DESCRIPTION: This snippet demonstrates how to explicitly define a one-to-many relationship using an object relation on the 'many' side, where each Employee can reference one Company.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/06-database/03-relations/02-one-to-many.md#2025-04-16_snippet_1

LANGUAGE: yaml
CODE:
# company.yaml
class: Company
table: company
fields:
  name: String

# employee.yaml
class: Employee
table: employee
fields:
  name: String
  company: Company?, relation

----------------------------------------

TITLE: Using the Generated copyWith Method in Serverpod Models
DESCRIPTION: Example of using the automatically generated copyWith method to create a modified copy of an object while preserving other properties. This demonstrates creating a new user with an updated name.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/05-concepts/02-models.md#2025-04-16_snippet_7

LANGUAGE: dart
CODE:
var john = User(name: 'John Doe', age: 25);
var jane = john.copyWith(name: 'Jane Doe');

----------------------------------------

TITLE: Sorting Companies by Name in Dart using Serverpod
DESCRIPTION: This snippet demonstrates how to fetch all companies and sort them by their name in ascending order. It uses the 'find' method with the 'orderBy' parameter.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/05-concepts/06-database/08-sort.md#2025-04-16_snippet_0

LANGUAGE: dart
CODE:
var companies = await Company.db.find(
  session,
  orderBy: (t) => t.name,
);

----------------------------------------

TITLE: Database Index Configuration
DESCRIPTION: Shows how to define database indexes for performance optimization on specific fields.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.11/03-concepts/03-database-communication.md#2025-04-16_snippet_2

LANGUAGE: yaml
CODE:
class: Company
table: company
fields:
  name: String
  foundedDate: DateTime?
  employees: List<Employee>
indexes:
  company_name_idx:
    fields: name

----------------------------------------

TITLE: Revoking Specific User's Authentication Key in Serverpod
DESCRIPTION: This snippet shows how to fetch all authentication keys for a specific user and revoke a particular key (in this case, the last one) using the UserAuthentication.revokeAuthKey method.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/11-authentication/04-providers/06-custom-providers.md#2025-04-16_snippet_6

LANGUAGE: dart
CODE:
var authKeys = await AuthKey.db.find(
  session,
  where: (t) => t.userId.equals(userId),
);

if (authKeys.isNotEmpty) {
  var authKeyId = authKeys.last.id.toString();  // Convert the ID to string
  await UserAuthentication.revokeAuthKey(
    session,
    authKeyId: authKeyId,
  );
}

----------------------------------------

TITLE: Requiring Login for Endpoint Access
DESCRIPTION: Shows how to restrict endpoint access to authenticated users by overriding the requireLogin property.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/05-concepts/10-authentication/02-basics.md#2025-04-16_snippet_2

LANGUAGE: dart
CODE:
class MyEndpoint extends Endpoint {
  @override
  bool get requireLogin => true;

  Future<void> myMethod(Session session) async {
    ...
  }
  ...
}

----------------------------------------

TITLE: Bulk Attaching Related Rows in Serverpod (Dart)
DESCRIPTION: Demonstrates how to associate multiple employees with a company at once using the attach method for bulk operations.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/05-concepts/06-database/07-relation-queries.md#2025-04-16_snippet_10

LANGUAGE: dart
CODE:
var company = await Company.db.findById(session, companyId);
var employee = await Employee.db.findById(session, employeeId);

await Company.db.attach.employees(session, company!, [employee!]);

----------------------------------------

TITLE: Defining Serializable Exception in YAML
DESCRIPTION: YAML configuration for creating a custom serializable exception with message and error type fields.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/04-exceptions.md#2025-04-16_snippet_0

LANGUAGE: yaml
CODE:
exception: MyException
fields:
  message: String
  errorType: MyEnum

----------------------------------------

TITLE: Inserting a Row into Database in Dart
DESCRIPTION: Demonstrates how to insert a new row into the database using the db.insertRow method in Dart.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/01-get-started/08-working-with-database.md#2025-04-16_snippet_5

LANGUAGE: dart
CODE:
var myCompany = Company(name: 'Serverpod corp.', foundedDate: DateTime.now());
myCompany = await Company.db.insertRow(session, myCompany);

----------------------------------------

TITLE: Sorting Included Lists in Serverpod Query (Dart)
DESCRIPTION: Shows how to sort included lists in a Serverpod query using the orderBy clause. This example retrieves a company with employees sorted by their names.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/05-concepts/06-database/07-relation-queries.md#2025-04-16_snippet_7

LANGUAGE: dart
CODE:
var user = await Company.db.findById(
  session,
  employeeId,
  include: Company.include(
    employees: Employee.includeList(
      orderBy: (t) => t.name,
    ),
  ),
);

----------------------------------------

TITLE: Including Related Data in Serverpod Query
DESCRIPTION: Demonstrates how to include related data in a basic query using the include method to fetch an employee with their address.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/06-database/07-relation-queries.md#2025-04-16_snippet_0

LANGUAGE: dart
CODE:
var employee = await Employee.db.findById(
  session,
  employeeId,
  include: Employee.include(
    address: Address.include(),
  ),
);

----------------------------------------

TITLE: Revoking Current Session's Authentication Key in Dart
DESCRIPTION: This code snippet shows how to revoke the authentication key for the current session in Serverpod. It first fetches the authentication information and then revokes the key if it exists.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/11-authentication/04-providers/06-custom-providers.md#2025-04-16_snippet_5

LANGUAGE: dart
CODE:
var authId = (await session.authenticated)?.authId;

if (authId != null) {
  await UserAuthentication.revokeAuthKey(
    session,
    authKeyId: authId,
  );
}

----------------------------------------

TITLE: Complete Main.dart Implementation for Notes App
DESCRIPTION: The complete implementation of the main Flutter app file that includes note creation, fetching, and display functionality with error handling and loading states.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/05-tutorials/01-first-app.mdx#2025-04-16_snippet_17

LANGUAGE: dart
CODE:
import 'package:notes_client/notes_client.dart';
import 'package:flutter/material.dart';
import 'package:serverpod_flutter/serverpod_flutter.dart';

import 'note_dialog.dart';

// Sets up a singleton client object that can be used to talk to the server from
// anywhere in our app. The client is generated from your server code.
// The client is set up to connect to a Serverpod running on a local server on
// the default port. You will need to modify this to connect to staging or
// production servers.
var client = Client('http://localhost:8080/')
  ..connectivityMonitor = FlutterConnectivityMonitor();

void main() {
  runApp(const MyApp());
}

class MyApp extends StatelessWidget {
  const MyApp({Key? key}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Notes',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: const MyHomePage(title: 'Notes'),
    );
  }
}

class MyHomePage extends StatefulWidget {
  const MyHomePage({Key? key, required this.title}) : super(key: key);

  final String title;

  @override
  MyHomePageState createState() => MyHomePageState();
}

class MyHomePageState extends State<MyHomePage> {
  // This field holds the list of notes that we've received from the server or
  // null if no notes have been received yet.
  List<Note>? _notes;

  // If the connection to the server fails, this field will hold the exception
  // that was thrown.
  Exception? _connectionException;

  @override
  void initState() {
    super.initState();
    _loadNotes();
  }

  Future<void> _loadNotes() async {
    try {
      final notes = await client.notes.getAllNotes();
      setState(() {
        _notes = notes;
      });
    } catch (e) {
      _connectionFailed(e);
    }
  }

  Future<void> _createNote(Note note) async {
    try {
      await client.notes.createNote(note);
      await _loadNotes();
    } catch (e) {
      _connectionFailed(e);
    }
  }

  void _connectionFailed(dynamic exception) {
    // If the connection to the server fails, we clear the list of notes and
    // store the exception that was thrown. This will make the loading screen
    // appear and show a button to try again.

    // In a real app you would probably want to do more complete error handling.
    setState(() {
      _notes = null;
      _connectionException = exception;
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text(widget.title),
      ),
      body: _notes == null
          ? LoadingScreen(
              exception: _connectionException,
              onTryAgain: _loadNotes,
            )
          : ListView.builder(
              itemCount: _notes!.length,
              itemBuilder: ((context, index) {
                return ListTile(
                  title: Text(_notes![index].text),
                );
              }),
            ),
      floatingActionButton: _notes == null
          ? null
          : FloatingActionButton(
              onPressed: () {
                // When we tap the floating action button we want to show a
                // dialog where we can create a new note.
                showNoteDialog(
                  context: context,
                  onSaved: (text) {
                    var note = Note(
                      text: text,
                    );

                    // Add the note to the list of notes before we've received
                    // a response from the server which makes the UI feel more
                    // responsive.
                    _notes!.add(note);

                    // Actually create the note on the server.
                    _createNote(note);
                  },
                );
              },
              child: const Icon(Icons.add),
            ),
    );
  }
}

----------------------------------------

TITLE: Limit-Offset Pagination in Serverpod
DESCRIPTION: Shows how to combine limit and offset parameters to skip records and implement basic pagination.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/05-concepts/06-database/09-pagination.md#2025-04-16_snippet_1

LANGUAGE: dart
CODE:
var companies = await Company.db.find(
  session,
  limit: 10,
  offset: 30,
);

----------------------------------------

TITLE: Fetching User Information by User ID in Dart
DESCRIPTION: This code shows how to retrieve more detailed user information using the static methods of the Users class in Serverpod's auth module.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/11-authentication/03-working-with-users.md#2025-04-16_snippet_1

LANGUAGE: dart
CODE:
var userInfo = await Users.findUserByUserId(session, userId!);

----------------------------------------

TITLE: Finding a Single Row by ID in Dart with Serverpod
DESCRIPTION: This example shows how to find a single row in a database table by its ID using Serverpod in Dart.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.20/04-concepts/03-database-communication.md#2025-04-16_snippet_6

LANGUAGE: dart
CODE:
var myCompany = await Company.findById(session, companyId);

----------------------------------------

TITLE: Sorting Companies by Employee Count in Dart using Serverpod
DESCRIPTION: This snippet demonstrates how to sort companies based on the count of a list relation (1:n), specifically the number of employees. It uses the 'find' method with the 'orderBy' parameter and the 'count()' function.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/05-concepts/06-database/08-sort.md#2025-04-16_snippet_4

LANGUAGE: dart
CODE:
var companies = await Company.db.find(
  session,
  orderBy: (t) => t.employees.count(),
);

----------------------------------------

TITLE: Registering a Custom Health Check Handler in Serverpod
DESCRIPTION: This snippet demonstrates how to register a custom health check handler when initializing a Serverpod instance. The handler is passed as a parameter to the Serverpod constructor.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/13-health-checks.md#2025-04-16_snippet_1

LANGUAGE: dart
CODE:
final pod = Serverpod(
    args,
    Protocol(),
    Endpoints(),
    healthCheckHandler: myHealthCheckHandler,
  );

----------------------------------------

TITLE: Configuring Transaction Isolation Levels
DESCRIPTION: Shows how to set specific isolation levels for transactions using TransactionSettings. The example demonstrates setting serializable isolation level.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/06-database/08-transactions.md#2025-04-16_snippet_1

LANGUAGE: dart
CODE:
await session.db.transaction(
  (transaction) async {
    await Company.db.insertRow(session, company, transaction: transaction);
    await Employee.db.insertRow(session, employee, transaction: transaction);
  },
  settings: TransactionSettings(isolationLevel: IsolationLevel.serializable),
);

----------------------------------------

TITLE: Writing a Basic Integration Test with Serverpod Test Tools
DESCRIPTION: Example of how to write an integration test using the generated Serverpod test tools, making direct calls to endpoints.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/19-testing/01-get-started.md#2025-04-16_snippet_8

LANGUAGE: dart
CODE:
import 'package:test/test.dart';

// Import the generated file, it contains everything you need.
import 'test_tools/serverpod_test_tools.dart';

void main() {
  withServerpod('Given Example endpoint', (sessionBuilder, endpoints) {
    test('when calling `hello` then should return greeting', () async {
      final greeting = await endpoints.example.hello(sessionBuilder, 'Michael');
      expect(greeting, 'Hello Michael');
    });
  });
}

----------------------------------------

TITLE: Implementing Google Sign-In Button
DESCRIPTION: Adding a Google sign-in button widget with success and failure handlers.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.7/03-concepts/07-authentication.md#2025-04-16_snippet_5

LANGUAGE: dart
CODE:
SignInWithGoogleButton(
  caller: client.modules.auth,
  onSignedIn: () { ... handle sign in here ... },
  onFailure: () { ... handle fail to sign in here ... },
)

----------------------------------------

TITLE: Notes Loading Implementation
DESCRIPTION: Async method to fetch notes from the server with error handling
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/05-tutorials/01-first-app.mdx#2025-04-16_snippet_18

LANGUAGE: dart
CODE:
Future<void> _loadNotes() async {
  try {
    final notes = await client.notes.getAllNotes();
    setState(() {
      _notes = notes;
    });
  } catch (e) {
    _connectionFailed(e);
  }
}

----------------------------------------

TITLE: Listening to Serverpod Endpoint Stream
DESCRIPTION: Shows how to listen to messages coming from a server endpoint stream using an async for loop to process incoming messages.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/15-streams.md#2025-04-16_snippet_6

LANGUAGE: dart
CODE:
await for (var message in client.myEndpoint.stream) {
  _handleMessage(message);
}

----------------------------------------

TITLE: Proper Endpoint Testing in Serverpod
DESCRIPTION: Demonstrates the correct approach to testing endpoints by using the endpoints provided by the withServerpod helper, ensuring that all lifecycle events and validations are properly executed.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/19-testing/04-best-practises.md#2025-04-16_snippet_5

LANGUAGE: dart
CODE:
void main() {
  withServerpod('Given Example endpoint', (sessionBuilder, endpoints) {
    var session = sessionBuilder.build();

    test('when calling `hello` then should return greeting', () async {
      // ✅ Use the provided `endpoints` to call the endpoint that should be tested.
      final greeting =
          await endpoints.example.hello(session, 'Michael');
      expect(greeting, 'Hello, Michael!');
    });
  });
}

----------------------------------------

TITLE: Defining an Enum in YAML
DESCRIPTION: This snippet shows how to create an enum for different animal types, with serialization based on index by default.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/02-models.md#2025-04-16_snippet_4

LANGUAGE: yaml
CODE:
enum: Animal
values:
 - dog
 - cat
 - bird

----------------------------------------

TITLE: AWS S3 Storage Configuration
DESCRIPTION: Implementation for configuring AWS S3 storage integration with Serverpod, including bucket and region settings.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/12-file-uploads.md#2025-04-16_snippet_8

LANGUAGE: dart
CODE:
import 'package:serverpod_cloud_storage_s3/serverpod_cloud_storage_s3.dart'
    as s3;

LANGUAGE: dart
CODE:
pod.addCloudStorage(s3.S3CloudStorage(
  serverpod: pod,
  storageId: 'public',
  public: true,
  region: 'us-west-2',
  bucket: 'my-bucket-name',
  publicHost: 'storage.myapp.com',
));

LANGUAGE: yaml
CODE:
shared:
  AWSAccessKeyId: 'XXXXXXXXXXXXXX'
  AWSSecretKey: 'XXXXXXXXXXXXXXXXXXXXXXXXXXX'

----------------------------------------

TITLE: Retrieving User ID from Session in Serverpod
DESCRIPTION: Demonstrates how to obtain the authenticated user's ID from the current session object. This is a basic operation for identifying the logged-in user.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/11-authentication/03-working-with-users.md#2025-04-16_snippet_0

LANGUAGE: dart
CODE:
var userId = (await session.authenticated)?.userId;

----------------------------------------

TITLE: Configuring Database Connection in Serverpod YAML
DESCRIPTION: Example YAML configuration for database connection details in the development.yaml file. This defines the host, port, database name, and user for connecting to PostgreSQL.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/05-concepts/06-database/01-connection.md#2025-04-16_snippet_0

LANGUAGE: yaml
CODE:
...
database:
  host: localhost
  port: 8090
  name: <YOUR_PROJECT_NAME>
  user: postgres
...

----------------------------------------

TITLE: Checking User Authentication Status in Dart with Serverpod
DESCRIPTION: This code shows how to check if a user is authenticated using the Session object in Serverpod. It uses an asynchronous method to determine the user's sign-in status.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/11-authentication/02-basics.md#2025-04-16_snippet_1

LANGUAGE: dart
CODE:
Future<void> myMethod(Session session) async {
  var isSignedIn = await session.isUserSignedIn;
  ...
}

----------------------------------------

TITLE: Querying Users with Not Equals Filter in Dart
DESCRIPTION: This example shows how to use the notEquals filter to fetch all users with a name that is not 'Bob' from the database.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/06-database/06-filter.md#2025-04-16_snippet_1

LANGUAGE: dart
CODE:
await User.db.find(
  where: (t) => t.name.notEquals('Bob')
);

----------------------------------------

TITLE: Multiple Object Inclusion in Serverpod Query
DESCRIPTION: Demonstrates including multiple related objects in a single query using named parameters.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/06-database/07-relation-queries.md#2025-04-16_snippet_2

LANGUAGE: dart
CODE:
var user = await Employee.db.findById(
  session,
  employeeId,
  include: Employee.include(
    address: Address.include(),
    company: Company.include(
      address: Address.include(),
    ),
  ),
);

----------------------------------------

TITLE: Implementing Unique Index Constraint
DESCRIPTION: Demonstrates how to create a unique index constraint on the name field of a Company table. This ensures no duplicate company names can be stored in the database.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/05-concepts/06-database/04-indexing.md#2025-04-16_snippet_2

LANGUAGE: yaml
CODE:
class: Company
table: company
fields:
  name: String
indexes:
  company_name_idx:
    fields: name
    unique: true

----------------------------------------

TITLE: Error Handling in Serverpod Streaming Methods
DESCRIPTION: Example of handling errors in streaming methods. Shows how exceptions can be passed bidirectionally between client and server through streams.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/15-streams.md#2025-04-16_snippet_2

LANGUAGE: dart
CODE:
class ExampleEndpoint extends Endpoint {
  Stream echoStream(Session session, Stream stream) async* {
    stream.listen((message) {
      // Do nothing
    }, onError: (error) {
      print('Server received error: $error');
      throw SerializableException('Error from server');
    });
  }
}

----------------------------------------

TITLE: Auth Token Creation in Dart
DESCRIPTION: Example of creating an authentication token with specific scopes for a user.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/11-authentication/04-providers/06-custom-providers.md#2025-04-16_snippet_2

LANGUAGE: dart
CODE:
var authToken = await UserAuthentication.signInUser(userInfo.id, 'myAuthMethod', scopes: {
    Scope('delete'),
    Scope('create'),
});

----------------------------------------

TITLE: Executing Raw SQL Statement with Parameters in Dart
DESCRIPTION: Uses the unsafeExecute method to run a parameterized SQL statement that modifies data without returning results. Returns the number of rows affected by the operation.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/06-database/10-raw-access.md#2025-04-16_snippet_1

LANGUAGE: dart
CODE:
int result = await session.db.unsafeExecute(
  r'DELETE FROM mytable WHERE id = @id',
  parameters: QueryParameters.named({'id': 1}),
);

----------------------------------------

TITLE: Initializing Serverpod with Custom Authentication Handler in Dart
DESCRIPTION: Example of how to initialize Serverpod with a custom authentication handler that validates tokens and returns AuthenticationInfo objects with user IDs and scopes.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/11-authentication/05-custom-overrides.md#2025-04-16_snippet_0

LANGUAGE: dart
CODE:
// Initialize Serverpod and connect it with your generated code.
final pod = Serverpod(
  args,
  Protocol(),
  Endpoints(),
  authenticationHandler: (Session session, String token) async {
    /// Custom validation handler
    if (token != 'valid') return null;

    return AuthenticationInfo(1, <Scope>{});
  },
);

----------------------------------------

TITLE: Filtered None Related Records
DESCRIPTION: Shows how to filter for records with no specific type of related entries.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/06-database/06-filter.md#2025-04-16_snippet_20

LANGUAGE: dart
CODE:
await User.db.find(
  where:((t) => t.orders.none((o) => o.itemType.equals('book')))
);

----------------------------------------

TITLE: Nested Include List Query
DESCRIPTION: Demonstrates including nested objects within a list relation, showing how to access nested objects for each list entry.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/06-database/07-relation-queries.md#2025-04-16_snippet_4

LANGUAGE: dart
CODE:
var user = await Company.db.findById(
  session,
  employeeId,
  include: Company.include(
    employees: Employee.includeList(
      includes: Employee.include(
        address: Address.include(),
      ),
    ),
  ),
);

----------------------------------------

TITLE: Initializing Serverpod with Custom Token Validation
DESCRIPTION: Sets up a Serverpod instance with a custom authentication handler that validates tokens and returns AuthenticationInfo objects.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/11-authentication/05-custom-overrides.md#2025-04-16_snippet_0

LANGUAGE: dart
CODE:
final pod = Serverpod(
  args,
  Protocol(),
  Endpoints(),
  authenticationHandler: (Session session, String token) async {
    /// Custom validation handler
    if (token != 'valid') return null;

    return AuthenticationInfo(1, <Scope>{});
  },
);

----------------------------------------

TITLE: Finding a Row by ID in Serverpod Dart
DESCRIPTION: This Dart code demonstrates how to retrieve a single row from the database by its ID using the 'findById' method. It returns the Company object or null if not found.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/05-concepts/06-database/05-crud.md#2025-04-16_snippet_3

LANGUAGE: dart
CODE:
var company = await Company.db.findById(session, companyId);

----------------------------------------

TITLE: User Signout Implementation in Dart
DESCRIPTION: Examples of implementing user signout functionality for single and multi-device scenarios.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/11-authentication/04-providers/06-custom-providers.md#2025-04-16_snippet_6

LANGUAGE: dart
CODE:
await UserAuthentication.signOutUser(
  session,
  userId: 123,
);

LANGUAGE: dart
CODE:
class AuthenticatedEndpoint extends Endpoint {
  @override
  bool get requireLogin => true;

  Future<void> logout(Session session) async {
    await UserAuthentication.signOutUser(session);
  }
}

----------------------------------------

TITLE: Deleting Records with Filter in Dart
DESCRIPTION: Demonstrates how to delete records matching a specific filter condition.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/06-database/05-crud.md#2025-04-16_snippet_12

LANGUAGE: dart
CODE:
var companiesDeleted = await Company.db.deleteWhere(
  session,
  where: (t) => t.name.like('%Ltd'),
);

----------------------------------------

TITLE: Using Custom Scopes in Serverpod Endpoints
DESCRIPTION: Demonstrates how to apply custom authorization scopes to restrict endpoint access.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/11-authentication/02-basics.md#2025-04-16_snippet_6

LANGUAGE: dart
CODE:
class MyEndpoint extends Endpoint {
  @override
  bool get requireLogin => true;

  @override
  Set<Scope> get requiredScopes => {CustomScope.userRead, CustomScope.userWrite};

  Future<void> myMethod(Session session) async {
    ...
  }
  ...
}

----------------------------------------

TITLE: Releasing Savepoints in Transactions
DESCRIPTION: Demonstrates how to release savepoints and shows the impact on subsequent savepoints. Includes creating multiple savepoints and releasing them.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/06-database/08-transactions.md#2025-04-16_snippet_4

LANGUAGE: dart
CODE:
await session.db.transaction((transaction) async {
  // Create two savepoints
  var savepoint = await transaction.createSavepoint();
  var secondSavepoint = await transaction.createSavepoint();

  await Company.db.insertRow(session, company, transaction: transaction);
  await savepoint.release();
});

----------------------------------------

TITLE: Defining Enrollment Junction Table for Many-to-many Relationship in Serverpod
DESCRIPTION: YAML configuration for an Enrollment junction table that connects Students and Courses in a many-to-many relationship. Includes a unique index to prevent duplicate enrollments of the same student in the same course.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/06-database/03-relations/03-many-to-many.md#2025-04-16_snippet_2

LANGUAGE: yaml
CODE:
# enrollment.yaml
class: Enrollment
table: enrollment
fields:
  student: Student?, relation(name=student_enrollments)
  course: Course?, relation(name=course_enrollments)
indexes:
  enrollment_index_idx:
    fields: studentId, courseId
    unique: true

----------------------------------------

TITLE: Implementing Equals Filter in Serverpod Queries
DESCRIPTION: Demonstrates how to filter database records using exact value matching with the equals operator.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/06-database/06-filter.md#2025-04-16_snippet_0

LANGUAGE: dart
CODE:
await User.db.find(
  where: (t) => t.name.equals('Alice')
);

----------------------------------------

TITLE: Implementing Future Call Class in Dart
DESCRIPTION: Shows how to create a basic future call by extending the FutureCall class and implementing the invoke method. The invoke method receives a Session object and an optional SerializableModel parameter.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/14-scheduling.md#2025-04-16_snippet_0

LANGUAGE: dart
CODE:
import 'package:serverpod/serverpod.dart';

class ExampleFutureCall extends FutureCall<MyModelEntity> {
  @override
  Future<void> invoke(Session session, MyModelEntity? object) async {
    // Do something interesting in the future here.
  }
}

----------------------------------------

TITLE: Implementing Authentication Handler in Serverpod 2.0
DESCRIPTION: Shows how to set up the authentication handler in the server.dart file using the serverpod_auth_server package.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/12-upgrading/01-upgrade-to-two.md#2025-04-16_snippet_0

LANGUAGE: dart
CODE:
import 'package:serverpod_auth_server/serverpod_auth_server.dart' as auth;

void run(List<String> args) async {
  var pod = Serverpod(
    args,
    Protocol(),
    Endpoints(),
    authenticationHandler: auth.authenticationHandler, // Add this line
  );

  ...
}

----------------------------------------

TITLE: Accessing YouTube API on Server-Side with User Authentication
DESCRIPTION: Server-side implementation for accessing the YouTube API on behalf of an authenticated user, using the authClientForUser method to create a client with appropriate permissions.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.0.0/04-concepts/07-authentication.md#2025-04-16_snippet_8

LANGUAGE: dart
CODE:
var googleClient = await authClientForUser(session, userId);

if (googleClient != null) {
  var youtubeApi = YouTubeApi(googleClient);

  var favorites = await youTubeApi.playlistItems.list(
    ['snippet'],
    playlistId: 'LL', // Liked List
  );

}
else {
  // The user hasn't signed in with Google.
}

----------------------------------------

TITLE: Counting Rows with Filter in Serverpod Dart
DESCRIPTION: This Dart code demonstrates how to count the number of rows that match a specific filter condition using the 'count' method. It counts companies whose names start with 's' and returns the count as an integer.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/05-concepts/06-database/05-crud.md#2025-04-16_snippet_11

LANGUAGE: dart
CODE:
var count = await Company.db.count(
  session, 
  where: (t) => t.name.like('s%'),
);

----------------------------------------

TITLE: Creating a Relation Between Tables in Serverpod
DESCRIPTION: This example demonstrates how to create a relation between two tables using the 'relation' keyword. The 'address' field of the Company model is defined as a nullable Address type with a relation to the Address table.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/06-database/02-models.md#2025-04-16_snippet_3

LANGUAGE: yaml
CODE:
class: Company
table: company
fields:
  address: Address?, relation

----------------------------------------

TITLE: Implementing Main Flutter App Structure
DESCRIPTION: Main application file that sets up the client connection and basic app structure with MaterialApp and Scaffold widgets.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/05-tutorials/02-real-time-communication.md#2025-04-16_snippet_9

LANGUAGE: dart
CODE:
// lib/main.dart

import 'package:pixorama_client/pixorama_client.dart';
import 'package:flutter/material.dart';
import 'package:serverpod_flutter/serverpod_flutter.dart';

import 'src/pixorama.dart';

var client = Client('http://$localhost:8080/')
  ..connectivityMonitor = FlutterConnectivityMonitor();

void main() {
  // Start the app.
  runApp(const PixoramaApp());
}

class PixoramaApp extends StatelessWidget {
  const PixoramaApp({super.key});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Pixorama',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: Scaffold(
        body: const Pixorama(),
      ),
    );
  }
}

----------------------------------------

TITLE: Using Database Transactions in Dart
DESCRIPTION: Demonstrates how to use database transactions to bundle multiple operations into an atomic, all-or-nothing operation.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.0.0/04-concepts/03-database-communication.md#2025-04-16_snippet_14

LANGUAGE: dart
CODE:
var result = await session.db.transaction((transaction) async {
  // Do some database queries here.

  // Optionally return a value.
  return true;
});

----------------------------------------

TITLE: Sorting Related Lists in Serverpod Queries
DESCRIPTION: Shows how to sort included list relations using the orderBy clause, retrieving employees sorted by their names in ascending order.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/06-database/07-relation-queries.md#2025-04-16_snippet_7

LANGUAGE: dart
CODE:
var user = await Company.db.findById(
  session,
  employeeId,
  include: Company.include(
    employees: Employee.includeList(
      orderBy: (t) => t.name,
    ),
  ),
);

----------------------------------------

TITLE: Creating a Serverpod Endpoint with Custom Object Return Type
DESCRIPTION: Example of a Serverpod endpoint that returns a custom serializable object, demonstrating how to use custom classes in server endpoints.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/05-concepts/03-serialization.md#2025-04-16_snippet_8

LANGUAGE: dart
CODE:
import 'package:relation_test_shared/relation_test_shared.dart';
import 'package:serverpod/serverpod.dart';

class ExampleEndpoint extends Endpoint {
  Future<ClassName> getMyCustomClass(Session session) async {
    return ClassName(
      'John Doe',
    );
  }
}

----------------------------------------

TITLE: Complete Docker Compose Configuration for Serverpod
DESCRIPTION: Complete Docker Compose configuration file with both development and test services for PostgreSQL and Redis. This setup isolates test data from development data.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/19-testing/01-get-started.md#2025-04-16_snippet_2

LANGUAGE: yaml
CODE:
services:
  # Development services
  postgres:
    image: postgres:16.3
    ports:
      - '8090:5432'
    environment:
      POSTGRES_USER: postgres
      POSTGRES_DB: <projectname>
      POSTGRES_PASSWORD: "<insert database development password>"
    volumes:
      - <projectname>_data:/var/lib/postgresql/data
  redis:
    image: redis:6.2.6
    ports:
      - '8091:6379'
    command: redis-server --requirepass "<insert redis development password>"
    environment:
      - REDIS_REPLICATION_MODE=master

  # Test services
  postgres_test:
    image: postgres:16.3
    ports:
      - '9090:5432'
    environment:
      POSTGRES_USER: postgres
      POSTGRES_DB: <projectname>_test
      POSTGRES_PASSWORD: "<insert database test password>"
    volumes:
      - <projectname>_test_data:/var/lib/postgresql/data
  redis_test:
    image: redis:6.2.6
    ports:
      - '9091:6379'
    command: redis-server --requirepass "<insert redis test password>"
    environment:
      - REDIS_REPLICATION_MODE=master

volumes:
  <projectname>_data:
  <projectname>_test_data:

----------------------------------------

TITLE: Creating Expressions for Database Queries in Dart with Serverpod
DESCRIPTION: This snippet demonstrates various ways to create expressions for database queries using Serverpod in Dart, including comparison operators and logical operators.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.20/04-concepts/03-database-communication.md#2025-04-16_snippet_11

LANGUAGE: dart
CODE:
// The name column of the Company table equals 'My company')
t.name.equals('My company')

// Companies founded at or after 2020
t.foundedDate >= DateTime.utc(2020)

// Companies with number of employees between 10 and 100
(t.numEmployees > 10) & (t.numEmployees <= 100)

// Companies that has the founded date set
t.foundedDate.notEquals(null)

----------------------------------------

TITLE: Defining Basic Serializable Class in YAML
DESCRIPTION: Example of defining a Company class with basic fields including a string, nullable DateTime, and a list of Employee objects using Serverpod's YAML configuration.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.1.0/04-concepts/02-serialization.md#2025-04-16_snippet_0

LANGUAGE: yaml
CODE:
class: Company
fields:
  name: String
  foundedDate: DateTime?
  employees: List<Employee>

----------------------------------------

TITLE: Inserting Data into Database
DESCRIPTION: Dart code example showing how to insert a new row into the database using db.insertRow method
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/01-get-started/08-working-with-database.md#2025-04-16_snippet_5

LANGUAGE: dart
CODE:
var myCompany = Company(name: 'Serverpod corp.', foundedDate: DateTime.now());
myCompany = await Company.db.insertRow(session, myCompany);

----------------------------------------

TITLE: Accessing Client IP Address in Serverpod
DESCRIPTION: This snippet demonstrates how to access the IP address of a client calling a method in Serverpod. It casts the Session object to a MethodCallSession and uses the remoteIpAddress extension on the HttpRequest object to get the IP address, even when behind a load balancer.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/05-sessions.md#2025-04-16_snippet_0

LANGUAGE: dart
CODE:
session as MethodCallSession;
var ipAddress = session.httpRequest.remoteIpAddress;

----------------------------------------

TITLE: Managing Stream Lifecycle in Serverpod
DESCRIPTION: Shows how to manually manage a stream's lifecycle by creating and canceling the stream subscription.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/16-server-events.md#2025-04-16_snippet_3

LANGUAGE: dart
CODE:
var stream = session.messages.createStream('user_updates');
var subscription = stream.listen((message) {
    print('Received message: $message');
});

subscription.cancel();

----------------------------------------

TITLE: Client-Side Error Handling for Streaming Methods
DESCRIPTION: Example showing how to handle errors on the client side when working with streaming methods, including sending errors to the server and catching errors from the server.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/15-streams.md#2025-04-16_snippet_3

LANGUAGE: dart
CODE:
var inStream = StreamController();
var outStream = client.example.echoStream(inStream.stream);
outStream.listen((message) {
  // Do nothing
}, onError: (error) {
  print('Client received error: $error');
});

inStream.addError(SerializableException('Error from client'));

// This will print
// Server received error: Error from client 
// Client received error: Error from server 

----------------------------------------

TITLE: Implementing Delete Note Functionality in Flutter with Serverpod
DESCRIPTION: A method that handles the deletion of a note by calling the server endpoint and refreshing the notes list. It includes error handling to manage connection failures.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/05-tutorials/01-first-app.mdx#2025-04-16_snippet_27

LANGUAGE: dart
CODE:
Future<void> _deleteNote(Note note) async {
  try {
    await client.notes.deleteNote(note);
    await _loadNotes();
  } catch (e) {
    _connectionFailed(e);
  }
}

----------------------------------------

TITLE: Configuring Authentication Handler in Serverpod
DESCRIPTION: Setup code for adding the authentication handler to the Serverpod instance in the server project.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/05-concepts/10-authentication/01-setup.md#2025-04-16_snippet_1

LANGUAGE: dart
CODE:
import 'package:serverpod_auth_server/serverpod_auth_server.dart' as auth;

void run(List<String> args) async {
  var pod = Serverpod(
    args,
    Protocol(),
    Endpoints(),
    authenticationHandler: auth.authenticationHandler, // Add this line
  );

  ...
}

----------------------------------------

TITLE: Comprehensive Example of Default Values in Serverpod YAML Models
DESCRIPTION: A complete example showing how to use various default value definitions in a Serverpod model class, including different data types and model vs persistence defaults.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/02-models.md#2025-04-16_snippet_18

LANGUAGE: yaml
CODE:
class: DefaultValue
table: default_value
fields:
  ### Sets the current date and time as the default value.
  dateTimeDefault: DateTime, default=now

  ### Sets the default value for a boolean field.
  boolDefault: bool, defaultModel=false, defaultPersist=true

  ### Sets the default value for an integer field.
  intDefault: int, defaultPersist=20

  ### Sets the default value for a double field.
  doubleDefault: double, default=10.5, defaultPersist=20.5

  ### Sets the default value for a string field.
  stringDefault: String, default="This is a string", defaultModel="This is a string"

----------------------------------------

TITLE: Basic Sorting by Single Column in Dart
DESCRIPTION: Demonstrates how to fetch companies from the database and sort them by name in ascending order (default). Uses the orderBy parameter with a callback that specifies the column to sort by.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/06-database/08-sort.md#2025-04-16_snippet_0

LANGUAGE: dart
CODE:
var companies = await Company.db.find(
  session,
  orderBy: (t) => t.name,
);

----------------------------------------

TITLE: Error Handling in Serverpod Streaming Methods (Server-side)
DESCRIPTION: Illustrates error handling in a Serverpod streaming method on the server side, showing how to catch errors from the input stream and throw serializable exceptions.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/15-streams.md#2025-04-16_snippet_2

LANGUAGE: dart
CODE:
class ExampleEndpoint extends Endpoint {
  Stream echoStream(Session session, Stream stream) async* {
    stream.listen((message) {
      // Do nothing
    }, onError: (error) {
      print('Server received error: $error');
      throw SerializableException('Error from server');
    });
  }
}

----------------------------------------

TITLE: Catching a Custom Exception in Client Code
DESCRIPTION: This Dart code shows how to catch a custom serializable exception in client code. The client can access the custom properties of the exception to provide more specific error handling.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/05-concepts/04-exceptions.md#2025-04-16_snippet_2

LANGUAGE: dart
CODE:
try {
  client.example.doThingy();
}
on MyException catch(e) {
  print(e.message);
}
catch(e) {
  print('Something else went wrong.');
}

----------------------------------------

TITLE: Implementing ProtocolSerialization Interface for Custom Class in Serverpod
DESCRIPTION: This snippet demonstrates how to implement the ProtocolSerialization interface for a custom class in Serverpod, allowing control over which fields are transmitted to the client.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/03-serialization.md#2025-04-16_snippet_9

LANGUAGE: dart
CODE:
class CustomClass implements ProtocolSerialization {
  final String? value;
  final String? serverSideValue;

  .......

  // Serializes fields specifically for protocol communication
  Map<String, dynamic> toJsonForProtocol() {
    return {
      "value":value,
    };
  }

  // Serializes all fields, including those intended only for server-side use
  Map<String, dynamic> toJson() {
    return {
      "value": value,
      "serverSideValue": serverSideValue,
    };
  }
}

----------------------------------------

TITLE: Retrieving Authentication Token from Key Manager in Dart
DESCRIPTION: Shows how to retrieve the current authentication token from the key manager for use in the application.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/11-authentication/05-custom-overrides.md#2025-04-16_snippet_7

LANGUAGE: dart
CODE:
var token = await client.authenticationKeyManager?.get();

----------------------------------------

TITLE: Filtering Users with Greater Than Operator in Dart
DESCRIPTION: Demonstrates filtering users by age using the greater than operator.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/06-database/06-filter.md#2025-04-16_snippet_2

LANGUAGE: dart
CODE:
await User.db.find(
  where: (t) => t.age > 25
);

----------------------------------------

TITLE: Fetching User Information in Serverpod
DESCRIPTION: Shows how to retrieve detailed user information using the Users class static method. This method requires an active session and valid user ID.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/11-authentication/03-working-with-users.md#2025-04-16_snippet_1

LANGUAGE: dart
CODE:
var userInfo = await Users.findUserByUserId(session, userId!);

----------------------------------------

TITLE: Including Relational Lists in Serverpod Query (Dart)
DESCRIPTION: This example shows how to include a list of related objects (1:n relation) in a Serverpod query using the 'includeList' method. It retrieves a company record with all related employees included.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/06-database/07-relation-queries.md#2025-04-16_snippet_3

LANGUAGE: dart
CODE:
var user = await Company.db.findById(
  session,
  employeeId,
  include: Company.include(
    employees: Employee.includeList(),
  ),
);

----------------------------------------

TITLE: Bidirectional One-to-Many Object Relation in YAML
DESCRIPTION: Shows how to create a bidirectional one-to-many relationship using object relations on both sides, with named relation parameters for explicit connection.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/06-database/03-relations/02-one-to-many.md#2025-04-16_snippet_3

LANGUAGE: yaml
CODE:
# company.yaml
class: Company
table: company
fields:
  name: String
  employees: List<Employee>?, relation(name=company_employees)

# employee.yaml
class: Employee
table: employee
fields:
  name: String
  company: Company?, relation(name=company_employees)

----------------------------------------

TITLE: Restricting Endpoint Access in Serverpod
DESCRIPTION: Demonstrates how to restrict access to an endpoint to only signed-in users by overriding the requireLogin property in an Endpoint class.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.1.0/04-concepts/09-authentication.md#2025-04-16_snippet_1

LANGUAGE: dart
CODE:
class MyEndpoint extends Endpoint {
  @override
  bool get requireLogin => true;

  ...
}

----------------------------------------

TITLE: Checking User Authentication Status in Dart with Serverpod
DESCRIPTION: This code shows how to check if a user is signed in using the Session object in a Serverpod endpoint method.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.1.1/05-concepts/09-authentication/02-basics.md#2025-04-16_snippet_1

LANGUAGE: dart
CODE:
Future<void> myMethod(Session session) async {
  var isSignedIn = await session.isUserSignedIn;
  ...
}

----------------------------------------

TITLE: Calling a Serverpod Endpoint Method from Client-side Dart
DESCRIPTION: This snippet shows how to call a generated endpoint method from the client side. It uses the client object to access the 'example' endpoint and call its 'hello' method with a parameter.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.10/03-concepts/01-working-with-endpoints.md#2025-04-16_snippet_1

LANGUAGE: dart
CODE:
var result = await client.example.hello('World');

----------------------------------------

TITLE: Sending Global Message across Serverpod Servers
DESCRIPTION: Shows how to send a global message that will be distributed to all servers connected to the same Redis instance using the global parameter.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/16-server-events.md#2025-04-16_snippet_1

LANGUAGE: dart
CODE:
var message = UserUpdate(); // Model that represents changes to user data.
session.messages.postMessage('user_updates', message, global: true);

----------------------------------------

TITLE: Filtering Users with Count on One-to-Many Relation in Dart
DESCRIPTION: Shows how to filter based on the count of related items in a one-to-many relationship.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/06-database/06-filter.md#2025-04-16_snippet_17

LANGUAGE: dart
CODE:
await User.db.find(
  where: (t) => t.orders.count() > 3
);

----------------------------------------

TITLE: Defining Field Scopes in a Class Model for Serverpod
DESCRIPTION: This snippet illustrates how to set different visibility scopes for individual fields within a class model. It uses the 'scope' property to control field visibility.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/02-models.md#2025-04-16_snippet_2

LANGUAGE: yaml
CODE:
class: SelectivelyHiddenClass
fields:
  hiddenSecretKey: String, scope=serverOnly
  publicKey: String

----------------------------------------

TITLE: Initializing EmailAuthController for Custom UI
DESCRIPTION: This Dart snippet shows how to initialize the EmailAuthController for creating a custom authentication UI.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/11-authentication/04-providers/01-email.md#2025-04-16_snippet_4

LANGUAGE: dart
CODE:
import 'package:serverpod_auth_email_flutter/serverpod_auth_email_flutter.dart';

final authController = EmailAuthController(client.modules.auth);

----------------------------------------

TITLE: Setting Field-Level Visibility Scopes in Serverpod Models
DESCRIPTION: Shows how to set visibility scopes on individual fields within a class. Different scopes (all, serverOnly, none) control whether fields are visible to the server, client, or both.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/05-concepts/02-models.md#2025-04-16_snippet_2

LANGUAGE: yaml
CODE:
class: SelectivelyHiddenClass
fields:
  hiddenSecretKey: String, scope=serverOnly
  publicKey: String

----------------------------------------

TITLE: Defining Database Mapping in YAML
DESCRIPTION: Illustrates how to define a database mapping for a Company class, specifying the table name and fields.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/01-get-started.md#2025-04-16_snippet_12

LANGUAGE: yaml
CODE:
class: Company
table: company
fields:
  name: String
  foundedDate: DateTime?

----------------------------------------

TITLE: Executing Parameterized SQL Queries with unsafeQuery in Dart
DESCRIPTION: Execute a raw SQL query with named parameters and receive results. Uses the extended query protocol for parameter binding to prevent SQL injection.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/06-database/10-raw-access.md#2025-04-16_snippet_0

LANGUAGE: dart
CODE:
DatabaseResult result = await session.db.unsafeQuery(
  r'SELECT * FROM mytable WHERE id = @id', 
  parameters: QueryParameters.named({'id': 1}),
);

----------------------------------------

TITLE: Configuring Database Connection in Serverpod YAML
DESCRIPTION: Example YAML configuration for database connection details in Serverpod's config/development.yaml file. It specifies host, port, database name, and user for connecting to PostgreSQL.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/06-database/01-connection.md#2025-04-16_snippet_0

LANGUAGE: yaml
CODE:
...
database:
  host: localhost
  port: 8090
  name: <YOUR_PROJECT_NAME>
  user: postgres
...

----------------------------------------

TITLE: Creating a Model with Database Relation in Serverpod
DESCRIPTION: Demonstrates how to define a proper database relation between two tables using the 'relation' keyword. This allows referencing the same object from multiple tables while maintaining data consistency.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/06-database/02-models.md#2025-04-16_snippet_3

LANGUAGE: yaml
CODE:
class: Company
table: company
fields:
  address: Address?, relation

----------------------------------------

TITLE: Deleting a Single Row in Serverpod
DESCRIPTION: Deletes a Company record from the database. The input object must have its ID set. Returns the deleted Company model.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/06-database/05-crud.md#2025-04-16_snippet_10

LANGUAGE: dart
CODE:
var company = await Company.db.findById(session, companyId); // Fetched company has its id set 
var companyDeleted = await Company.db.deleteRow(session, company);

----------------------------------------

TITLE: Joining Tables and Nesting Objects in Dart with Serverpod
DESCRIPTION: This example shows how to manually join tables and create nested objects by performing multiple queries using Serverpod in Dart.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.20/04-concepts/03-database-communication.md#2025-04-16_snippet_12

LANGUAGE: dart
CODE:
var company = await Company.findById(session, id);

var employees = await Employee.find(
  session,
  where: (t) => t.companyId.equals(company.id),
);

company.employees = employees;

----------------------------------------

TITLE: Updating Docker Image to Dart 3.0
DESCRIPTION: Update to the Dockerfile to use Dart 3.0 as the base image for building Serverpod applications.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/08-upgrading/02-upgrade-to-one-point-two.md#2025-04-16_snippet_3

LANGUAGE: docker
CODE:
FROM dart:3.0 AS build

...

----------------------------------------

TITLE: Complete Example of Referential Actions in Serverpod Model
DESCRIPTION: A full example showing how to define a model class with custom referential actions. In this example, updating the parent will set the parentId to null, while deleting the parent will raise an error if referenced by this record.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/06-database/03-relations/05-referential-actions.md#2025-04-16_snippet_3

LANGUAGE: yaml
CODE:
class: Example
table: example
fields:
  parentId: int?, relation(parent=example, onUpdate=SetNull, onDelete=NoAction)

----------------------------------------

TITLE: Documented Class Definition
DESCRIPTION: Example showing how to add documentation comments to classes and fields using triple hash syntax.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/05-concepts/02-models.md#2025-04-16_snippet_6

LANGUAGE: yaml
CODE:
### Information about a company.
class: Company
fields:
  ### The name of the company.
  name: String

  ### The date the company was founded, if known.
  foundedDate: DateTime?

  ### A list of people currently employed at the company.
  employees: List<Employee>

----------------------------------------

TITLE: Querying Users with One-to-Many Relation Any and Sub-Filter in Dart
DESCRIPTION: This snippet shows how to use a one-to-many relation any filter with a sub-filter to fetch all users that have any book order from the database.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/06-database/06-filter.md#2025-04-16_snippet_22

LANGUAGE: dart
CODE:
await User.db.find(
  where:((t) => t.orders.any((o) => o.itemType.equals('book')))
);

----------------------------------------

TITLE: Defining Bidirectional One-to-Many Relationship with Foreign Key in YAML for Serverpod
DESCRIPTION: This snippet demonstrates how to define a bidirectional one-to-many relationship using a foreign key field in Serverpod. The Company model includes a List<Employee> field, while the Employee model uses a foreign key with a named relation.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/06-database/03-relations/02-one-to-many.md#2025-04-16_snippet_4

LANGUAGE: yaml
CODE:
# company.yaml
class: Company
table: company
fields:
  name: String
  employees: List<Employee>?, relation(name=company_employees)

# employee.yaml
class: Employee
table: employee
fields:
  name: String
  companyId: int, relation(name=company_employees, parent=company)

----------------------------------------

TITLE: Defining Basic Class Model in YAML
DESCRIPTION: Example of defining a Company class model with various field types including String, DateTime, and List.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/02-models.md#2025-04-16_snippet_0

LANGUAGE: yaml
CODE:
class: Company
fields:
  name: String
  foundedDate: DateTime?
  employees: List<Employee>

----------------------------------------

TITLE: Defining Index-Based Enum in Serverpod Schema
DESCRIPTION: Shows how to define an enum that is serialized by index in Serverpod schema. The enum includes specific values but will be represented by their index in serialized form.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/02-models.md#2025-04-16_snippet_14

LANGUAGE: yaml
CODE:
enum: ByIndexEnum
serialized: byIndex
values:
  - byIndex1
  - byIndex2

----------------------------------------

TITLE: Opening Client WebSocket Connection - Dart
DESCRIPTION: Shows how to establish a WebSocket connection from a client to the Serverpod server for real-time communication.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/05-concepts/14-streams.md#2025-04-16_snippet_3

LANGUAGE: dart
CODE:
await client.openStreamingConnection();


----------------------------------------

TITLE: Initiating Password Reset Request
DESCRIPTION: Starting the password reset flow by requesting a verification email. This triggers the backend to send a password reset verification email to the user.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/11-authentication/04-providers/01-email.md#2025-04-16_snippet_8

LANGUAGE: dart
CODE:
await authController.initiatePasswordReset(email);

----------------------------------------

TITLE: Nested Includes with Lists in Serverpod Query (Dart)
DESCRIPTION: This snippet demonstrates how to include nested objects within a list in a Serverpod query. It retrieves a company record with all related employees, where each employee includes their related address.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/06-database/07-relation-queries.md#2025-04-16_snippet_4

LANGUAGE: dart
CODE:
var user = await Company.db.findById(
  session,
  employeeId,
  include: Company.include(
    employees: Employee.includeList(
      includes: Employee.include(
        address: Address.include(),
      ),
    ),
  ),
);

----------------------------------------

TITLE: Implementing Sign-in with Apple Button in Flutter
DESCRIPTION: This Dart code shows how to implement the SignInWithAppleButton widget which renders the Apple sign-in button and triggers the native sign-in UI. The widget requires passing the auth module from the Serverpod client.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/11-authentication/04-providers/03-apple.md#2025-04-16_snippet_1

LANGUAGE: dart
CODE:
import 'package:serverpod_auth_email_flutter/serverpod_auth_email_flutter.dart';

SignInWithAppleButton(
  caller: client.modules.auth,
);

----------------------------------------

TITLE: Accessing YouTube API with Google Authentication in Dart
DESCRIPTION: Shows how to create a Google client on the server-side and use it to access the YouTube API for a authenticated user in Dart.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.1.0/04-concepts/09-authentication.md#2025-04-16_snippet_9

LANGUAGE: dart
CODE:
var googleClient = await authClientForUser(session, userId);

if (googleClient != null) {
  var youtubeApi = YouTubeApi(googleClient);

  var favorites = await youTubeApi.playlistItems.list(
    ['snippet'],
    playlistId: 'LL', // Liked List
  );

}
else {
  // The user hasn't signed in with Google.
}

----------------------------------------

TITLE: Finding a Single Row with Expression in Dart using Serverpod
DESCRIPTION: This Dart snippet shows how to find a single row in a database table using an expression in Serverpod. It searches for a 'Company' with a specific name.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.22/04-concepts/03-database-communication.md#2025-04-16_snippet_7

LANGUAGE: dart
CODE:
var myCompany = await Company.findSingleRow(
  session,
  where: (t) => t.name.equals('My Company'),
);

----------------------------------------

TITLE: Applying Database Migrations in Bash
DESCRIPTION: Shows how to apply database migrations during server startup using the Serverpod CLI.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/01-get-started.md#2025-04-16_snippet_11

LANGUAGE: bash
CODE:
$ cd mypod/mypod_server
$ dart bin/main.dart --apply-migrations

----------------------------------------

TITLE: Defining Implicit One-to-many Relationship in Serverpod YAML
DESCRIPTION: This snippet demonstrates how to implicitly define a one-to-many relationship between Company and Employee entities using Serverpod's YAML configuration. The Company class includes a List<Employee> field with the 'relation' keyword to establish the relationship.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/05-concepts/06-database/03-relations/02-one-to-many.md#2025-04-16_snippet_0

LANGUAGE: yaml
CODE:
# company.yaml
class: Company
table: company
fields:
  name: String
  employees: List<Employee>?, relation

# employee.yaml
class: Employee
table: employee
fields:
  name: String

----------------------------------------

TITLE: Implementing Custom Password Hash Handling
DESCRIPTION: Configuring custom password hash generation and validation. This allows for custom password hash implementations or migration from existing password storage methods.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/11-authentication/04-providers/01-email.md#2025-04-16_snippet_12

LANGUAGE: dart
CODE:
AuthConfig(
  passwordHashValidator: (
    password,
    email,
    hash, {
      onError,
      onValidationFailure,
    },
  ) {
  // Custom hash validator.
  },
  passwordHashGenerator: (password) {
  // Custom hash generator.
  },
)

----------------------------------------

TITLE: Setting User Object in Serverpod Stream
DESCRIPTION: Demonstrates how to associate a state with a streaming session by setting a user object when a stream is opened. This is typically done in the streamOpened method of an Endpoint.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.9/03-concepts/09-streams.md#2025-04-16_snippet_0

LANGUAGE: dart
CODE:
Future<void> streamOpened(StreamingSession session) async {
  setUserObject(session, MyUserObject());
}

----------------------------------------

TITLE: Calling a Streaming Method from Serverpod Client
DESCRIPTION: Demonstrates how to call a streaming method from the client side, creating input and output streams, listening for messages, and sending data through the stream.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/15-streams.md#2025-04-16_snippet_1

LANGUAGE: dart
CODE:
var inStream = StreamController();
var outStream = client.example.echoStream(inStream.stream);
outStream.listen((message) {
  print('Received message: $message');
});

inStream.add('Hello');
inStream.add(42);

// This will print
// Received message: Hello
// Received message: 42

----------------------------------------

TITLE: Implementing User Data Caching in Dart with Serverpod
DESCRIPTION: This snippet demonstrates how to implement caching for user data in a Serverpod endpoint. It checks the cache for existing data, retrieves from the database if not found, and stores the result in the cache with a 5-minute lifetime.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.1.0/04-concepts/06-caching.md#2025-04-16_snippet_0

LANGUAGE: dart
CODE:
Future<UserData> getUserData(Session session, int userId) async {
  // Define a unique key for the UserData object
  var cacheKey = 'UserData-$userId';

  // Try to retrieve the object from the cache
  var userData = await session.caches.local.get<UserData>(cacheKey);

  // If the object wasn't found in the cache, load it from the database and
  // save it in the cache. Make it valid for 5 minutes.
  if (userData == null) {
    userData = session.db.findById(tUserData, userId) as UserData?;
    await session.caches.local.put(cacheKey, userData!, lifetime: Duration(minutes: 5));
  }

  // Return the user data to the client
  return userData;
}

----------------------------------------

TITLE: Creating Message Stream in Serverpod
DESCRIPTION: Demonstrates how to create and listen to a message stream for a specific channel. The stream emits values whenever messages are posted to the channel.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/16-server-events.md#2025-04-16_snippet_2

LANGUAGE: dart
CODE:
var stream = session.messages.createStream('user_updates');
stream.listen((message) {
    print('Received message: $message');
})

----------------------------------------

TITLE: Batch Updating Multiple Rows in Dart
DESCRIPTION: Example of updating multiple company records in a single atomic operation.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/06-database/05-crud.md#2025-04-16_snippet_7

LANGUAGE: dart
CODE:
var companies = await Company.db.find(session);
companies = companies.map((c) => c.copyWith(name: 'New name')).toList();
var updatedCompanies = await Company.db.update(session, companies);

----------------------------------------

TITLE: Executing Database Transactions in Dart with Serverpod
DESCRIPTION: This snippet demonstrates how to execute a database transaction using Serverpod in Dart, which bundles multiple operations into a single, atomic operation.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.20/04-concepts/03-database-communication.md#2025-04-16_snippet_13

LANGUAGE: dart
CODE:
var result = await session.db.transaction((transaction) async {
  // Do some database queries here.

  // Optionally return a value.
  return true;
});

----------------------------------------

TITLE: Adding Test Dependencies to pubspec.yaml
DESCRIPTION: Adds the required test dependencies (serverpod_test and test packages) to the project's pubspec.yaml file.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/19-testing/01-get-started.md#2025-04-16_snippet_6

LANGUAGE: yaml
CODE:
dev_dependencies:
  serverpod_test: <serverpod version> # Should be same version as the `serverpod` package
  test: ^1.24.2

----------------------------------------

TITLE: Starting the Serverpod Server
DESCRIPTION: Commands to set up and start the Serverpod server, including starting Docker containers and applying database migrations. These steps initialize the server environment.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/05-tutorials/01-first-app.mdx#2025-04-16_snippet_1

LANGUAGE: bash
CODE:
$ cd notes/notes_server
$ docker compose up --build --detach
$ dart bin/main.dart --apply-migrations

----------------------------------------

TITLE: Paginating Related Lists in Serverpod
DESCRIPTION: Demonstrates paginating included lists using limit and offset parameters.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/06-database/07-relation-queries.md#2025-04-16_snippet_8

LANGUAGE: dart
CODE:
var user = await Company.db.findById(
  session,
  employeeId,
  include: Company.include(
    employees: Employee.includeList(
      limit: 10,
      offset: 10,
    ),
  ),
);

----------------------------------------

TITLE: Initializing Firebase in Flutter App
DESCRIPTION: Dart code to initialize Firebase in the main.dart file of a Flutter project, including setting up Firebase UI Auth providers.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/11-authentication/04-providers/05-firebase.md#2025-04-16_snippet_1

LANGUAGE: dart
CODE:
import 'package:firebase_ui_auth/firebase_ui_auth.dart' as firebase;
import 'package:firebase_core/firebase_core.dart';
import 'firebase_options.dart';

...
void main() async {
  ...
  await Firebase.initializeApp(
      options: DefaultFirebaseOptions.currentPlatform,
    );

  firebase.FirebaseUIAuth.configureProviders([
    firebase.PhoneAuthProvider(),
  ]);

  ...
  runApp(const MyApp());
}

----------------------------------------

TITLE: Retrieving User ID from Authenticated Session in Dart
DESCRIPTION: This snippet demonstrates how to obtain the user ID of a signed-in user from the session object in a Serverpod application.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/11-authentication/03-working-with-users.md#2025-04-16_snippet_0

LANGUAGE: dart
CODE:
var userId = (await session.authenticated)?.userId;

----------------------------------------

TITLE: Adding Routes in Serverpod Web Server - Dart
DESCRIPTION: Demonstrates how to add single page and wildcard routes to the Serverpod web server. Shows configuration for both specific paths and pattern matching with asterisk.
SOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/18-webserver.md#2025-04-16_snippet_0

LANGUAGE: dart
CODE:
// Add a single page.
pod.webServer.addRoute(MyRoute(), '/my/page/address');

// Match all paths that start with /item/
pod.webServer.addRoute(AnotherRoute(), '/item/*');
</documentation>

Below follows the conversation with the user: